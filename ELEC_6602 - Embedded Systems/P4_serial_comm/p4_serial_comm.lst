;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/5/2022 1:56:11 AM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x06B90000  	1721
0x0008	0x05590000  	1369
0x000C	0x05590000  	1369
0x0010	0x05590000  	1369
0x0014	0x05590000  	1369
0x0018	0x05590000  	1369
0x001C	0x05590000  	1369
0x0020	0x05590000  	1369
0x0024	0x05590000  	1369
0x0028	0x05590000  	1369
0x002C	0x05590000  	1369
0x0030	0x05590000  	1369
0x0034	0x05590000  	1369
0x0038	0x05590000  	1369
0x003C	0x05590000  	1369
0x0040	0x05590000  	1369
0x0044	0x05590000  	1369
0x0048	0x05590000  	1369
0x004C	0x05590000  	1369
0x0050	0x05590000  	1369
0x0054	0x05590000  	1369
0x0058	0x05590000  	1369
0x005C	0x05590000  	1369
0x0060	0x05590000  	1369
0x0064	0x05590000  	1369
0x0068	0x05590000  	1369
0x006C	0x05590000  	1369
0x0070	0x05590000  	1369
0x0074	0x05590000  	1369
0x0078	0x05590000  	1369
0x007C	0x05590000  	1369
0x0080	0x05590000  	1369
0x0084	0x05590000  	1369
0x0088	0x05590000  	1369
0x008C	0x05590000  	1369
0x0090	0x05590000  	1369
0x0094	0x05590000  	1369
0x0098	0x05590000  	1369
0x009C	0x05590000  	1369
0x00A0	0x05590000  	1369
0x00A4	0x05590000  	1369
0x00A8	0x05590000  	1369
0x00AC	0x05590000  	1369
0x00B0	0x05590000  	1369
0x00B4	0x05590000  	1369
0x00B8	0x05590000  	1369
0x00BC	0x05590000  	1369
0x00C0	0x05590000  	1369
0x00C4	0x05590000  	1369
0x00C8	0x05590000  	1369
0x00CC	0x05590000  	1369
0x00D0	0x05590000  	1369
0x00D4	0x05590000  	1369
0x00D8	0x05590000  	1369
0x00DC	0x05590000  	1369
0x00E0	0x05590000  	1369
0x00E4	0x05590000  	1369
0x00E8	0x05590000  	1369
0x00EC	0x05590000  	1369
0x00F0	0x05590000  	1369
0x00F4	0x05590000  	1369
0x00F8	0x05590000  	1369
0x00FC	0x05590000  	1369
0x0100	0x05590000  	1369
0x0104	0x05590000  	1369
0x0108	0x05590000  	1369
0x010C	0x05590000  	1369
0x0110	0x05590000  	1369
0x0114	0x05590000  	1369
0x0118	0x05590000  	1369
0x011C	0x05590000  	1369
0x0120	0x05590000  	1369
0x0124	0x05590000  	1369
0x0128	0x05590000  	1369
0x012C	0x05590000  	1369
0x0130	0x05590000  	1369
0x0134	0x05590000  	1369
0x0138	0x05590000  	1369
0x013C	0x05590000  	1369
0x0140	0x05590000  	1369
0x0144	0x05590000  	1369
0x0148	0x05590000  	1369
0x014C	0x05590000  	1369
; end of ____SysVT
_main:
;p4_serial_comm.c, 269 :: 		void main() {
0x06B8	0xB0D6    SUB	SP, SP, #344
0x06BA	0xF7FFFF51  BL	1376
0x06BE	0xF000F983  BL	2504
0x06C2	0xF7FFFF3F  BL	1348
0x06C6	0xF000F93F  BL	2376
;p4_serial_comm.c, 272 :: 		uint8_t loop_on = TRUE;
; loop_on start address is: 8 (R2)
0x06CA	0x2201    MOVS	R2, #1
;p4_serial_comm.c, 273 :: 		int32_t min_pos   = 0;
0x06CC	0xF10D0BD4  ADD	R11, SP, #212
0x06D0	0xF10B0A08  ADD	R10, R11, #8
0x06D4	0xF8DFC1A4  LDR	R12, [PC, #420]
0x06D8	0xF7FFFEF4  BL	___CC2DW+0
;p4_serial_comm.c, 274 :: 		int32_t pivot_pos = 0;
;p4_serial_comm.c, 275 :: 		int32_t char_counter = 0;
; char_counter start address is: 12 (R3)
0x06DC	0xF04F0300  MOV	R3, #0
;p4_serial_comm.c, 278 :: 		uint32_t i = 0;
;p4_serial_comm.c, 279 :: 		uint32_t num_ascii = 0;
;p4_serial_comm.c, 287 :: 		uint32_t title_orig[10]= {'O','r','i','g','i','n','a','l',':', '\0'};
0x06E0	0xF10D0BDC  ADD	R11, SP, #220
0x06E4	0xF10B0A7C  ADD	R10, R11, #124
0x06E8	0xF8DFC194  LDR	R12, [PC, #404]
0x06EC	0xF7FFFEEA  BL	___CC2DW+0
;p4_serial_comm.c, 288 :: 		uint32_t title_rev[10]= {'R','e','v','e','r','s','e','d',':','\0'};
;p4_serial_comm.c, 289 :: 		uint32_t title_sorted[]= {'S','o','r','t','e','d',':', '\0'};
;p4_serial_comm.c, 290 :: 		uint32_t title_counter[] = {'N','u','m','.','\x20','S','o','r','t','e','d',':','\0'};
;p4_serial_comm.c, 294 :: 		RCC_APB2ENR |= 0x00000001; 	// Alternate function bit AFIOEN bit[0]. USART1 uses AF for PA9/PA10
0x06F0	0x4864    LDR	R0, [PC, #400]
0x06F2	0x6800    LDR	R0, [R0, #0]
0x06F4	0xF0400101  ORR	R1, R0, #1
0x06F8	0x4862    LDR	R0, [PC, #392]
0x06FA	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 295 :: 		AFIO_MAPR    = 0x00000000; 	// Bit[2] USART1 REMAP 0: No Remap (Tx=PA9; Rx=PA10)
0x06FC	0x2100    MOVS	R1, #0
0x06FE	0x4862    LDR	R0, [PC, #392]
0x0700	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 297 :: 		RCC_APB2ENR |= 1 << 2;		// Enable GPIO Clock - Port A
0x0702	0x4860    LDR	R0, [PC, #384]
0x0704	0x6800    LDR	R0, [R0, #0]
0x0706	0xF0400104  ORR	R1, R0, #4
0x070A	0x485E    LDR	R0, [PC, #376]
0x070C	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 298 :: 		RCC_APB2ENR |= 1 << 5;		// Enable GPIO Clock - Port D
0x070E	0x485D    LDR	R0, [PC, #372]
0x0710	0x6800    LDR	R0, [R0, #0]
0x0712	0xF0400120  ORR	R1, R0, #32
0x0716	0x485B    LDR	R0, [PC, #364]
0x0718	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 299 :: 		RCC_APB2ENR |= 1 << 14; 	// Enable USART1 Clock
0x071A	0x485A    LDR	R0, [PC, #360]
0x071C	0x6800    LDR	R0, [R0, #0]
0x071E	0xF4404180  ORR	R1, R0, #16384
0x0722	0x4858    LDR	R0, [PC, #352]
0x0724	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 301 :: 		GPIOA_CRH &= ~(0xFF << 4);  // Shift 4 bits left to clear bits[9:4] for PA9/PA10 0000 0FF0 -> mask with  FFFF F00F
0x0726	0x4859    LDR	R0, [PC, #356]
0x0728	0x6801    LDR	R1, [R0, #0]
0x072A	0xF24F000F  MOVW	R0, #61455
0x072E	0x4001    ANDS	R1, R0
0x0730	0x4856    LDR	R0, [PC, #344]
0x0732	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 302 :: 		GPIOA_CRH |= (0x0B << 4) ;  // USART1 Tx/PA9 set to CNF=AFoutput push-pull b10; MODE= output-50Hz b11;
0x0734	0x4855    LDR	R0, [PC, #340]
0x0736	0x6800    LDR	R0, [R0, #0]
0x0738	0xF04001B0  ORR	R1, R0, #176
0x073C	0x4853    LDR	R0, [PC, #332]
0x073E	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 303 :: 		GPIOA_CRH |= (0x04 << 8);   // USART1 Rx/PA10 set CNF=Input-floating b01; MODE=Input mode b00;
0x0740	0x4852    LDR	R0, [PC, #328]
0x0742	0x6800    LDR	R0, [R0, #0]
0x0744	0xF4406180  ORR	R1, R0, #1024
0x0748	0x4850    LDR	R0, [PC, #320]
0x074A	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 304 :: 		GPIOD_CRH = GPIO_OUTPUT;
0x074C	0xF04F3133  MOV	R1, #858993459
0x0750	0x484F    LDR	R0, [PC, #316]
0x0752	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 309 :: 		USART1_BRR = 0x00000506;
0x0754	0xF2405106  MOVW	R1, #1286
0x0758	0x484E    LDR	R0, [PC, #312]
0x075A	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 319 :: 		USART1_CR1 &= ~(1<<12);          // Force 8 data bits. M bit is set to 0.
0x075C	0x484E    LDR	R0, [PC, #312]
0x075E	0x6801    LDR	R1, [R0, #0]
0x0760	0xF46F5080  MVN	R0, #4096
0x0764	0x4001    ANDS	R1, R0
0x0766	0x484C    LDR	R0, [PC, #304]
0x0768	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 320 :: 		USART1_CR2 &= ~(3<<12);          // Force 1 stop bit
0x076A	0x484C    LDR	R0, [PC, #304]
0x076C	0x6801    LDR	R1, [R0, #0]
0x076E	0xF46F5040  MVN	R0, #12288
0x0772	0x4001    ANDS	R1, R0
0x0774	0x4849    LDR	R0, [PC, #292]
0x0776	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 321 :: 		USART1_CR3 &= ~(3<<8);           // Force no flow control and no DMA for USART1
0x0778	0x4849    LDR	R0, [PC, #292]
0x077A	0x6801    LDR	R1, [R0, #0]
0x077C	0xF46F7040  MVN	R0, #768
0x0780	0x4001    ANDS	R1, R0
0x0782	0x4847    LDR	R0, [PC, #284]
0x0784	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 322 :: 		USART1_CR1 &= ~(3<<9);           // Force no parity and no parity control
0x0786	0x4844    LDR	R0, [PC, #272]
0x0788	0x6801    LDR	R1, [R0, #0]
0x078A	0xF46F60C0  MVN	R0, #1536
0x078E	0x4001    ANDS	R1, R0
0x0790	0x4841    LDR	R0, [PC, #260]
0x0792	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 323 :: 		USART1_CR1 |= 3<<2;              // RX, TX enable
0x0794	0x4840    LDR	R0, [PC, #256]
0x0796	0x6800    LDR	R0, [R0, #0]
0x0798	0xF040010C  ORR	R1, R0, #12
0x079C	0x483E    LDR	R0, [PC, #248]
0x079E	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 326 :: 		USART1_CR1 |= 1 << 13;			//** NOTE USART1 Enable must be done after configuration is complete
0x07A0	0x483D    LDR	R0, [PC, #244]
0x07A2	0x6800    LDR	R0, [R0, #0]
0x07A4	0xF4405100  ORR	R1, R0, #8192
0x07A8	0x483B    LDR	R0, [PC, #236]
0x07AA	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 327 :: 		Delay_ms(100);					// Allow some time for USART to complete initialization.
0x07AC	0xF644777F  MOVW	R7, #20351
0x07B0	0xF2C00712  MOVT	R7, #18
0x07B4	0xBF00    NOP
0x07B6	0xBF00    NOP
L_main56:
0x07B8	0x1E7F    SUBS	R7, R7, #1
0x07BA	0xD1FD    BNE	L_main56
0x07BC	0xBF00    NOP
0x07BE	0xBF00    NOP
0x07C0	0xBF00    NOP
; loop_on end address is: 8 (R2)
; char_counter end address is: 12 (R3)
0x07C2	0x9300    STR	R3, [SP, #0]
0x07C4	0xB2D3    UXTB	R3, R2
0x07C6	0x9A00    LDR	R2, [SP, #0]
;p4_serial_comm.c, 331 :: 		for (;;) {
L_main58:
;p4_serial_comm.c, 333 :: 		update_led(LED_RESET);
; char_counter start address is: 8 (R2)
; loop_on start address is: 12 (R3)
0x07C8	0x9200    STR	R2, [SP, #0]
0x07CA	0xF04F0000  MOV	R0, #0
0x07CE	0xF7FFFE83  BL	_update_led+0
; loop_on end address is: 12 (R3)
; char_counter end address is: 8 (R2)
0x07D2	0x9A00    LDR	R2, [SP, #0]
;p4_serial_comm.c, 334 :: 		while ( (char_counter < MAX_BUFFER_SIZE) && (loop_on == TRUE) ) {
L_main61:
; loop_on start address is: 12 (R3)
; char_counter start address is: 8 (R2)
0x07D4	0x2A32    CMP	R2, #50
0x07D6	0xD226    BCS	L__main74
0x07D8	0x2B01    CMP	R3, #1
0x07DA	0xD124    BNE	L__main73
L__main72:
;p4_serial_comm.c, 335 :: 		read_data(&rx_buffer[char_counter]);
0x07DC	0xA901    ADD	R1, SP, #4
0x07DE	0x0090    LSLS	R0, R2, #2
0x07E0	0x1808    ADDS	R0, R1, R0
0x07E2	0xF7FFFE8D  BL	_read_data+0
;p4_serial_comm.c, 337 :: 		if (rx_buffer[char_counter] == EXIT_CHAR){
0x07E6	0xA901    ADD	R1, SP, #4
0x07E8	0x0090    LSLS	R0, R2, #2
0x07EA	0x1808    ADDS	R0, R1, R0
0x07EC	0x6800    LDR	R0, [R0, #0]
0x07EE	0x2840    CMP	R0, #64
0x07F0	0xD102    BNE	L_main65
; loop_on end address is: 12 (R3)
;p4_serial_comm.c, 338 :: 		loop_on = FALSE;
; loop_on start address is: 0 (R0)
0x07F2	0x2000    MOVS	R0, #0
;p4_serial_comm.c, 339 :: 		}
0x07F4	0xB2C3    UXTB	R3, R0
; loop_on end address is: 0 (R0)
0x07F6	0xE015    B	L_main66
L_main65:
;p4_serial_comm.c, 340 :: 		else if (rx_buffer[char_counter] != 0x0D) {
; loop_on start address is: 12 (R3)
0x07F8	0xA901    ADD	R1, SP, #4
0x07FA	0x0090    LSLS	R0, R2, #2
0x07FC	0x1808    ADDS	R0, R1, R0
0x07FE	0x6800    LDR	R0, [R0, #0]
0x0800	0x280D    CMP	R0, #13
0x0802	0xD00D    BEQ	L__main75
;p4_serial_comm.c, 341 :: 		++char_counter;
0x0804	0x1C50    ADDS	R0, R2, #1
; char_counter end address is: 8 (R2)
; char_counter start address is: 16 (R4)
0x0806	0x4604    MOV	R4, R0
;p4_serial_comm.c, 342 :: 		update_led(char_counter);
0x0808	0xF7FFFE66  BL	_update_led+0
;p4_serial_comm.c, 344 :: 		if (char_counter == MAX_BUFFER_SIZE) {
0x080C	0x2C32    CMP	R4, #50
0x080E	0xD105    BNE	L_main68
;p4_serial_comm.c, 345 :: 		rx_buffer[char_counter] = EXIT_CHAR;
0x0810	0xA901    ADD	R1, SP, #4
0x0812	0x00A0    LSLS	R0, R4, #2
0x0814	0x1809    ADDS	R1, R1, R0
0x0816	0xF04F0040  MOV	R0, #64
0x081A	0x6008    STR	R0, [R1, #0]
;p4_serial_comm.c, 346 :: 		}
L_main68:
;p4_serial_comm.c, 347 :: 		}
0x081C	0x4620    MOV	R0, R4
0x081E	0xE000    B	L_main67
; char_counter end address is: 16 (R4)
L__main75:
;p4_serial_comm.c, 340 :: 		else if (rx_buffer[char_counter] != 0x0D) {
0x0820	0x4610    MOV	R0, R2
;p4_serial_comm.c, 347 :: 		}
L_main67:
; char_counter start address is: 0 (R0)
; char_counter end address is: 0 (R0)
; loop_on end address is: 12 (R3)
0x0822	0x4602    MOV	R2, R0
L_main66:
;p4_serial_comm.c, 348 :: 		}
; char_counter start address is: 8 (R2)
; loop_on start address is: 12 (R3)
; loop_on end address is: 12 (R3)
0x0824	0xE7D6    B	L_main61
;p4_serial_comm.c, 334 :: 		while ( (char_counter < MAX_BUFFER_SIZE) && (loop_on == TRUE) ) {
L__main74:
L__main73:
;p4_serial_comm.c, 350 :: 		list_len = char_counter;
0x0826	0x481F    LDR	R0, [PC, #124]
0x0828	0x6002    STR	R2, [R0, #0]
;p4_serial_comm.c, 351 :: 		pivot_pos = (char_counter - 1);
0x082A	0x1E50    SUBS	R0, R2, #1
; char_counter end address is: 8 (R2)
0x082C	0x9036    STR	R0, [SP, #216]
;p4_serial_comm.c, 356 :: 		print_header(&title_orig);
0x082E	0xA837    ADD	R0, SP, #220
0x0830	0xF7FFFDF2  BL	_print_header+0
;p4_serial_comm.c, 357 :: 		write_data(&rx_buffer);
0x0834	0xA801    ADD	R0, SP, #4
0x0836	0xF7FFFD5B  BL	_write_data+0
;p4_serial_comm.c, 360 :: 		q_sort(&rx_buffer, &pivot_pos, &min_pos);
0x083A	0xAA35    ADD	R2, SP, #212
0x083C	0xA936    ADD	R1, SP, #216
0x083E	0xA801    ADD	R0, SP, #4
0x0840	0xF7FFFCC6  BL	_q_sort+0
;p4_serial_comm.c, 363 :: 		print_header(&title_sorted);
0x0844	0xA841    ADD	R0, SP, #260
0x0846	0xF7FFFDE7  BL	_print_header+0
;p4_serial_comm.c, 364 :: 		write_data(&rx_buffer);
0x084A	0xA801    ADD	R0, SP, #4
0x084C	0xF7FFFD50  BL	_write_data+0
;p4_serial_comm.c, 366 :: 		print_header(&title_counter);
0x0850	0xA849    ADD	R0, SP, #292
0x0852	0xF7FFFDE1  BL	_print_header+0
;p4_serial_comm.c, 368 :: 		convert_to_ascii(&list_len, &ascii_msb, &ascii_lsb);
0x0856	0xA934    ADD	R1, SP, #208
0x0858	0xA833    ADD	R0, SP, #204
0x085A	0x460A    MOV	R2, R1
0x085C	0x4601    MOV	R1, R0
0x085E	0x4811    LDR	R0, [PC, #68]
0x0860	0xF7FFFDB6  BL	_convert_to_ascii+0
;p4_serial_comm.c, 369 :: 		write_data_char(&ascii_msb, NO_NEW_LINE);
0x0864	0xA833    ADD	R0, SP, #204
0x0866	0x2100    MOVS	R1, #0
0x0868	0xF7FFFC72  BL	_write_data_char+0
;p4_serial_comm.c, 370 :: 		write_data_char(&ascii_lsb, NEW_LINE_EN);
0x086C	0xA834    ADD	R0, SP, #208
0x086E	0x2101    MOVS	R1, #1
0x0870	0xF7FFFC6E  BL	_write_data_char+0
;p4_serial_comm.c, 375 :: 		loop_on = TRUE;
; loop_on start address is: 12 (R3)
0x0874	0x2301    MOVS	R3, #1
;p4_serial_comm.c, 376 :: 		char_counter = 0;
; char_counter start address is: 8 (R2)
0x0876	0x2200    MOVS	R2, #0
;p4_serial_comm.c, 380 :: 		}
; loop_on end address is: 12 (R3)
; char_counter end address is: 8 (R2)
0x0878	0xE7A6    B	L_main58
;p4_serial_comm.c, 385 :: 		}
L_end_main:
L__main_end_loop:
0x087A	0xE7FE    B	L__main_end_loop
0x087C	0x08AC0000  	?ICSmain_min_pos_L0+0
0x0880	0x08B80000  	?ICSmain_title_orig_L0+0
0x0884	0x10184002  	RCC_APB2ENR+0
0x0888	0x00044001  	AFIO_MAPR+0
0x088C	0x08044001  	GPIOA_CRH+0
0x0890	0x14044001  	GPIOD_CRH+0
0x0894	0x38084001  	USART1_BRR+0
0x0898	0x380C4001  	USART1_CR1+0
0x089C	0x38104001  	USART1_CR2+0
0x08A0	0x38144001  	USART1_CR3+0
0x08A4	0x00002000  	_list_len+0
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 28 :: 		
0x04C4	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 30 :: 		
L_loopDW:
;__Lib_System_105_107.c, 31 :: 		
0x04C6	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 32 :: 		
0x04CA	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 33 :: 		
0x04CE	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 34 :: 		
0x04D2	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 36 :: 		
L_end___CC2DW:
0x04D4	0xB001    ADD	SP, SP, #4
0x04D6	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 70 :: 		
0x0488	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 72 :: 		
0x048A	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 73 :: 		
0x048E	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 74 :: 		
0x0492	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 75 :: 		
0x0496	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 76 :: 		
0x0498	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 77 :: 		
0x049C	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 78 :: 		
0x049E	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 79 :: 		
0x04A0	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 80 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 81 :: 		
0x04A2	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 82 :: 		
0x04A6	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 83 :: 		
0x04AA	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 84 :: 		
0x04AC	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 85 :: 		
0x04B0	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 86 :: 		
0x04B2	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 87 :: 		
0x04B4	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 88 :: 		
0x04B8	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 89 :: 		
0x04BC	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 90 :: 		
L_norep:
;__Lib_System_105_107.c, 92 :: 		
L_end___FillZeros:
0x04BE	0xB001    ADD	SP, SP, #4
0x04C0	0x4770    BX	LR
; end of ___FillZeros
_update_led:
;p4_serial_comm.c, 111 :: 		void update_led(uint32_t counter) {
; counter start address is: 0 (R0)
0x04D8	0xB081    SUB	SP, SP, #4
; counter end address is: 0 (R0)
; counter start address is: 0 (R0)
;p4_serial_comm.c, 112 :: 		GPIOD_ODR = (counter << 8);
0x04DA	0x0202    LSLS	R2, R0, #8
; counter end address is: 0 (R0)
0x04DC	0x4907    LDR	R1, [PC, #28]
0x04DE	0x600A    STR	R2, [R1, #0]
;p4_serial_comm.c, 113 :: 		Delay_ms(100);
0x04E0	0xF644777F  MOVW	R7, #20351
0x04E4	0xF2C00712  MOVT	R7, #18
L_update_led21:
0x04E8	0x1E7F    SUBS	R7, R7, #1
0x04EA	0xD1FD    BNE	L_update_led21
0x04EC	0xBF00    NOP
0x04EE	0xBF00    NOP
0x04F0	0xBF00    NOP
0x04F2	0xBF00    NOP
0x04F4	0xBF00    NOP
;p4_serial_comm.c, 114 :: 		}
L_end_update_led:
0x04F6	0xB001    ADD	SP, SP, #4
0x04F8	0x4770    BX	LR
0x04FA	0xBF00    NOP
0x04FC	0x140C4001  	GPIOD_ODR+0
; end of _update_led
_read_data:
;p4_serial_comm.c, 46 :: 		void read_data(uint32_t *rx_buffer){
; rx_buffer start address is: 0 (R0)
0x0500	0xB081    SUB	SP, SP, #4
; rx_buffer end address is: 0 (R0)
; rx_buffer start address is: 0 (R0)
; rx_buffer end address is: 0 (R0)
;p4_serial_comm.c, 50 :: 		while( (USART1_SR & (1 << 5)) == 0 ) {}		// Positive logic
L_read_data0:
; rx_buffer start address is: 0 (R0)
0x0502	0x490E    LDR	R1, [PC, #56]
0x0504	0x6809    LDR	R1, [R1, #0]
0x0506	0xF0010120  AND	R1, R1, #32
0x050A	0xB901    CBNZ	R1, L_read_data1
0x050C	0xE7F9    B	L_read_data0
L_read_data1:
;p4_serial_comm.c, 53 :: 		*rx_buffer = USART1_DR;				// read data from receiver data register
0x050E	0x490C    LDR	R1, [PC, #48]
0x0510	0x6809    LDR	R1, [R1, #0]
0x0512	0x6001    STR	R1, [R0, #0]
; rx_buffer end address is: 0 (R0)
;p4_serial_comm.c, 58 :: 		while ( (USART1_SR & (1 << 7)) == 0) {}
L_read_data2:
0x0514	0x4909    LDR	R1, [PC, #36]
0x0516	0x6809    LDR	R1, [R1, #0]
0x0518	0xF0010180  AND	R1, R1, #128
0x051C	0xB901    CBNZ	R1, L_read_data3
0x051E	0xE7F9    B	L_read_data2
L_read_data3:
;p4_serial_comm.c, 59 :: 		Delay_ms(100);
0x0520	0xF644777F  MOVW	R7, #20351
0x0524	0xF2C00712  MOVT	R7, #18
L_read_data4:
0x0528	0x1E7F    SUBS	R7, R7, #1
0x052A	0xD1FD    BNE	L_read_data4
0x052C	0xBF00    NOP
0x052E	0xBF00    NOP
0x0530	0xBF00    NOP
0x0532	0xBF00    NOP
0x0534	0xBF00    NOP
;p4_serial_comm.c, 60 :: 		}
L_end_read_data:
0x0536	0xB001    ADD	SP, SP, #4
0x0538	0x4770    BX	LR
0x053A	0xBF00    NOP
0x053C	0x38004001  	USART1_SR+0
0x0540	0x38044001  	USART1_DR+0
; end of _read_data
_print_header:
;p4_serial_comm.c, 220 :: 		void print_header(uint32_t *header) {
; header start address is: 0 (R0)
0x0418	0xB081    SUB	SP, SP, #4
0x041A	0xF8CDE000  STR	LR, [SP, #0]
0x041E	0x4601    MOV	R1, R0
; header end address is: 0 (R0)
; header start address is: 4 (R1)
;p4_serial_comm.c, 221 :: 		uint32_t i = 0;
; i start address is: 0 (R0)
0x0420	0xF04F0000  MOV	R0, #0
; header end address is: 4 (R1)
; i end address is: 0 (R0)
0x0424	0x460C    MOV	R4, R1
0x0426	0x4605    MOV	R5, R0
;p4_serial_comm.c, 223 :: 		while (header[i] != '\0') {
L_print_header47:
; i start address is: 20 (R5)
; header start address is: 16 (R4)
0x0428	0x00A9    LSLS	R1, R5, #2
0x042A	0x1861    ADDS	R1, R4, R1
0x042C	0x6809    LDR	R1, [R1, #0]
0x042E	0xB139    CBZ	R1, L_print_header48
;p4_serial_comm.c, 224 :: 		write_data_char( &header[i], NO_NEW_LINE );
0x0430	0x00A9    LSLS	R1, R5, #2
0x0432	0x1861    ADDS	R1, R4, R1
0x0434	0x4608    MOV	R0, R1
0x0436	0x2100    MOVS	R1, #0
0x0438	0xF7FFFE8A  BL	_write_data_char+0
;p4_serial_comm.c, 225 :: 		++i;
0x043C	0x1C6D    ADDS	R5, R5, #1
;p4_serial_comm.c, 226 :: 		}
; header end address is: 16 (R4)
; i end address is: 20 (R5)
0x043E	0xE7F3    B	L_print_header47
L_print_header48:
;p4_serial_comm.c, 229 :: 		Delay_ms(100);
0x0440	0xF644777F  MOVW	R7, #20351
0x0444	0xF2C00712  MOVT	R7, #18
L_print_header49:
0x0448	0x1E7F    SUBS	R7, R7, #1
0x044A	0xD1FD    BNE	L_print_header49
0x044C	0xBF00    NOP
0x044E	0xBF00    NOP
0x0450	0xBF00    NOP
0x0452	0xBF00    NOP
0x0454	0xBF00    NOP
;p4_serial_comm.c, 230 :: 		USART1_DR = CHAR_CR;
0x0456	0xF04F020D  MOV	R2, #13
0x045A	0x490A    LDR	R1, [PC, #40]
0x045C	0x600A    STR	R2, [R1, #0]
;p4_serial_comm.c, 231 :: 		Delay_ms(100);
0x045E	0xF644777F  MOVW	R7, #20351
0x0462	0xF2C00712  MOVT	R7, #18
0x0466	0xBF00    NOP
0x0468	0xBF00    NOP
L_print_header51:
0x046A	0x1E7F    SUBS	R7, R7, #1
0x046C	0xD1FD    BNE	L_print_header51
0x046E	0xBF00    NOP
0x0470	0xBF00    NOP
0x0472	0xBF00    NOP
;p4_serial_comm.c, 232 :: 		USART1_DR = CHAR_LF;
0x0474	0xF04F020A  MOV	R2, #10
0x0478	0x4902    LDR	R1, [PC, #8]
0x047A	0x600A    STR	R2, [R1, #0]
;p4_serial_comm.c, 233 :: 		}
L_end_print_header:
0x047C	0xF8DDE000  LDR	LR, [SP, #0]
0x0480	0xB001    ADD	SP, SP, #4
0x0482	0x4770    BX	LR
0x0484	0x38044001  	USART1_DR+0
; end of _print_header
_write_data_char:
;p4_serial_comm.c, 63 :: 		void write_data_char(uint32_t *tx_char, uint8_t new_line){
; new_line start address is: 4 (R1)
; tx_char start address is: 0 (R0)
0x0150	0xB081    SUB	SP, SP, #4
; new_line end address is: 4 (R1)
; tx_char end address is: 0 (R0)
; tx_char start address is: 0 (R0)
; new_line start address is: 4 (R1)
0x0152	0xF88D1000  STRB	R1, [SP, #0]
; tx_char end address is: 0 (R0)
; new_line end address is: 4 (R1)
0x0156	0x4601    MOV	R1, R0
0x0158	0xF89D0000  LDRB	R0, [SP, #0]
;p4_serial_comm.c, 66 :: 		while ( (USART1_SR & (1 << 7)) == 0) {} // Wait for Transmit data register to be empty
L_write_data_char6:
; new_line start address is: 0 (R0)
; tx_char start address is: 4 (R1)
0x015C	0x4A1A    LDR	R2, [PC, #104]
0x015E	0x6812    LDR	R2, [R2, #0]
0x0160	0xF0020280  AND	R2, R2, #128
0x0164	0xB902    CBNZ	R2, L_write_data_char7
0x0166	0xE7F9    B	L_write_data_char6
L_write_data_char7:
;p4_serial_comm.c, 68 :: 		Delay_ms(100);
0x0168	0xF644777F  MOVW	R7, #20351
0x016C	0xF2C00712  MOVT	R7, #18
L_write_data_char8:
0x0170	0x1E7F    SUBS	R7, R7, #1
0x0172	0xD1FD    BNE	L_write_data_char8
0x0174	0xBF00    NOP
0x0176	0xBF00    NOP
0x0178	0xBF00    NOP
0x017A	0xBF00    NOP
0x017C	0xBF00    NOP
;p4_serial_comm.c, 69 :: 		USART1_DR = *tx_char;			// Transmit data out via USART, same data register is used
0x017E	0x680B    LDR	R3, [R1, #0]
; tx_char end address is: 4 (R1)
0x0180	0x4A12    LDR	R2, [PC, #72]
0x0182	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 73 :: 		if (new_line == 1) {
0x0184	0x2801    CMP	R0, #1
0x0186	0xD11D    BNE	L_write_data_char10
; new_line end address is: 0 (R0)
;p4_serial_comm.c, 74 :: 		Delay_ms(100);
0x0188	0xF644777F  MOVW	R7, #20351
0x018C	0xF2C00712  MOVT	R7, #18
L_write_data_char11:
0x0190	0x1E7F    SUBS	R7, R7, #1
0x0192	0xD1FD    BNE	L_write_data_char11
0x0194	0xBF00    NOP
0x0196	0xBF00    NOP
0x0198	0xBF00    NOP
0x019A	0xBF00    NOP
0x019C	0xBF00    NOP
;p4_serial_comm.c, 75 :: 		USART1_DR = CHAR_CR;			// Write a Carriage Return
0x019E	0xF04F030D  MOV	R3, #13
0x01A2	0x4A0A    LDR	R2, [PC, #40]
0x01A4	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 76 :: 		Delay_ms(100);
0x01A6	0xF644777F  MOVW	R7, #20351
0x01AA	0xF2C00712  MOVT	R7, #18
0x01AE	0xBF00    NOP
0x01B0	0xBF00    NOP
L_write_data_char13:
0x01B2	0x1E7F    SUBS	R7, R7, #1
0x01B4	0xD1FD    BNE	L_write_data_char13
0x01B6	0xBF00    NOP
0x01B8	0xBF00    NOP
0x01BA	0xBF00    NOP
;p4_serial_comm.c, 77 :: 		USART1_DR = CHAR_LF;			// Write a Line Feed
0x01BC	0xF04F030A  MOV	R3, #10
0x01C0	0x4A02    LDR	R2, [PC, #8]
0x01C2	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 78 :: 		}
L_write_data_char10:
;p4_serial_comm.c, 79 :: 		}
L_end_write_data_char:
0x01C4	0xB001    ADD	SP, SP, #4
0x01C6	0x4770    BX	LR
0x01C8	0x38004001  	USART1_SR+0
0x01CC	0x38044001  	USART1_DR+0
; end of _write_data_char
_write_data:
;p4_serial_comm.c, 82 :: 		void write_data(uint32_t *arr_buffer) {
; arr_buffer start address is: 0 (R0)
0x02F0	0xB081    SUB	SP, SP, #4
0x02F2	0xF8CDE000  STR	LR, [SP, #0]
0x02F6	0x4601    MOV	R1, R0
; arr_buffer end address is: 0 (R0)
; arr_buffer start address is: 4 (R1)
;p4_serial_comm.c, 83 :: 		uint32_t i = 0;
; i start address is: 0 (R0)
0x02F8	0xF04F0000  MOV	R0, #0
; arr_buffer end address is: 4 (R1)
; i end address is: 0 (R0)
0x02FC	0x460C    MOV	R4, R1
0x02FE	0x4605    MOV	R5, R0
;p4_serial_comm.c, 85 :: 		while (arr_buffer[i] != EXIT_CHAR) {
L_write_data15:
; i start address is: 20 (R5)
; arr_buffer start address is: 16 (R4)
0x0300	0x00A9    LSLS	R1, R5, #2
0x0302	0x1861    ADDS	R1, R4, R1
0x0304	0x6809    LDR	R1, [R1, #0]
0x0306	0x2940    CMP	R1, #64
0x0308	0xD007    BEQ	L_write_data16
;p4_serial_comm.c, 86 :: 		write_data_char(&arr_buffer[i], NEW_LINE_EN);
0x030A	0x00A9    LSLS	R1, R5, #2
0x030C	0x1861    ADDS	R1, R4, R1
0x030E	0x4608    MOV	R0, R1
0x0310	0x2101    MOVS	R1, #1
0x0312	0xF7FFFF1D  BL	_write_data_char+0
;p4_serial_comm.c, 87 :: 		++i;
0x0316	0x1C6D    ADDS	R5, R5, #1
;p4_serial_comm.c, 88 :: 		}
; arr_buffer end address is: 16 (R4)
; i end address is: 20 (R5)
0x0318	0xE7F2    B	L_write_data15
L_write_data16:
;p4_serial_comm.c, 89 :: 		Delay_ms(100);
0x031A	0xF644777F  MOVW	R7, #20351
0x031E	0xF2C00712  MOVT	R7, #18
L_write_data17:
0x0322	0x1E7F    SUBS	R7, R7, #1
0x0324	0xD1FD    BNE	L_write_data17
0x0326	0xBF00    NOP
0x0328	0xBF00    NOP
0x032A	0xBF00    NOP
0x032C	0xBF00    NOP
0x032E	0xBF00    NOP
;p4_serial_comm.c, 90 :: 		USART1_DR = CHAR_CR;			// Write a Carriage Return
0x0330	0xF04F020D  MOV	R2, #13
0x0334	0x490A    LDR	R1, [PC, #40]
0x0336	0x600A    STR	R2, [R1, #0]
;p4_serial_comm.c, 91 :: 		Delay_ms(100);
0x0338	0xF644777F  MOVW	R7, #20351
0x033C	0xF2C00712  MOVT	R7, #18
L_write_data19:
0x0340	0x1E7F    SUBS	R7, R7, #1
0x0342	0xD1FD    BNE	L_write_data19
0x0344	0xBF00    NOP
0x0346	0xBF00    NOP
0x0348	0xBF00    NOP
0x034A	0xBF00    NOP
0x034C	0xBF00    NOP
;p4_serial_comm.c, 92 :: 		USART1_DR = CHAR_LF;			// Write a Line Fee
0x034E	0xF04F020A  MOV	R2, #10
0x0352	0x4903    LDR	R1, [PC, #12]
0x0354	0x600A    STR	R2, [R1, #0]
;p4_serial_comm.c, 93 :: 		}
L_end_write_data:
0x0356	0xF8DDE000  LDR	LR, [SP, #0]
0x035A	0xB001    ADD	SP, SP, #4
0x035C	0x4770    BX	LR
0x035E	0xBF00    NOP
0x0360	0x38044001  	USART1_DR+0
; end of _write_data
_q_sort:
;p4_serial_comm.c, 128 :: 		int q_sort(uint32_t *arr_list, int32_t *pivot_pos, uint32_t *min_pos) {
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
0x01D0	0xB082    SUB	SP, SP, #8
0x01D2	0xF8CDE000  STR	LR, [SP, #0]
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
; arr_list start address is: 0 (R0)
; pivot_pos start address is: 4 (R1)
; min_pos start address is: 8 (R2)
;p4_serial_comm.c, 130 :: 		uint32_t left_cur = 0;
; left_cur start address is: 32 (R8)
0x01D6	0xF04F0800  MOV	R8, #0
;p4_serial_comm.c, 131 :: 		int32_t right_cur = (*pivot_pos-1);
0x01DA	0x680B    LDR	R3, [R1, #0]
0x01DC	0x1E5B    SUBS	R3, R3, #1
; right_cur start address is: 12 (R3)
;p4_serial_comm.c, 132 :: 		int32_t left_found = 0;
; left_found start address is: 28 (R7)
0x01DE	0xF04F0700  MOV	R7, #0
;p4_serial_comm.c, 133 :: 		uint32_t right_found = 0;
; right_found start address is: 16 (R4)
0x01E2	0xF04F0400  MOV	R4, #0
;p4_serial_comm.c, 134 :: 		uint32_t temp_val = 0;
0x01E6	0x4606    MOV	R6, R0
; right_cur end address is: 12 (R3)
; right_found end address is: 16 (R4)
; left_cur end address is: 32 (R8)
; left_found end address is: 28 (R7)
; arr_list end address is: 0 (R0)
; pivot_pos end address is: 4 (R1)
; min_pos end address is: 8 (R2)
0x01E8	0x4620    MOV	R0, R4
0x01EA	0x460D    MOV	R5, R1
0x01EC	0x4619    MOV	R1, R3
;p4_serial_comm.c, 137 :: 		while (left_found == 0) {
L_q_sort27:
; right_found start address is: 0 (R0)
; left_found start address is: 28 (R7)
; right_cur start address is: 4 (R1)
; left_cur start address is: 32 (R8)
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 20 (R5)
; arr_list start address is: 24 (R6)
0x01EE	0xBB17    CBNZ	R7, L_q_sort28
;p4_serial_comm.c, 139 :: 		if (left_cur == *pivot_pos) {
0x01F0	0x682B    LDR	R3, [R5, #0]
0x01F2	0x4598    CMP	R8, R3
0x01F4	0xD10D    BNE	L_q_sort29
; right_found end address is: 0 (R0)
; right_cur end address is: 4 (R1)
; left_cur end address is: 32 (R8)
; left_found end address is: 28 (R7)
;p4_serial_comm.c, 143 :: 		--(*pivot_pos);
0x01F6	0x682B    LDR	R3, [R5, #0]
0x01F8	0x1E5B    SUBS	R3, R3, #1
0x01FA	0x602B    STR	R3, [R5, #0]
;p4_serial_comm.c, 146 :: 		if ( (*pivot_pos) <= 0) {
0x01FC	0x682B    LDR	R3, [R5, #0]
0x01FE	0x2B00    CMP	R3, #0
0x0200	0xDC02    BGT	L_q_sort30
; pivot_pos end address is: 20 (R5)
; arr_list end address is: 24 (R6)
; min_pos end address is: 8 (R2)
;p4_serial_comm.c, 147 :: 		return 0;
0x0202	0x2000    MOVS	R0, #0
0x0204	0xB200    SXTH	R0, R0
0x0206	0xE06E    B	L_end_q_sort
;p4_serial_comm.c, 148 :: 		}
L_q_sort30:
;p4_serial_comm.c, 151 :: 		return q_sort(arr_list, pivot_pos, min_pos);
; min_pos start address is: 8 (R2)
; arr_list start address is: 24 (R6)
; pivot_pos start address is: 20 (R5)
; min_pos end address is: 8 (R2)
0x0208	0x4629    MOV	R1, R5
; pivot_pos end address is: 20 (R5)
0x020A	0x4630    MOV	R0, R6
; arr_list end address is: 24 (R6)
0x020C	0xF7FFFFE0  BL	_q_sort+0
0x0210	0xE069    B	L_end_q_sort
;p4_serial_comm.c, 153 :: 		}
L_q_sort29:
;p4_serial_comm.c, 155 :: 		else if ( (arr_list[left_cur]) < (arr_list[*pivot_pos]) ) {
; min_pos start address is: 8 (R2)
; left_found start address is: 28 (R7)
; left_cur start address is: 32 (R8)
; arr_list start address is: 24 (R6)
; pivot_pos start address is: 20 (R5)
; right_cur start address is: 4 (R1)
; right_found start address is: 0 (R0)
0x0212	0xEA4F0388  LSL	R3, R8, #2
0x0216	0x18F3    ADDS	R3, R6, R3
0x0218	0x681C    LDR	R4, [R3, #0]
0x021A	0x682B    LDR	R3, [R5, #0]
0x021C	0x009B    LSLS	R3, R3, #2
0x021E	0x18F3    ADDS	R3, R6, R3
0x0220	0x681B    LDR	R3, [R3, #0]
0x0222	0x429C    CMP	R4, R3
0x0224	0xD202    BCS	L_q_sort33
; left_found end address is: 28 (R7)
;p4_serial_comm.c, 156 :: 		left_found = 1;
; left_found start address is: 12 (R3)
0x0226	0x2301    MOVS	R3, #1
;p4_serial_comm.c, 157 :: 		}
0x0228	0x461F    MOV	R7, R3
; left_found end address is: 12 (R3)
0x022A	0xE003    B	L_q_sort34
L_q_sort33:
;p4_serial_comm.c, 159 :: 		++left_cur;
; left_found start address is: 28 (R7)
0x022C	0xF1080301  ADD	R3, R8, #1
; left_cur end address is: 32 (R8)
; left_cur start address is: 16 (R4)
0x0230	0x461C    MOV	R4, R3
; left_cur end address is: 16 (R4)
; left_found end address is: 28 (R7)
0x0232	0x46A0    MOV	R8, R4
;p4_serial_comm.c, 160 :: 		}
L_q_sort34:
;p4_serial_comm.c, 161 :: 		}
; left_cur start address is: 32 (R8)
; left_found start address is: 28 (R7)
; left_found end address is: 28 (R7)
0x0234	0xE7DB    B	L_q_sort27
L_q_sort28:
;p4_serial_comm.c, 164 :: 		while (right_found == 0) {
0x0236	0x9601    STR	R6, [SP, #4]
; right_cur end address is: 4 (R1)
; pivot_pos end address is: 20 (R5)
; arr_list end address is: 24 (R6)
; left_cur end address is: 32 (R8)
; min_pos end address is: 8 (R2)
0x0238	0x4646    MOV	R6, R8
0x023A	0x4680    MOV	R8, R0
0x023C	0x460F    MOV	R7, R1
0x023E	0x4629    MOV	R1, R5
0x0240	0x9801    LDR	R0, [SP, #4]
L_q_sort35:
; right_found end address is: 0 (R0)
; arr_list start address is: 0 (R0)
; pivot_pos start address is: 4 (R1)
; min_pos start address is: 8 (R2)
; left_cur start address is: 24 (R6)
; right_cur start address is: 28 (R7)
; right_found start address is: 32 (R8)
0x0242	0xF1B80F00  CMP	R8, #0
0x0246	0xD12B    BNE	L_q_sort36
;p4_serial_comm.c, 166 :: 		if ( (right_cur == *min_pos) && (arr_list[right_cur]) <= (arr_list[*pivot_pos]) ) {
0x0248	0x6813    LDR	R3, [R2, #0]
0x024A	0x429F    CMP	R7, R3
0x024C	0xD118    BNE	L__q_sort71
0x024E	0x00BB    LSLS	R3, R7, #2
0x0250	0x18C5    ADDS	R5, R0, R3
0x0252	0x680B    LDR	R3, [R1, #0]
0x0254	0x009B    LSLS	R3, R3, #2
0x0256	0x18C3    ADDS	R3, R0, R3
0x0258	0x681C    LDR	R4, [R3, #0]
0x025A	0x682B    LDR	R3, [R5, #0]
0x025C	0x42A3    CMP	R3, R4
0x025E	0xD80F    BHI	L__q_sort70
; right_cur end address is: 28 (R7)
; right_found end address is: 32 (R8)
L__q_sort69:
;p4_serial_comm.c, 171 :: 		temp_val = arr_list[left_cur];
0x0260	0x00B3    LSLS	R3, R6, #2
0x0262	0x18C4    ADDS	R4, R0, R3
0x0264	0x6825    LDR	R5, [R4, #0]
; temp_val start address is: 20 (R5)
;p4_serial_comm.c, 172 :: 		arr_list[left_cur] = arr_list[*pivot_pos];
0x0266	0x680B    LDR	R3, [R1, #0]
0x0268	0x009B    LSLS	R3, R3, #2
0x026A	0x18C3    ADDS	R3, R0, R3
0x026C	0x681B    LDR	R3, [R3, #0]
0x026E	0x6023    STR	R3, [R4, #0]
;p4_serial_comm.c, 173 :: 		arr_list[*pivot_pos] = temp_val;
0x0270	0x680B    LDR	R3, [R1, #0]
0x0272	0x009B    LSLS	R3, R3, #2
0x0274	0x18C3    ADDS	R3, R0, R3
0x0276	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;p4_serial_comm.c, 176 :: 		*min_pos = left_cur;
0x0278	0x6016    STR	R6, [R2, #0]
; left_cur end address is: 24 (R6)
;p4_serial_comm.c, 179 :: 		return q_sort( arr_list, pivot_pos, min_pos );
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
0x027A	0xF7FFFFA9  BL	_q_sort+0
0x027E	0xE032    B	L_end_q_sort
;p4_serial_comm.c, 166 :: 		if ( (right_cur == *min_pos) && (arr_list[right_cur]) <= (arr_list[*pivot_pos]) ) {
L__q_sort71:
; right_found start address is: 32 (R8)
; right_cur start address is: 28 (R7)
; left_cur start address is: 24 (R6)
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
L__q_sort70:
;p4_serial_comm.c, 182 :: 		else if ( (arr_list[right_cur]) >= (arr_list[*pivot_pos]) ) {
0x0280	0x00BB    LSLS	R3, R7, #2
0x0282	0x18C3    ADDS	R3, R0, R3
0x0284	0x681C    LDR	R4, [R3, #0]
0x0286	0x680B    LDR	R3, [R1, #0]
0x0288	0x009B    LSLS	R3, R3, #2
0x028A	0x18C3    ADDS	R3, R0, R3
0x028C	0x681B    LDR	R3, [R3, #0]
0x028E	0x429C    CMP	R4, R3
0x0290	0xD302    BCC	L_q_sort41
; right_found end address is: 32 (R8)
;p4_serial_comm.c, 184 :: 		right_found =1;
; right_found start address is: 12 (R3)
0x0292	0x2301    MOVS	R3, #1
;p4_serial_comm.c, 185 :: 		}
0x0294	0x4698    MOV	R8, R3
; right_found end address is: 12 (R3)
0x0296	0xE002    B	L_q_sort42
L_q_sort41:
;p4_serial_comm.c, 188 :: 		--right_cur;
; right_found start address is: 32 (R8)
0x0298	0x1E7B    SUBS	R3, R7, #1
; right_cur end address is: 28 (R7)
; right_cur start address is: 16 (R4)
0x029A	0x461C    MOV	R4, R3
; right_cur end address is: 16 (R4)
; right_found end address is: 32 (R8)
0x029C	0x4627    MOV	R7, R4
;p4_serial_comm.c, 189 :: 		}
L_q_sort42:
;p4_serial_comm.c, 190 :: 		}
; right_cur start address is: 28 (R7)
; right_found start address is: 32 (R8)
; right_found end address is: 32 (R8)
0x029E	0xE7D0    B	L_q_sort35
L_q_sort36:
;p4_serial_comm.c, 194 :: 		if (right_cur > left_cur) {
0x02A0	0x42B7    CMP	R7, R6
0x02A2	0xD90E    BLS	L_q_sort43
; right_cur end address is: 28 (R7)
;p4_serial_comm.c, 195 :: 		temp_val = arr_list[left_cur];
0x02A4	0x00B3    LSLS	R3, R6, #2
; left_cur end address is: 24 (R6)
0x02A6	0x18C4    ADDS	R4, R0, R3
0x02A8	0x6825    LDR	R5, [R4, #0]
; temp_val start address is: 20 (R5)
;p4_serial_comm.c, 196 :: 		arr_list[left_cur] = arr_list[*pivot_pos];
0x02AA	0x680B    LDR	R3, [R1, #0]
0x02AC	0x009B    LSLS	R3, R3, #2
0x02AE	0x18C3    ADDS	R3, R0, R3
0x02B0	0x681B    LDR	R3, [R3, #0]
0x02B2	0x6023    STR	R3, [R4, #0]
;p4_serial_comm.c, 197 :: 		arr_list[*pivot_pos] = temp_val;
0x02B4	0x680B    LDR	R3, [R1, #0]
0x02B6	0x009B    LSLS	R3, R3, #2
0x02B8	0x18C3    ADDS	R3, R0, R3
0x02BA	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;p4_serial_comm.c, 201 :: 		*min_pos = 0;
0x02BC	0x2300    MOVS	R3, #0
0x02BE	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 202 :: 		}
0x02C0	0xE00A    B	L_q_sort44
L_q_sort43:
;p4_serial_comm.c, 205 :: 		temp_val = arr_list[left_cur];
; right_cur start address is: 28 (R7)
; left_cur start address is: 24 (R6)
0x02C2	0x00B3    LSLS	R3, R6, #2
; left_cur end address is: 24 (R6)
0x02C4	0x18C4    ADDS	R4, R0, R3
0x02C6	0x6823    LDR	R3, [R4, #0]
; temp_val start address is: 20 (R5)
0x02C8	0x461D    MOV	R5, R3
;p4_serial_comm.c, 206 :: 		arr_list[left_cur] = arr_list[right_cur];
0x02CA	0x00BB    LSLS	R3, R7, #2
0x02CC	0x18C3    ADDS	R3, R0, R3
0x02CE	0x681B    LDR	R3, [R3, #0]
0x02D0	0x6023    STR	R3, [R4, #0]
;p4_serial_comm.c, 207 :: 		arr_list[right_cur] = temp_val;
0x02D2	0x00BB    LSLS	R3, R7, #2
; right_cur end address is: 28 (R7)
0x02D4	0x18C3    ADDS	R3, R0, R3
0x02D6	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;p4_serial_comm.c, 208 :: 		}
L_q_sort44:
;p4_serial_comm.c, 210 :: 		if (*pivot_pos == 0) {
0x02D8	0x680B    LDR	R3, [R1, #0]
0x02DA	0xB913    CBNZ	R3, L_q_sort45
; arr_list end address is: 0 (R0)
; pivot_pos end address is: 4 (R1)
; min_pos end address is: 8 (R2)
;p4_serial_comm.c, 211 :: 		return 0;
0x02DC	0x2000    MOVS	R0, #0
0x02DE	0xB200    SXTH	R0, R0
0x02E0	0xE001    B	L_end_q_sort
;p4_serial_comm.c, 212 :: 		}
L_q_sort45:
;p4_serial_comm.c, 214 :: 		return q_sort(arr_list, pivot_pos, min_pos);
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
0x02E2	0xF7FFFF75  BL	_q_sort+0
;p4_serial_comm.c, 217 :: 		}
L_end_q_sort:
0x02E6	0xF8DDE000  LDR	LR, [SP, #0]
0x02EA	0xB002    ADD	SP, SP, #8
0x02EC	0x4770    BX	LR
; end of _q_sort
_convert_to_ascii:
;p4_serial_comm.c, 236 :: 		void convert_to_ascii(int32_t *input_dec, uint32_t *ascii_msb, uint32_t *ascii_lsb)
; ascii_lsb start address is: 8 (R2)
; ascii_msb start address is: 4 (R1)
; input_dec start address is: 0 (R0)
0x03D0	0xB081    SUB	SP, SP, #4
0x03D2	0x9100    STR	R1, [SP, #0]
0x03D4	0x4601    MOV	R1, R0
0x03D6	0x9800    LDR	R0, [SP, #0]
; ascii_lsb end address is: 8 (R2)
; ascii_msb end address is: 4 (R1)
; input_dec end address is: 0 (R0)
; input_dec start address is: 4 (R1)
; ascii_msb start address is: 0 (R0)
; ascii_lsb start address is: 8 (R2)
;p4_serial_comm.c, 239 :: 		uint32_t temp_val = 0;
;p4_serial_comm.c, 240 :: 		*ascii_msb = 0;
0x03D8	0x2300    MOVS	R3, #0
0x03DA	0x6003    STR	R3, [R0, #0]
;p4_serial_comm.c, 241 :: 		*ascii_lsb = 0;
0x03DC	0x2300    MOVS	R3, #0
0x03DE	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 244 :: 		if (*input_dec > MAX_BUFFER_SIZE ) {
0x03E0	0x680B    LDR	R3, [R1, #0]
0x03E2	0x2B32    CMP	R3, #50
0x03E4	0xD900    BLS	L_convert_to_ascii53
; ascii_msb end address is: 0 (R0)
; ascii_lsb end address is: 8 (R2)
; input_dec end address is: 4 (R1)
;p4_serial_comm.c, 245 :: 		return; // error code
0x03E6	0xE014    B	L_end_convert_to_ascii
;p4_serial_comm.c, 246 :: 		}
L_convert_to_ascii53:
;p4_serial_comm.c, 249 :: 		temp_val = *input_dec;
; input_dec start address is: 4 (R1)
; ascii_lsb start address is: 8 (R2)
; ascii_msb start address is: 0 (R0)
0x03E8	0x680C    LDR	R4, [R1, #0]
; temp_val start address is: 16 (R4)
; ascii_msb end address is: 0 (R0)
; ascii_lsb end address is: 8 (R2)
; input_dec end address is: 4 (R1)
; temp_val end address is: 16 (R4)
0x03EA	0x9200    STR	R2, [SP, #0]
0x03EC	0x4602    MOV	R2, R0
0x03EE	0x9800    LDR	R0, [SP, #0]
;p4_serial_comm.c, 250 :: 		while (temp_val >=10) {
L_convert_to_ascii54:
; temp_val start address is: 16 (R4)
; ascii_msb start address is: 8 (R2)
; ascii_lsb start address is: 0 (R0)
; ascii_msb start address is: 8 (R2)
; ascii_msb end address is: 8 (R2)
; input_dec start address is: 4 (R1)
0x03F0	0x2C0A    CMP	R4, #10
0x03F2	0xD306    BCC	L_convert_to_ascii55
; ascii_msb end address is: 8 (R2)
;p4_serial_comm.c, 251 :: 		temp_val /= 10;
; ascii_msb start address is: 8 (R2)
0x03F4	0x230A    MOVS	R3, #10
0x03F6	0xFBB4F3F3  UDIV	R3, R4, R3
0x03FA	0x461C    MOV	R4, R3
;p4_serial_comm.c, 252 :: 		*ascii_msb = temp_val + ASCII_HEX_0;
0x03FC	0x3330    ADDS	R3, #48
0x03FE	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 257 :: 		}
; ascii_msb end address is: 8 (R2)
; temp_val end address is: 16 (R4)
0x0400	0xE7F6    B	L_convert_to_ascii54
L_convert_to_ascii55:
;p4_serial_comm.c, 260 :: 		temp_val = *input_dec;
0x0402	0x680D    LDR	R5, [R1, #0]
; input_dec end address is: 4 (R1)
;p4_serial_comm.c, 262 :: 		temp_val %= 10;
0x0404	0x240A    MOVS	R4, #10
0x0406	0xFBB5F3F4  UDIV	R3, R5, R4
0x040A	0xFB045313  MLS	R3, R4, R3, R5
;p4_serial_comm.c, 264 :: 		*ascii_lsb = temp_val +ASCII_HEX_0;
0x040E	0x3330    ADDS	R3, #48
0x0410	0x6003    STR	R3, [R0, #0]
; ascii_lsb end address is: 0 (R0)
;p4_serial_comm.c, 266 :: 		}
L_end_convert_to_ascii:
0x0412	0xB001    ADD	SP, SP, #4
0x0414	0x4770    BX	LR
; end of _convert_to_ascii
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 391 :: 		
0x0560	0xB081    SUB	SP, SP, #4
0x0562	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 395 :: 		
; ulRCC_CR start address is: 8 (R2)
0x0566	0x4A4A    LDR	R2, [PC, #296]
;__Lib_System_105_107.c, 396 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x0568	0x4B4A    LDR	R3, [PC, #296]
;__Lib_System_105_107.c, 397 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x056A	0x4C4B    LDR	R4, [PC, #300]
;__Lib_System_105_107.c, 398 :: 		
; Fosc_kHz start address is: 20 (R5)
0x056C	0x4D4B    LDR	R5, [PC, #300]
;__Lib_System_105_107.c, 407 :: 		
0x056E	0xF00300F0  AND	R0, R3, #240
;__Lib_System_105_107.c, 408 :: 		
0x0572	0x0901    LSRS	R1, R0, #4
;__Lib_System_105_107.c, 409 :: 		
0x0574	0x484A    LDR	R0, [PC, #296]
0x0576	0x1840    ADDS	R0, R0, R1
0x0578	0x7800    LDRB	R0, [R0, #0]
; presc start address is: 0 (R0)
;__Lib_System_105_107.c, 411 :: 		
0x057A	0xFA05F100  LSL	R1, R5, R0
; Fosc_kHz end address is: 20 (R5)
; presc end address is: 0 (R0)
; SYS_clk start address is: 20 (R5)
0x057E	0x460D    MOV	R5, R1
;__Lib_System_105_107.c, 413 :: 		
0x0580	0xF64B3080  MOVW	R0, #48000
0x0584	0x4281    CMP	R1, R0
0x0586	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC234
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 414 :: 		
0x0588	0x4846    LDR	R0, [PC, #280]
0x058A	0x6800    LDR	R0, [R0, #0]
0x058C	0xF0400102  ORR	R1, R0, #2
0x0590	0x4844    LDR	R0, [PC, #272]
0x0592	0x6001    STR	R1, [R0, #0]
0x0594	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
L___Lib_System_105_107_InitialSetUpRCCRCC234:
;__Lib_System_105_107.c, 415 :: 		
; SYS_clk start address is: 20 (R5)
0x0596	0xF64550C0  MOVW	R0, #24000
0x059A	0x4285    CMP	R5, R0
0x059C	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC236
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 416 :: 		
0x059E	0x4841    LDR	R0, [PC, #260]
0x05A0	0x6800    LDR	R0, [R0, #0]
0x05A2	0xF0400101  ORR	R1, R0, #1
0x05A6	0x483F    LDR	R0, [PC, #252]
0x05A8	0x6001    STR	R1, [R0, #0]
0x05AA	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC237
L___Lib_System_105_107_InitialSetUpRCCRCC236:
;__Lib_System_105_107.c, 418 :: 		
0x05AC	0x483D    LDR	R0, [PC, #244]
0x05AE	0x6801    LDR	R1, [R0, #0]
0x05B0	0xF06F0007  MVN	R0, #7
0x05B4	0x4001    ANDS	R1, R0
0x05B6	0x483B    LDR	R0, [PC, #236]
0x05B8	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC237:
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 420 :: 		
0x05BA	0xF7FFFED3  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 422 :: 		
0x05BE	0x483A    LDR	R0, [PC, #232]
0x05C0	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 423 :: 		
0x05C2	0x483A    LDR	R0, [PC, #232]
0x05C4	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 424 :: 		
0x05C6	0x483A    LDR	R0, [PC, #232]
0x05C8	0xEA020100  AND	R1, R2, R0, LSL #0
0x05CC	0x4839    LDR	R0, [PC, #228]
0x05CE	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 426 :: 		
0x05D0	0xF0020001  AND	R0, R2, #1
0x05D4	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x05D6	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 427 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x05D8	0x4836    LDR	R0, [PC, #216]
0x05DA	0x6800    LDR	R0, [R0, #0]
0x05DC	0xF0000002  AND	R0, R0, #2
0x05E0	0x2800    CMP	R0, #0
0x05E2	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 428 :: 		
0x05E4	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 429 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x05E6	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 426 :: 		
0x05E8	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 429 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 431 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x05EA	0xF4023080  AND	R0, R2, #65536
0x05EE	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x05F0	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 432 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x05F2	0x4830    LDR	R0, [PC, #192]
0x05F4	0x6800    LDR	R0, [R0, #0]
0x05F6	0xF4003000  AND	R0, R0, #131072
0x05FA	0x2800    CMP	R0, #0
0x05FC	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 433 :: 		
0x05FE	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 434 :: 		
; ulRCC_CR end address is: 8 (R2)
0x0600	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 431 :: 		
0x0602	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 434 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 436 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x0604	0xF0025080  AND	R0, R2, #268435456
0x0608	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC257
;__Lib_System_105_107.c, 437 :: 		
0x060A	0x482A    LDR	R0, [PC, #168]
0x060C	0x6800    LDR	R0, [R0, #0]
0x060E	0xF0405180  ORR	R1, R0, #268435456
0x0612	0x4828    LDR	R0, [PC, #160]
0x0614	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 438 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x0616	0x4827    LDR	R0, [PC, #156]
0x0618	0x6800    LDR	R0, [R0, #0]
0x061A	0xF0005000  AND	R0, R0, #536870912
0x061E	0x2800    CMP	R0, #0
0x0620	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 439 :: 		
0x0622	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 440 :: 		
; ulRCC_CR end address is: 8 (R2)
0x0624	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC257:
;__Lib_System_105_107.c, 436 :: 		
;__Lib_System_105_107.c, 440 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 442 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x0626	0xF0026080  AND	R0, R2, #67108864
0x062A	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC258
;__Lib_System_105_107.c, 443 :: 		
0x062C	0x4821    LDR	R0, [PC, #132]
0x062E	0x6800    LDR	R0, [R0, #0]
0x0630	0xF0406180  ORR	R1, R0, #67108864
0x0634	0x481F    LDR	R0, [PC, #124]
0x0636	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x0638	0x4611    MOV	R1, R2
0x063A	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 444 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x063C	0x481D    LDR	R0, [PC, #116]
0x063E	0x6800    LDR	R0, [R0, #0]
0x0640	0xF0006000  AND	R0, R0, #134217728
0x0644	0x2800    CMP	R0, #0
0x0646	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 445 :: 		
0x0648	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 446 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x064A	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC258:
;__Lib_System_105_107.c, 442 :: 		
0x064C	0x4611    MOV	R1, R2
0x064E	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 446 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 448 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x0650	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x0654	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC259
;__Lib_System_105_107.c, 449 :: 		
0x0656	0x4817    LDR	R0, [PC, #92]
0x0658	0x6800    LDR	R0, [R0, #0]
0x065A	0xF0407180  ORR	R1, R0, #16777216
0x065E	0x4815    LDR	R0, [PC, #84]
0x0660	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x0662	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 450 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC251:
; ulRCC_CFGR start address is: 4 (R1)
0x0664	0x4813    LDR	R0, [PC, #76]
0x0666	0x6800    LDR	R0, [R0, #0]
0x0668	0xF0007000  AND	R0, R0, #33554432
0x066C	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
;__Lib_System_105_107.c, 451 :: 		
0x066E	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC251
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 452 :: 		
0x0670	0x460A    MOV	R2, R1
0x0672	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC259:
;__Lib_System_105_107.c, 448 :: 		
;__Lib_System_105_107.c, 452 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC250:
;__Lib_System_105_107.c, 456 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
; ulRCC_CFGR start address is: 8 (R2)
0x0674	0x480C    LDR	R0, [PC, #48]
0x0676	0x6800    LDR	R0, [R0, #0]
0x0678	0xF000010C  AND	R1, R0, #12
0x067C	0x0090    LSLS	R0, R2, #2
0x067E	0xF000000C  AND	R0, R0, #12
0x0682	0x4281    CMP	R1, R0
0x0684	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 457 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x0686	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC253
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 458 :: 		
L_end_InitialSetUpRCCRCC2:
0x0688	0xF8DDE000  LDR	LR, [SP, #0]
0x068C	0xB001    ADD	SP, SP, #4
0x068E	0x4770    BX	LR
0x0690	0x00811501  	#352387201
0x0694	0x8402091D  	#152929282
0x0698	0xF6440001  	#128580
0x069C	0x19400001  	#72000
0x06A0	0x09340000  	__Lib_System_105_107_APBAHBPrescTable+0
0x06A4	0x20004002  	FLASH_ACR+0
0x06A8	0x10044002  	RCC_CFGR+0
0x06AC	0x102C4002  	RCC_CFGR2+0
0x06B0	0xFFFF000F  	#1048575
0x06B4	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 360 :: 		
0x0364	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 363 :: 		
0x0366	0x4815    LDR	R0, [PC, #84]
0x0368	0x6800    LDR	R0, [R0, #0]
0x036A	0xF0400101  ORR	R1, R0, #1
0x036E	0x4813    LDR	R0, [PC, #76]
0x0370	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 366 :: 		
0x0372	0x4913    LDR	R1, [PC, #76]
0x0374	0x4813    LDR	R0, [PC, #76]
0x0376	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 369 :: 		
0x0378	0x4810    LDR	R0, [PC, #64]
0x037A	0x6801    LDR	R1, [R0, #0]
0x037C	0x4812    LDR	R0, [PC, #72]
0x037E	0x4001    ANDS	R1, R0
0x0380	0x480E    LDR	R0, [PC, #56]
0x0382	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
0x0384	0x480D    LDR	R0, [PC, #52]
0x0386	0x6801    LDR	R1, [R0, #0]
0x0388	0xF46F2080  MVN	R0, #262144
0x038C	0x4001    ANDS	R1, R0
0x038E	0x480B    LDR	R0, [PC, #44]
0x0390	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 375 :: 		
0x0392	0x480C    LDR	R0, [PC, #48]
0x0394	0x6801    LDR	R1, [R0, #0]
0x0396	0xF46F00FE  MVN	R0, #8323072
0x039A	0x4001    ANDS	R1, R0
0x039C	0x4809    LDR	R0, [PC, #36]
0x039E	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 378 :: 		
0x03A0	0x4806    LDR	R0, [PC, #24]
0x03A2	0x6801    LDR	R1, [R0, #0]
0x03A4	0xF06F50A0  MVN	R0, #335544320
0x03A8	0x4001    ANDS	R1, R0
0x03AA	0x4804    LDR	R0, [PC, #16]
0x03AC	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 381 :: 		
0x03AE	0xF04F0100  MOV	R1, #0
0x03B2	0x4806    LDR	R0, [PC, #24]
0x03B4	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 385 :: 		
L_end_SystemClockSetDefault:
0x03B6	0xB001    ADD	SP, SP, #4
0x03B8	0x4770    BX	LR
0x03BA	0xBF00    NOP
0x03BC	0x10004002  	RCC_CR+0
0x03C0	0x0000F0FF  	#-251723776
0x03C4	0x10044002  	RCC_CFGR+0
0x03C8	0xFFFFFEF6  	#-17367041
0x03CC	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 460 :: 		
0x0544	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 461 :: 		
0x0546	0x4902    LDR	R1, [PC, #8]
0x0548	0x4802    LDR	R0, [PC, #8]
0x054A	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 462 :: 		
L_end_InitialSetUpFosc:
0x054C	0xB001    ADD	SP, SP, #4
0x054E	0x4770    BX	LR
0x0550	0x19400001  	#72000
0x0554	0x00042000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 311 :: 		
0x0558	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 312 :: 		
L___GenExcept30:
0x055A	0xE7FE    B	L___GenExcept30
;__Lib_System_105_107.c, 313 :: 		
L_end___GenExcept:
0x055C	0xB001    ADD	SP, SP, #4
0x055E	0x4770    BX	LR
; end of ___GenExcept
0x0948	0xB500    PUSH	(R14)
0x094A	0xF8DFB014  LDR	R11, [PC, #20]
0x094E	0xF8DFA014  LDR	R10, [PC, #20]
0x0952	0xF8DFC014  LDR	R12, [PC, #20]
0x0956	0xF7FFFDB5  BL	1220
0x095A	0xBD00    POP	(R15)
0x095C	0x4770    BX	LR
0x095E	0xBF00    NOP
0x0960	0x00002000  	#536870912
0x0964	0x00042000  	#536870916
0x0968	0x09440000  	#2372
0x09C8	0xB500    PUSH	(R14)
0x09CA	0xF8DFB010  LDR	R11, [PC, #16]
0x09CE	0xF8DFA010  LDR	R10, [PC, #16]
0x09D2	0xF7FFFD59  BL	1160
0x09D6	0xBD00    POP	(R15)
0x09D8	0x4770    BX	LR
0x09DA	0xBF00    NOP
0x09DC	0x00002000  	#536870912
0x09E0	0x00082000  	#536870920
;p4_serial_comm.c,0 :: ?ICSmain_loop_on_L0 [1]
0x08A8	0x01 ;?ICSmain_loop_on_L0+0
; end of ?ICSmain_loop_on_L0
;p4_serial_comm.c,0 :: ?ICSmain_min_pos_L0 [4]
0x08AC	0x00000000 ;?ICSmain_min_pos_L0+0
; end of ?ICSmain_min_pos_L0
;p4_serial_comm.c,0 :: ?ICSmain_pivot_pos_L0 [4]
0x08B0	0x00000000 ;?ICSmain_pivot_pos_L0+0
; end of ?ICSmain_pivot_pos_L0
;p4_serial_comm.c,0 :: ?ICSmain_char_counter_L0 [4]
0x08B4	0x00000000 ;?ICSmain_char_counter_L0+0
; end of ?ICSmain_char_counter_L0
;p4_serial_comm.c,0 :: ?ICSmain_title_orig_L0 [40]
0x08B8	0x0000004F ;?ICSmain_title_orig_L0+0
0x08BC	0x00000072 ;?ICSmain_title_orig_L0+4
0x08C0	0x00000069 ;?ICSmain_title_orig_L0+8
0x08C4	0x00000067 ;?ICSmain_title_orig_L0+12
0x08C8	0x00000069 ;?ICSmain_title_orig_L0+16
0x08CC	0x0000006E ;?ICSmain_title_orig_L0+20
0x08D0	0x00000061 ;?ICSmain_title_orig_L0+24
0x08D4	0x0000006C ;?ICSmain_title_orig_L0+28
0x08D8	0x0000003A ;?ICSmain_title_orig_L0+32
0x08DC	0x00000000 ;?ICSmain_title_orig_L0+36
; end of ?ICSmain_title_orig_L0
;p4_serial_comm.c,0 :: ?ICSmain_title_sorted_L0 [32]
0x08E0	0x00000053 ;?ICSmain_title_sorted_L0+0
0x08E4	0x0000006F ;?ICSmain_title_sorted_L0+4
0x08E8	0x00000072 ;?ICSmain_title_sorted_L0+8
0x08EC	0x00000074 ;?ICSmain_title_sorted_L0+12
0x08F0	0x00000065 ;?ICSmain_title_sorted_L0+16
0x08F4	0x00000064 ;?ICSmain_title_sorted_L0+20
0x08F8	0x0000003A ;?ICSmain_title_sorted_L0+24
0x08FC	0x00000000 ;?ICSmain_title_sorted_L0+28
; end of ?ICSmain_title_sorted_L0
;p4_serial_comm.c,0 :: ?ICSmain_title_counter_L0 [52]
0x0900	0x0000004E ;?ICSmain_title_counter_L0+0
0x0904	0x00000075 ;?ICSmain_title_counter_L0+4
0x0908	0x0000006D ;?ICSmain_title_counter_L0+8
0x090C	0x0000002E ;?ICSmain_title_counter_L0+12
0x0910	0x00000020 ;?ICSmain_title_counter_L0+16
0x0914	0x00000053 ;?ICSmain_title_counter_L0+20
0x0918	0x0000006F ;?ICSmain_title_counter_L0+24
0x091C	0x00000072 ;?ICSmain_title_counter_L0+28
0x0920	0x00000074 ;?ICSmain_title_counter_L0+32
0x0924	0x00000065 ;?ICSmain_title_counter_L0+36
0x0928	0x00000064 ;?ICSmain_title_counter_L0+40
0x092C	0x0000003A ;?ICSmain_title_counter_L0+44
0x0930	0x00000000 ;?ICSmain_title_counter_L0+48
; end of ?ICSmain_title_counter_L0
;__Lib_System_105_107.c,388 :: __Lib_System_105_107_APBAHBPrescTable [16]
0x0934	0x00000000 ;__Lib_System_105_107_APBAHBPrescTable+0
0x0938	0x04030201 ;__Lib_System_105_107_APBAHBPrescTable+4
0x093C	0x04030201 ;__Lib_System_105_107_APBAHBPrescTable+8
0x0940	0x09080706 ;__Lib_System_105_107_APBAHBPrescTable+12
; end of __Lib_System_105_107_APBAHBPrescTable
;p4_serial_comm.c,0 :: ?ICS_list_len [4]
0x0944	0x00000000 ;?ICS_list_len+0
; end of ?ICS_list_len
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150     [128]    _write_data_char
0x01D0     [286]    _q_sort
0x02F0     [116]    _write_data
0x0364     [108]    __Lib_System_105_107_SystemClockSetDefault
0x03D0      [70]    _convert_to_ascii
0x0418     [112]    _print_header
0x0488      [58]    ___FillZeros
0x04C4      [20]    ___CC2DW
0x04D8      [40]    _update_led
0x0500      [68]    _read_data
0x0544      [20]    __Lib_System_105_107_InitialSetUpFosc
0x0558       [8]    ___GenExcept
0x0560     [344]    __Lib_System_105_107_InitialSetUpRCCRCC2
0x06B8     [496]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [4]    _list_len
0x20000004       [4]    ___System_CLOCK_IN_KHZ
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x08A8       [1]    ?ICSmain_loop_on_L0
0x08AC       [4]    ?ICSmain_min_pos_L0
0x08B0       [4]    ?ICSmain_pivot_pos_L0
0x08B4       [4]    ?ICSmain_char_counter_L0
0x08B8      [40]    ?ICSmain_title_orig_L0
0x08E0      [32]    ?ICSmain_title_sorted_L0
0x0900      [52]    ?ICSmain_title_counter_L0
0x0934      [16]    __Lib_System_105_107_APBAHBPrescTable
0x0944       [4]    ?ICS_list_len
