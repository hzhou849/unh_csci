;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/6/2022 9:42:46 PM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x06E90000  	1769
0x0008	0x05850000  	1413
0x000C	0x05850000  	1413
0x0010	0x05850000  	1413
0x0014	0x05850000  	1413
0x0018	0x05850000  	1413
0x001C	0x05850000  	1413
0x0020	0x05850000  	1413
0x0024	0x05850000  	1413
0x0028	0x05850000  	1413
0x002C	0x05850000  	1413
0x0030	0x05850000  	1413
0x0034	0x05850000  	1413
0x0038	0x05850000  	1413
0x003C	0x05850000  	1413
0x0040	0x05850000  	1413
0x0044	0x05850000  	1413
0x0048	0x05850000  	1413
0x004C	0x05850000  	1413
0x0050	0x05850000  	1413
0x0054	0x05850000  	1413
0x0058	0x05850000  	1413
0x005C	0x05850000  	1413
0x0060	0x05850000  	1413
0x0064	0x05850000  	1413
0x0068	0x05850000  	1413
0x006C	0x05850000  	1413
0x0070	0x05850000  	1413
0x0074	0x05850000  	1413
0x0078	0x05850000  	1413
0x007C	0x05850000  	1413
0x0080	0x05850000  	1413
0x0084	0x05850000  	1413
0x0088	0x05850000  	1413
0x008C	0x05850000  	1413
0x0090	0x05850000  	1413
0x0094	0x05850000  	1413
0x0098	0x05850000  	1413
0x009C	0x05850000  	1413
0x00A0	0x05850000  	1413
0x00A4	0x05850000  	1413
0x00A8	0x05850000  	1413
0x00AC	0x05850000  	1413
0x00B0	0x05850000  	1413
0x00B4	0x05850000  	1413
0x00B8	0x05850000  	1413
0x00BC	0x05850000  	1413
0x00C0	0x05850000  	1413
0x00C4	0x05850000  	1413
0x00C8	0x05850000  	1413
0x00CC	0x05850000  	1413
0x00D0	0x05850000  	1413
0x00D4	0x05850000  	1413
0x00D8	0x05850000  	1413
0x00DC	0x05850000  	1413
0x00E0	0x05850000  	1413
0x00E4	0x05850000  	1413
0x00E8	0x05850000  	1413
0x00EC	0x05850000  	1413
0x00F0	0x05850000  	1413
0x00F4	0x05850000  	1413
0x00F8	0x05850000  	1413
0x00FC	0x05850000  	1413
0x0100	0x05850000  	1413
0x0104	0x05850000  	1413
0x0108	0x05850000  	1413
0x010C	0x05850000  	1413
0x0110	0x05850000  	1413
0x0114	0x05850000  	1413
0x0118	0x05850000  	1413
0x011C	0x05850000  	1413
0x0120	0x05850000  	1413
0x0124	0x05850000  	1413
0x0128	0x05850000  	1413
0x012C	0x05850000  	1413
0x0130	0x05850000  	1413
0x0134	0x05850000  	1413
0x0138	0x05850000  	1413
0x013C	0x05850000  	1413
0x0140	0x05850000  	1413
0x0144	0x05850000  	1413
0x0148	0x05850000  	1413
0x014C	0x05850000  	1413
; end of ____SysVT
_main:
;p4_serial_comm.c, 260 :: 		void main() {
0x06E8	0xB0E3    SUB	SP, SP, #396
0x06EA	0xF7FFFF4F  BL	1420
0x06EE	0xF000F9AD  BL	2636
0x06F2	0xF7FFFF3D  BL	1392
0x06F6	0xF000F969  BL	2508
;p4_serial_comm.c, 263 :: 		uint8_t loop_on   = TRUE;
0x06FA	0xF10D0BD4  ADD	R11, SP, #212
0x06FE	0xF10B0AB7  ADD	R10, R11, #183
0x0702	0xF8DFC1D8  LDR	R12, [PC, #472]
0x0706	0xF7FFFECB  BL	___CC2DW+0
;p4_serial_comm.c, 264 :: 		int32_t min_pos   = 0;
;p4_serial_comm.c, 265 :: 		int32_t pivot_pos = 0;
;p4_serial_comm.c, 266 :: 		int32_t char_counter = 0;
;p4_serial_comm.c, 269 :: 		uint32_t num_ascii   = 0;
;p4_serial_comm.c, 272 :: 		uint32_t i = 0;
;p4_serial_comm.c, 281 :: 		uint8_t title_divider[]   = "=============================================================";
;p4_serial_comm.c, 282 :: 		uint8_t title_cr_lf[]     = "\x0D\x0A";
;p4_serial_comm.c, 283 :: 		uint8_t title_counter[] = "Num. Sorted: ";
;p4_serial_comm.c, 284 :: 		uint8_t title_orig[] = "Original: ";
;p4_serial_comm.c, 285 :: 		uint8_t title_rev[] = "Reversed: ";
;p4_serial_comm.c, 286 :: 		uint8_t title_sorted[] = "Sorted: ";
;p4_serial_comm.c, 287 :: 		uint8_t title_start[] = "[P4 Project] - Please enter up to 50 chars or '@' to end sequence: ";
;p4_serial_comm.c, 291 :: 		RCC_APB2ENR |= 0x00000001; 	// Alternate function bit AFIOEN bit[0]. USART1 uses AF for PA9/PA10
0x070A	0x4875    LDR	R0, [PC, #468]
0x070C	0x6800    LDR	R0, [R0, #0]
0x070E	0xF0400101  ORR	R1, R0, #1
0x0712	0x4873    LDR	R0, [PC, #460]
0x0714	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 292 :: 		AFIO_MAPR    = 0x00000000; 	// Bit[2] USART1 REMAP 0: No Remap (Tx=PA9; Rx=PA10)
0x0716	0x2100    MOVS	R1, #0
0x0718	0x4872    LDR	R0, [PC, #456]
0x071A	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 294 :: 		RCC_APB2ENR |= 1 << 2;		// Enable GPIO Clock - Port A for USART Pins
0x071C	0x4870    LDR	R0, [PC, #448]
0x071E	0x6800    LDR	R0, [R0, #0]
0x0720	0xF0400104  ORR	R1, R0, #4
0x0724	0x486E    LDR	R0, [PC, #440]
0x0726	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 295 :: 		RCC_APB2ENR |= 1 << 5;		// Enable GPIO Clock - Port D for LEDs
0x0728	0x486D    LDR	R0, [PC, #436]
0x072A	0x6800    LDR	R0, [R0, #0]
0x072C	0xF0400120  ORR	R1, R0, #32
0x0730	0x486B    LDR	R0, [PC, #428]
0x0732	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 296 :: 		RCC_APB2ENR |= 1 << 14; 	// Enable USART1 Clock
0x0734	0x486A    LDR	R0, [PC, #424]
0x0736	0x6800    LDR	R0, [R0, #0]
0x0738	0xF4404180  ORR	R1, R0, #16384
0x073C	0x4868    LDR	R0, [PC, #416]
0x073E	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 298 :: 		GPIOA_CRH &= ~(0xFF << 4);  // Shift 4 bits left to clear bits[9:4] for PA9/PA10 0000 0FF0 -> mask with  FFFF F00F
0x0740	0x4869    LDR	R0, [PC, #420]
0x0742	0x6801    LDR	R1, [R0, #0]
0x0744	0xF24F000F  MOVW	R0, #61455
0x0748	0x4001    ANDS	R1, R0
0x074A	0x4867    LDR	R0, [PC, #412]
0x074C	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 299 :: 		GPIOA_CRH |= (0x0B << 4) ;  // USART1 Tx/PA9 set to CNF=AFoutput push-pull b10; MODE= output-50Hz b11;
0x074E	0x4866    LDR	R0, [PC, #408]
0x0750	0x6800    LDR	R0, [R0, #0]
0x0752	0xF04001B0  ORR	R1, R0, #176
0x0756	0x4864    LDR	R0, [PC, #400]
0x0758	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 300 :: 		GPIOA_CRH |= (0x04 << 8);   // USART1 Rx/PA10 set CNF=Input-floating b01; MODE=Input mode b00;
0x075A	0x4863    LDR	R0, [PC, #396]
0x075C	0x6800    LDR	R0, [R0, #0]
0x075E	0xF4406180  ORR	R1, R0, #1024
0x0762	0x4861    LDR	R0, [PC, #388]
0x0764	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 301 :: 		GPIOD_CRH = GPIO_OUTPUT;
0x0766	0xF04F3133  MOV	R1, #858993459
0x076A	0x4860    LDR	R0, [PC, #384]
0x076C	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 306 :: 		USART1_BRR = 0x00000506;
0x076E	0xF2405106  MOVW	R1, #1286
0x0772	0x485F    LDR	R0, [PC, #380]
0x0774	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 316 :: 		USART1_CR1 &= ~(1<<12);          // Force 8 data bits. M bit is set to 0.
0x0776	0x485F    LDR	R0, [PC, #380]
0x0778	0x6801    LDR	R1, [R0, #0]
0x077A	0xF46F5080  MVN	R0, #4096
0x077E	0x4001    ANDS	R1, R0
0x0780	0x485C    LDR	R0, [PC, #368]
0x0782	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 317 :: 		USART1_CR2 &= ~(3<<12);          // Force 1 stop bit
0x0784	0x485C    LDR	R0, [PC, #368]
0x0786	0x6801    LDR	R1, [R0, #0]
0x0788	0xF46F5040  MVN	R0, #12288
0x078C	0x4001    ANDS	R1, R0
0x078E	0x485A    LDR	R0, [PC, #360]
0x0790	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 318 :: 		USART1_CR3 &= ~(3<<8);           // Force no flow control and no DMA for USART1
0x0792	0x485A    LDR	R0, [PC, #360]
0x0794	0x6801    LDR	R1, [R0, #0]
0x0796	0xF46F7040  MVN	R0, #768
0x079A	0x4001    ANDS	R1, R0
0x079C	0x4857    LDR	R0, [PC, #348]
0x079E	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 319 :: 		USART1_CR1 &= ~(3<<9);           // Force no parity and no parity control
0x07A0	0x4854    LDR	R0, [PC, #336]
0x07A2	0x6801    LDR	R1, [R0, #0]
0x07A4	0xF46F60C0  MVN	R0, #1536
0x07A8	0x4001    ANDS	R1, R0
0x07AA	0x4852    LDR	R0, [PC, #328]
0x07AC	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 320 :: 		USART1_CR1 |= 3<<2;              // RX, TX enable
0x07AE	0x4851    LDR	R0, [PC, #324]
0x07B0	0x6800    LDR	R0, [R0, #0]
0x07B2	0xF040010C  ORR	R1, R0, #12
0x07B6	0x484F    LDR	R0, [PC, #316]
0x07B8	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 323 :: 		Delay_ms(100);					// Allow some time for USART to complete initialization.
0x07BA	0xF644777F  MOVW	R7, #20351
0x07BE	0xF2C00712  MOVT	R7, #18
L_main60:
0x07C2	0x1E7F    SUBS	R7, R7, #1
0x07C4	0xD1FD    BNE	L_main60
0x07C6	0xBF00    NOP
0x07C8	0xBF00    NOP
0x07CA	0xBF00    NOP
0x07CC	0xBF00    NOP
0x07CE	0xBF00    NOP
;p4_serial_comm.c, 324 :: 		USART1_CR1 |= 1 << 13;			//** NOTE USART1 Enable must be done after configuration is complete
0x07D0	0x4848    LDR	R0, [PC, #288]
0x07D2	0x6800    LDR	R0, [R0, #0]
0x07D4	0xF4405100  ORR	R1, R0, #8192
0x07D8	0x4846    LDR	R0, [PC, #280]
0x07DA	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 326 :: 		print_string(&title_cr_lf, NO_NEW_LINE);
0x07DC	0xF50D7091  ADD	R0, SP, #290
0x07E0	0x2100    MOVS	R1, #0
0x07E2	0xF7FFFE7D  BL	_print_string+0
;p4_serial_comm.c, 327 :: 		print_string(&title_divider, NEW_LINE_EN);
0x07E6	0xA839    ADD	R0, SP, #228
0x07E8	0x2101    MOVS	R1, #1
0x07EA	0xF7FFFE79  BL	_print_string+0
;p4_serial_comm.c, 328 :: 		print_string(&title_start, NEW_LINE_EN);
0x07EE	0xF20D1047  ADDW	R0, SP, #327
0x07F2	0x2101    MOVS	R1, #1
0x07F4	0xF7FFFE74  BL	_print_string+0
;p4_serial_comm.c, 331 :: 		for (;;) {
L_main62:
;p4_serial_comm.c, 333 :: 		update_led(LED_RESET);
0x07F8	0xF04F0000  MOV	R0, #0
0x07FC	0xF7FFFE5C  BL	_update_led+0
;p4_serial_comm.c, 337 :: 		while ( (char_counter < MAX_BUFFER_SIZE) && (loop_on == TRUE) ) {
L_main65:
0x0800	0x9838    LDR	R0, [SP, #224]
0x0802	0x2832    CMP	R0, #50
0x0804	0xD234    BCS	L__main86
0x0806	0xF89D00D4  LDRB	R0, [SP, #212]
0x080A	0x2801    CMP	R0, #1
0x080C	0xD130    BNE	L__main85
L__main82:
;p4_serial_comm.c, 338 :: 		read_data( &rx_buffer[char_counter] );
0x080E	0xA903    ADD	R1, SP, #12
0x0810	0x9838    LDR	R0, [SP, #224]
0x0812	0x0080    LSLS	R0, R0, #2
0x0814	0x1808    ADDS	R0, R1, R0
0x0816	0xF7FFFD17  BL	_read_data+0
;p4_serial_comm.c, 340 :: 		if ( rx_buffer[char_counter] == EXIT_CHAR ){
0x081A	0xA903    ADD	R1, SP, #12
0x081C	0x9838    LDR	R0, [SP, #224]
0x081E	0x0080    LSLS	R0, R0, #2
0x0820	0x1808    ADDS	R0, R1, R0
0x0822	0x6800    LDR	R0, [R0, #0]
0x0824	0x2840    CMP	R0, #64
0x0826	0xD103    BNE	L_main69
;p4_serial_comm.c, 341 :: 		loop_on = FALSE;
0x0828	0x2000    MOVS	R0, #0
0x082A	0xF88D00D4  STRB	R0, [SP, #212]
;p4_serial_comm.c, 342 :: 		}
0x082E	0xE01E    B	L_main70
L_main69:
;p4_serial_comm.c, 343 :: 		else if ( (rx_buffer[char_counter]) != 0x0D && (rx_buffer[char_counter] != NULL_BYTE) ) {
0x0830	0xA903    ADD	R1, SP, #12
0x0832	0x9838    LDR	R0, [SP, #224]
0x0834	0x0080    LSLS	R0, R0, #2
0x0836	0x1808    ADDS	R0, R1, R0
0x0838	0x6800    LDR	R0, [R0, #0]
0x083A	0x280D    CMP	R0, #13
0x083C	0xD017    BEQ	L__main84
0x083E	0xA903    ADD	R1, SP, #12
0x0840	0x9838    LDR	R0, [SP, #224]
0x0842	0x0080    LSLS	R0, R0, #2
0x0844	0x1808    ADDS	R0, R1, R0
0x0846	0x6800    LDR	R0, [R0, #0]
0x0848	0xB188    CBZ	R0, L__main83
L__main81:
;p4_serial_comm.c, 344 :: 		++char_counter;
0x084A	0x9838    LDR	R0, [SP, #224]
0x084C	0x1C40    ADDS	R0, R0, #1
0x084E	0x9038    STR	R0, [SP, #224]
;p4_serial_comm.c, 345 :: 		update_led(char_counter);
0x0850	0xF7FFFE32  BL	_update_led+0
;p4_serial_comm.c, 347 :: 		if ( char_counter == MAX_BUFFER_SIZE ) {
0x0854	0x9838    LDR	R0, [SP, #224]
0x0856	0x2832    CMP	R0, #50
0x0858	0xD109    BNE	L_main74
;p4_serial_comm.c, 348 :: 		rx_buffer[char_counter] = EXIT_CHAR;
0x085A	0xA903    ADD	R1, SP, #12
0x085C	0x9838    LDR	R0, [SP, #224]
0x085E	0x0080    LSLS	R0, R0, #2
0x0860	0x1809    ADDS	R1, R1, R0
0x0862	0xF04F0040  MOV	R0, #64
0x0866	0x6008    STR	R0, [R1, #0]
;p4_serial_comm.c, 349 :: 		loop_on = FALSE;
0x0868	0x2000    MOVS	R0, #0
0x086A	0xF88D00D4  STRB	R0, [SP, #212]
;p4_serial_comm.c, 350 :: 		}
L_main74:
;p4_serial_comm.c, 343 :: 		else if ( (rx_buffer[char_counter]) != 0x0D && (rx_buffer[char_counter] != NULL_BYTE) ) {
L__main84:
L__main83:
;p4_serial_comm.c, 351 :: 		}
L_main70:
;p4_serial_comm.c, 352 :: 		}
0x086E	0xE7C7    B	L_main65
;p4_serial_comm.c, 337 :: 		while ( (char_counter < MAX_BUFFER_SIZE) && (loop_on == TRUE) ) {
L__main86:
L__main85:
;p4_serial_comm.c, 354 :: 		list_len = char_counter;
0x0870	0x9938    LDR	R1, [SP, #224]
0x0872	0x4823    LDR	R0, [PC, #140]
0x0874	0x6001    STR	R1, [R0, #0]
;p4_serial_comm.c, 355 :: 		pivot_pos = (char_counter - 1);
0x0876	0x9838    LDR	R0, [SP, #224]
0x0878	0x1E40    SUBS	R0, R0, #1
0x087A	0x9037    STR	R0, [SP, #220]
;p4_serial_comm.c, 358 :: 		print_string(&title_orig, NEW_LINE_EN);
0x087C	0xF20D1033  ADDW	R0, SP, #307
0x0880	0x2101    MOVS	R1, #1
0x0882	0xF7FFFE2D  BL	_print_string+0
;p4_serial_comm.c, 359 :: 		write_data(&rx_buffer);
0x0886	0xA803    ADD	R0, SP, #12
0x0888	0xF7FFFCA2  BL	_write_data+0
;p4_serial_comm.c, 362 :: 		q_sort(&rx_buffer, &pivot_pos, &min_pos);
0x088C	0xAA36    ADD	R2, SP, #216
0x088E	0xA937    ADD	R1, SP, #220
0x0890	0xA803    ADD	R0, SP, #12
0x0892	0xF7FFFD57  BL	_q_sort+0
;p4_serial_comm.c, 365 :: 		print_string(&title_sorted, NEW_LINE_EN);
0x0896	0xF50D709F  ADD	R0, SP, #318
0x089A	0x2101    MOVS	R1, #1
0x089C	0xF7FFFE20  BL	_print_string+0
;p4_serial_comm.c, 366 :: 		write_data(&rx_buffer);
0x08A0	0xA803    ADD	R0, SP, #12
0x08A2	0xF7FFFC95  BL	_write_data+0
;p4_serial_comm.c, 369 :: 		print_string(&title_counter, NO_NEW_LINE);
0x08A6	0xF20D1025  ADDW	R0, SP, #293
0x08AA	0x2100    MOVS	R1, #0
0x08AC	0xF7FFFE18  BL	_print_string+0
;p4_serial_comm.c, 370 :: 		convert_to_ascii(&list_len, &ascii_msb, &ascii_lsb);
0x08B0	0xA901    ADD	R1, SP, #4
0x08B2	0xA802    ADD	R0, SP, #8
0x08B4	0x460A    MOV	R2, R1
0x08B6	0x4601    MOV	R1, R0
0x08B8	0x4811    LDR	R0, [PC, #68]
0x08BA	0xF7FFFD1D  BL	_convert_to_ascii+0
;p4_serial_comm.c, 371 :: 		write_data_char(&ascii_msb, NO_NEW_LINE);
0x08BE	0xA802    ADD	R0, SP, #8
0x08C0	0x2100    MOVS	R1, #0
0x08C2	0xF7FFFC45  BL	_write_data_char+0
;p4_serial_comm.c, 372 :: 		write_data_char(&ascii_lsb, NEW_LINE_EN);
0x08C6	0xA801    ADD	R0, SP, #4
0x08C8	0x2101    MOVS	R1, #1
0x08CA	0xF7FFFC41  BL	_write_data_char+0
;p4_serial_comm.c, 376 :: 		loop_on = TRUE;
0x08CE	0x2001    MOVS	R0, #1
0x08D0	0xF88D00D4  STRB	R0, [SP, #212]
;p4_serial_comm.c, 377 :: 		char_counter = 0;
0x08D4	0x2000    MOVS	R0, #0
0x08D6	0x9038    STR	R0, [SP, #224]
;p4_serial_comm.c, 378 :: 		}
0x08D8	0xE78E    B	L_main62
;p4_serial_comm.c, 379 :: 		}
L_end_main:
L__main_end_loop:
0x08DA	0xE7FE    B	L__main_end_loop
0x08DC	0x09040000  	?ICSmain_loop_on_L0+0
0x08E0	0x10184002  	RCC_APB2ENR+0
0x08E4	0x00044001  	AFIO_MAPR+0
0x08E8	0x08044001  	GPIOA_CRH+0
0x08EC	0x14044001  	GPIOD_CRH+0
0x08F0	0x38084001  	USART1_BRR+0
0x08F4	0x380C4001  	USART1_CR1+0
0x08F8	0x38104001  	USART1_CR2+0
0x08FC	0x38144001  	USART1_CR3+0
0x0900	0x00002000  	_list_len+0
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 28 :: 		
0x04A0	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 30 :: 		
L_loopDW:
;__Lib_System_105_107.c, 31 :: 		
0x04A2	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 32 :: 		
0x04A6	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 33 :: 		
0x04AA	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 34 :: 		
0x04AE	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 36 :: 		
L_end___CC2DW:
0x04B0	0xB001    ADD	SP, SP, #4
0x04B2	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 70 :: 		
0x0464	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 72 :: 		
0x0466	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 73 :: 		
0x046A	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 74 :: 		
0x046E	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 75 :: 		
0x0472	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 76 :: 		
0x0474	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 77 :: 		
0x0478	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 78 :: 		
0x047A	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 79 :: 		
0x047C	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 80 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 81 :: 		
0x047E	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 82 :: 		
0x0482	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 83 :: 		
0x0486	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 84 :: 		
0x0488	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 85 :: 		
0x048C	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 86 :: 		
0x048E	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 87 :: 		
0x0490	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 88 :: 		
0x0494	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 89 :: 		
0x0498	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 90 :: 		
L_norep:
;__Lib_System_105_107.c, 92 :: 		
L_end___FillZeros:
0x049A	0xB001    ADD	SP, SP, #4
0x049C	0x4770    BX	LR
; end of ___FillZeros
_print_string:
;p4_serial_comm.c, 212 :: 		void print_string(uint8_t *arr_string, uint8_t new_line_opt) {
; new_line_opt start address is: 4 (R1)
; arr_string start address is: 0 (R0)
0x04E0	0xB0C1    SUB	SP, SP, #260
0x04E2	0xF8CDE000  STR	LR, [SP, #0]
; new_line_opt end address is: 4 (R1)
; arr_string end address is: 0 (R0)
; arr_string start address is: 0 (R0)
; new_line_opt start address is: 4 (R1)
;p4_serial_comm.c, 213 :: 		uint32_t i = 0;
; i start address is: 36 (R9)
0x04E6	0xF04F0900  MOV	R9, #0
; arr_string end address is: 0 (R0)
; new_line_opt end address is: 4 (R1)
; i end address is: 36 (R9)
0x04EA	0x4680    MOV	R8, R0
0x04EC	0xB2CE    UXTB	R6, R1
;p4_serial_comm.c, 216 :: 		while (arr_string[i] != '\0'){
L_print_string49:
; i start address is: 36 (R9)
; new_line_opt start address is: 24 (R6)
; arr_string start address is: 32 (R8)
0x04EE	0xEB080209  ADD	R2, R8, R9, LSL #0
0x04F2	0x7812    LDRB	R2, [R2, #0]
0x04F4	0xB1B2    CBZ	R2, L_print_string50
;p4_serial_comm.c, 217 :: 		buffer[i] = (buffer[i] & 0x00000000) | arr_string[i];
0x04F6	0xAD01    ADD	R5, SP, #4
0x04F8	0xEA4F0289  LSL	R2, R9, #2
0x04FC	0x18AC    ADDS	R4, R5, R2
0x04FE	0x6822    LDR	R2, [R4, #0]
0x0500	0xF0020300  AND	R3, R2, #0
0x0504	0xEB080209  ADD	R2, R8, R9, LSL #0
0x0508	0x7812    LDRB	R2, [R2, #0]
0x050A	0xEA430202  ORR	R2, R3, R2, LSL #0
0x050E	0x6022    STR	R2, [R4, #0]
;p4_serial_comm.c, 218 :: 		write_data_char(&buffer[i], NO_NEW_LINE);
0x0510	0xEA4F0289  LSL	R2, R9, #2
0x0514	0x18AA    ADDS	R2, R5, R2
0x0516	0x2100    MOVS	R1, #0
0x0518	0x4610    MOV	R0, R2
0x051A	0xF7FFFE19  BL	_write_data_char+0
;p4_serial_comm.c, 219 :: 		i++;
0x051E	0xF1090901  ADD	R9, R9, #1
;p4_serial_comm.c, 220 :: 		}
; arr_string end address is: 32 (R8)
; i end address is: 36 (R9)
0x0522	0xE7E4    B	L_print_string49
L_print_string50:
;p4_serial_comm.c, 223 :: 		if (new_line_opt == NEW_LINE_EN) {
0x0524	0x2E01    CMP	R6, #1
0x0526	0xD11D    BNE	L_print_string51
; new_line_opt end address is: 24 (R6)
;p4_serial_comm.c, 224 :: 		Delay_ms(10);
0x0528	0xF24D47BF  MOVW	R7, #54463
0x052C	0xF2C00701  MOVT	R7, #1
L_print_string52:
0x0530	0x1E7F    SUBS	R7, R7, #1
0x0532	0xD1FD    BNE	L_print_string52
0x0534	0xBF00    NOP
0x0536	0xBF00    NOP
0x0538	0xBF00    NOP
0x053A	0xBF00    NOP
0x053C	0xBF00    NOP
;p4_serial_comm.c, 225 :: 		USART1_DR = CHAR_CR;
0x053E	0xF04F030D  MOV	R3, #13
0x0542	0x4A0A    LDR	R2, [PC, #40]
0x0544	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 226 :: 		Delay_ms(10);
0x0546	0xF24D47BF  MOVW	R7, #54463
0x054A	0xF2C00701  MOVT	R7, #1
0x054E	0xBF00    NOP
0x0550	0xBF00    NOP
L_print_string54:
0x0552	0x1E7F    SUBS	R7, R7, #1
0x0554	0xD1FD    BNE	L_print_string54
0x0556	0xBF00    NOP
0x0558	0xBF00    NOP
0x055A	0xBF00    NOP
;p4_serial_comm.c, 227 :: 		USART1_DR = CHAR_LF;
0x055C	0xF04F030A  MOV	R3, #10
0x0560	0x4A02    LDR	R2, [PC, #8]
0x0562	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 228 :: 		}
L_print_string51:
;p4_serial_comm.c, 229 :: 		}
L_end_print_string:
0x0564	0xF8DDE000  LDR	LR, [SP, #0]
0x0568	0xB041    ADD	SP, SP, #260
0x056A	0x4770    BX	LR
0x056C	0x38044001  	USART1_DR+0
; end of _print_string
_write_data_char:
;p4_serial_comm.c, 72 :: 		void write_data_char(uint32_t *tx_char, uint8_t new_line) {
; new_line start address is: 4 (R1)
; tx_char start address is: 0 (R0)
0x0150	0xB081    SUB	SP, SP, #4
; new_line end address is: 4 (R1)
; tx_char end address is: 0 (R0)
; tx_char start address is: 0 (R0)
; new_line start address is: 4 (R1)
0x0152	0xF88D1000  STRB	R1, [SP, #0]
; tx_char end address is: 0 (R0)
; new_line end address is: 4 (R1)
0x0156	0x4601    MOV	R1, R0
0x0158	0xF89D0000  LDRB	R0, [SP, #0]
;p4_serial_comm.c, 76 :: 		while ( (USART1_SR & (1 << 7)) == 0) {}
L_write_data_char6:
; new_line start address is: 0 (R0)
; tx_char start address is: 4 (R1)
0x015C	0x4A1A    LDR	R2, [PC, #104]
0x015E	0x6812    LDR	R2, [R2, #0]
0x0160	0xF0020280  AND	R2, R2, #128
0x0164	0xB902    CBNZ	R2, L_write_data_char7
0x0166	0xE7F9    B	L_write_data_char6
L_write_data_char7:
;p4_serial_comm.c, 79 :: 		Delay_ms(10);
0x0168	0xF24D47BF  MOVW	R7, #54463
0x016C	0xF2C00701  MOVT	R7, #1
L_write_data_char8:
0x0170	0x1E7F    SUBS	R7, R7, #1
0x0172	0xD1FD    BNE	L_write_data_char8
0x0174	0xBF00    NOP
0x0176	0xBF00    NOP
0x0178	0xBF00    NOP
0x017A	0xBF00    NOP
0x017C	0xBF00    NOP
;p4_serial_comm.c, 80 :: 		USART1_DR = *tx_char;
0x017E	0x680B    LDR	R3, [R1, #0]
; tx_char end address is: 4 (R1)
0x0180	0x4A12    LDR	R2, [PC, #72]
0x0182	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 83 :: 		if (new_line == 1) {
0x0184	0x2801    CMP	R0, #1
0x0186	0xD11D    BNE	L_write_data_char10
; new_line end address is: 0 (R0)
;p4_serial_comm.c, 84 :: 		Delay_ms(10);
0x0188	0xF24D47BF  MOVW	R7, #54463
0x018C	0xF2C00701  MOVT	R7, #1
L_write_data_char11:
0x0190	0x1E7F    SUBS	R7, R7, #1
0x0192	0xD1FD    BNE	L_write_data_char11
0x0194	0xBF00    NOP
0x0196	0xBF00    NOP
0x0198	0xBF00    NOP
0x019A	0xBF00    NOP
0x019C	0xBF00    NOP
;p4_serial_comm.c, 85 :: 		USART1_DR = CHAR_CR;
0x019E	0xF04F030D  MOV	R3, #13
0x01A2	0x4A0A    LDR	R2, [PC, #40]
0x01A4	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 86 :: 		Delay_ms(10);
0x01A6	0xF24D47BF  MOVW	R7, #54463
0x01AA	0xF2C00701  MOVT	R7, #1
0x01AE	0xBF00    NOP
0x01B0	0xBF00    NOP
L_write_data_char13:
0x01B2	0x1E7F    SUBS	R7, R7, #1
0x01B4	0xD1FD    BNE	L_write_data_char13
0x01B6	0xBF00    NOP
0x01B8	0xBF00    NOP
0x01BA	0xBF00    NOP
;p4_serial_comm.c, 87 :: 		USART1_DR = CHAR_LF;
0x01BC	0xF04F030A  MOV	R3, #10
0x01C0	0x4A02    LDR	R2, [PC, #8]
0x01C2	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 88 :: 		}
L_write_data_char10:
;p4_serial_comm.c, 89 :: 		}
L_end_write_data_char:
0x01C4	0xB001    ADD	SP, SP, #4
0x01C6	0x4770    BX	LR
0x01C8	0x38004001  	USART1_SR+0
0x01CC	0x38044001  	USART1_DR+0
; end of _write_data_char
_update_led:
;p4_serial_comm.c, 109 :: 		void update_led(uint32_t counter) {
; counter start address is: 0 (R0)
0x04B8	0xB081    SUB	SP, SP, #4
; counter end address is: 0 (R0)
; counter start address is: 0 (R0)
;p4_serial_comm.c, 110 :: 		GPIOD_ODR = (counter << 8);
0x04BA	0x0202    LSLS	R2, R0, #8
; counter end address is: 0 (R0)
0x04BC	0x4907    LDR	R1, [PC, #28]
0x04BE	0x600A    STR	R2, [R1, #0]
;p4_serial_comm.c, 111 :: 		Delay_ms(100);
0x04C0	0xF644777F  MOVW	R7, #20351
0x04C4	0xF2C00712  MOVT	R7, #18
L_update_led23:
0x04C8	0x1E7F    SUBS	R7, R7, #1
0x04CA	0xD1FD    BNE	L_update_led23
0x04CC	0xBF00    NOP
0x04CE	0xBF00    NOP
0x04D0	0xBF00    NOP
0x04D2	0xBF00    NOP
0x04D4	0xBF00    NOP
;p4_serial_comm.c, 112 :: 		}
L_end_update_led:
0x04D6	0xB001    ADD	SP, SP, #4
0x04D8	0x4770    BX	LR
0x04DA	0xBF00    NOP
0x04DC	0x140C4001  	GPIOD_ODR+0
; end of _update_led
_read_data:
;p4_serial_comm.c, 55 :: 		void read_data(uint32_t *rx_buffer) {
; rx_buffer start address is: 0 (R0)
0x0248	0xB081    SUB	SP, SP, #4
; rx_buffer end address is: 0 (R0)
; rx_buffer start address is: 0 (R0)
; rx_buffer end address is: 0 (R0)
;p4_serial_comm.c, 59 :: 		while( (USART1_SR & (1 << 5)) == 0 ) {}		// Positive logic
L_read_data0:
; rx_buffer start address is: 0 (R0)
0x024A	0x490E    LDR	R1, [PC, #56]
0x024C	0x6809    LDR	R1, [R1, #0]
0x024E	0xF0010120  AND	R1, R1, #32
0x0252	0xB901    CBNZ	R1, L_read_data1
0x0254	0xE7F9    B	L_read_data0
L_read_data1:
;p4_serial_comm.c, 62 :: 		*rx_buffer = USART1_DR;
0x0256	0x490C    LDR	R1, [PC, #48]
0x0258	0x6809    LDR	R1, [R1, #0]
0x025A	0x6001    STR	R1, [R0, #0]
; rx_buffer end address is: 0 (R0)
;p4_serial_comm.c, 67 :: 		while ( (USART1_SR & (1 << 7)) == 0) {}
L_read_data2:
0x025C	0x4909    LDR	R1, [PC, #36]
0x025E	0x6809    LDR	R1, [R1, #0]
0x0260	0xF0010180  AND	R1, R1, #128
0x0264	0xB901    CBNZ	R1, L_read_data3
0x0266	0xE7F9    B	L_read_data2
L_read_data3:
;p4_serial_comm.c, 68 :: 		Delay_ms(10);
0x0268	0xF24D47BF  MOVW	R7, #54463
0x026C	0xF2C00701  MOVT	R7, #1
L_read_data4:
0x0270	0x1E7F    SUBS	R7, R7, #1
0x0272	0xD1FD    BNE	L_read_data4
0x0274	0xBF00    NOP
0x0276	0xBF00    NOP
0x0278	0xBF00    NOP
0x027A	0xBF00    NOP
0x027C	0xBF00    NOP
;p4_serial_comm.c, 69 :: 		}
L_end_read_data:
0x027E	0xB001    ADD	SP, SP, #4
0x0280	0x4770    BX	LR
0x0282	0xBF00    NOP
0x0284	0x38004001  	USART1_SR+0
0x0288	0x38044001  	USART1_DR+0
; end of _read_data
_write_data:
;p4_serial_comm.c, 92 :: 		void write_data(uint32_t *arr_buffer) {
; arr_buffer start address is: 0 (R0)
0x01D0	0xB081    SUB	SP, SP, #4
0x01D2	0xF8CDE000  STR	LR, [SP, #0]
0x01D6	0x4601    MOV	R1, R0
; arr_buffer end address is: 0 (R0)
; arr_buffer start address is: 4 (R1)
;p4_serial_comm.c, 93 :: 		uint32_t i = 0;
; i start address is: 0 (R0)
0x01D8	0xF04F0000  MOV	R0, #0
; arr_buffer end address is: 4 (R1)
; i end address is: 0 (R0)
0x01DC	0x460C    MOV	R4, R1
0x01DE	0x4605    MOV	R5, R0
;p4_serial_comm.c, 95 :: 		while ( (arr_buffer[i] != EXIT_CHAR) && (i < MAX_BUFFER_SIZE) ) {
L_write_data15:
; i start address is: 20 (R5)
; arr_buffer start address is: 16 (R4)
0x01E0	0x00A9    LSLS	R1, R5, #2
0x01E2	0x1861    ADDS	R1, R4, R1
0x01E4	0x6809    LDR	R1, [R1, #0]
0x01E6	0x2940    CMP	R1, #64
0x01E8	0xD009    BEQ	L__write_data77
0x01EA	0x2D32    CMP	R5, #50
0x01EC	0xD207    BCS	L__write_data76
L__write_data75:
;p4_serial_comm.c, 96 :: 		write_data_char(&arr_buffer[i], NEW_LINE_EN);
0x01EE	0x00A9    LSLS	R1, R5, #2
0x01F0	0x1861    ADDS	R1, R4, R1
0x01F2	0x4608    MOV	R0, R1
0x01F4	0x2101    MOVS	R1, #1
0x01F6	0xF7FFFFAB  BL	_write_data_char+0
;p4_serial_comm.c, 97 :: 		++i;
0x01FA	0x1C6D    ADDS	R5, R5, #1
;p4_serial_comm.c, 98 :: 		}
; arr_buffer end address is: 16 (R4)
; i end address is: 20 (R5)
0x01FC	0xE7F0    B	L_write_data15
;p4_serial_comm.c, 95 :: 		while ( (arr_buffer[i] != EXIT_CHAR) && (i < MAX_BUFFER_SIZE) ) {
L__write_data77:
L__write_data76:
;p4_serial_comm.c, 101 :: 		Delay_ms(10);
0x01FE	0xF24D47BF  MOVW	R7, #54463
0x0202	0xF2C00701  MOVT	R7, #1
0x0206	0xBF00    NOP
0x0208	0xBF00    NOP
L_write_data19:
0x020A	0x1E7F    SUBS	R7, R7, #1
0x020C	0xD1FD    BNE	L_write_data19
0x020E	0xBF00    NOP
0x0210	0xBF00    NOP
0x0212	0xBF00    NOP
;p4_serial_comm.c, 102 :: 		USART1_DR = CHAR_CR;
0x0214	0xF04F020D  MOV	R2, #13
0x0218	0x490A    LDR	R1, [PC, #40]
0x021A	0x600A    STR	R2, [R1, #0]
;p4_serial_comm.c, 103 :: 		Delay_ms(10);
0x021C	0xF24D47BF  MOVW	R7, #54463
0x0220	0xF2C00701  MOVT	R7, #1
0x0224	0xBF00    NOP
0x0226	0xBF00    NOP
L_write_data21:
0x0228	0x1E7F    SUBS	R7, R7, #1
0x022A	0xD1FD    BNE	L_write_data21
0x022C	0xBF00    NOP
0x022E	0xBF00    NOP
0x0230	0xBF00    NOP
;p4_serial_comm.c, 104 :: 		USART1_DR = CHAR_LF;
0x0232	0xF04F020A  MOV	R2, #10
0x0236	0x4903    LDR	R1, [PC, #12]
0x0238	0x600A    STR	R2, [R1, #0]
;p4_serial_comm.c, 105 :: 		}
L_end_write_data:
0x023A	0xF8DDE000  LDR	LR, [SP, #0]
0x023E	0xB001    ADD	SP, SP, #4
0x0240	0x4770    BX	LR
0x0242	0xBF00    NOP
0x0244	0x38044001  	USART1_DR+0
; end of _write_data
_q_sort:
;p4_serial_comm.c, 126 :: 		int q_sort(uint32_t *arr_list, int32_t *pivot_pos, uint32_t *min_pos) {
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
0x0344	0xB082    SUB	SP, SP, #8
0x0346	0xF8CDE000  STR	LR, [SP, #0]
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
; arr_list start address is: 0 (R0)
; pivot_pos start address is: 4 (R1)
; min_pos start address is: 8 (R2)
;p4_serial_comm.c, 128 :: 		uint32_t left_cur = 0;
; left_cur start address is: 32 (R8)
0x034A	0xF04F0800  MOV	R8, #0
;p4_serial_comm.c, 129 :: 		int32_t right_cur = (*pivot_pos-1);
0x034E	0x680B    LDR	R3, [R1, #0]
0x0350	0x1E5B    SUBS	R3, R3, #1
; right_cur start address is: 12 (R3)
;p4_serial_comm.c, 130 :: 		int32_t left_found = 0;
; left_found start address is: 28 (R7)
0x0352	0xF04F0700  MOV	R7, #0
;p4_serial_comm.c, 131 :: 		uint32_t right_found = 0;
; right_found start address is: 16 (R4)
0x0356	0xF04F0400  MOV	R4, #0
;p4_serial_comm.c, 132 :: 		uint32_t temp_val = 0;
0x035A	0x4606    MOV	R6, R0
; right_cur end address is: 12 (R3)
; right_found end address is: 16 (R4)
; left_cur end address is: 32 (R8)
; left_found end address is: 28 (R7)
; arr_list end address is: 0 (R0)
; pivot_pos end address is: 4 (R1)
; min_pos end address is: 8 (R2)
0x035C	0x4620    MOV	R0, R4
0x035E	0x460D    MOV	R5, R1
0x0360	0x4619    MOV	R1, R3
;p4_serial_comm.c, 135 :: 		while (left_found == 0) {
L_q_sort29:
; right_found start address is: 0 (R0)
; left_found start address is: 28 (R7)
; right_cur start address is: 4 (R1)
; left_cur start address is: 32 (R8)
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 20 (R5)
; arr_list start address is: 24 (R6)
0x0362	0xBB17    CBNZ	R7, L_q_sort30
;p4_serial_comm.c, 137 :: 		if (left_cur == *pivot_pos) {
0x0364	0x682B    LDR	R3, [R5, #0]
0x0366	0x4598    CMP	R8, R3
0x0368	0xD10D    BNE	L_q_sort31
; right_found end address is: 0 (R0)
; right_cur end address is: 4 (R1)
; left_cur end address is: 32 (R8)
; left_found end address is: 28 (R7)
;p4_serial_comm.c, 141 :: 		--(*pivot_pos);
0x036A	0x682B    LDR	R3, [R5, #0]
0x036C	0x1E5B    SUBS	R3, R3, #1
0x036E	0x602B    STR	R3, [R5, #0]
;p4_serial_comm.c, 144 :: 		if ( (*pivot_pos) <= 0) {
0x0370	0x682B    LDR	R3, [R5, #0]
0x0372	0x2B00    CMP	R3, #0
0x0374	0xDC02    BGT	L_q_sort32
; pivot_pos end address is: 20 (R5)
; arr_list end address is: 24 (R6)
; min_pos end address is: 8 (R2)
;p4_serial_comm.c, 145 :: 		return 0;
0x0376	0x2000    MOVS	R0, #0
0x0378	0xB200    SXTH	R0, R0
0x037A	0xE06E    B	L_end_q_sort
;p4_serial_comm.c, 146 :: 		}
L_q_sort32:
;p4_serial_comm.c, 149 :: 		return q_sort(arr_list, pivot_pos, min_pos);
; min_pos start address is: 8 (R2)
; arr_list start address is: 24 (R6)
; pivot_pos start address is: 20 (R5)
; min_pos end address is: 8 (R2)
0x037C	0x4629    MOV	R1, R5
; pivot_pos end address is: 20 (R5)
0x037E	0x4630    MOV	R0, R6
; arr_list end address is: 24 (R6)
0x0380	0xF7FFFFE0  BL	_q_sort+0
0x0384	0xE069    B	L_end_q_sort
;p4_serial_comm.c, 151 :: 		}
L_q_sort31:
;p4_serial_comm.c, 153 :: 		else if ( (arr_list[left_cur]) < (arr_list[*pivot_pos]) ) {
; min_pos start address is: 8 (R2)
; left_found start address is: 28 (R7)
; left_cur start address is: 32 (R8)
; arr_list start address is: 24 (R6)
; pivot_pos start address is: 20 (R5)
; right_cur start address is: 4 (R1)
; right_found start address is: 0 (R0)
0x0386	0xEA4F0388  LSL	R3, R8, #2
0x038A	0x18F3    ADDS	R3, R6, R3
0x038C	0x681C    LDR	R4, [R3, #0]
0x038E	0x682B    LDR	R3, [R5, #0]
0x0390	0x009B    LSLS	R3, R3, #2
0x0392	0x18F3    ADDS	R3, R6, R3
0x0394	0x681B    LDR	R3, [R3, #0]
0x0396	0x429C    CMP	R4, R3
0x0398	0xD202    BCS	L_q_sort35
; left_found end address is: 28 (R7)
;p4_serial_comm.c, 154 :: 		left_found = 1;
; left_found start address is: 12 (R3)
0x039A	0x2301    MOVS	R3, #1
;p4_serial_comm.c, 155 :: 		}
0x039C	0x461F    MOV	R7, R3
; left_found end address is: 12 (R3)
0x039E	0xE003    B	L_q_sort36
L_q_sort35:
;p4_serial_comm.c, 157 :: 		++left_cur;
; left_found start address is: 28 (R7)
0x03A0	0xF1080301  ADD	R3, R8, #1
; left_cur end address is: 32 (R8)
; left_cur start address is: 16 (R4)
0x03A4	0x461C    MOV	R4, R3
; left_cur end address is: 16 (R4)
; left_found end address is: 28 (R7)
0x03A6	0x46A0    MOV	R8, R4
;p4_serial_comm.c, 158 :: 		}
L_q_sort36:
;p4_serial_comm.c, 159 :: 		}
; left_cur start address is: 32 (R8)
; left_found start address is: 28 (R7)
; left_found end address is: 28 (R7)
0x03A8	0xE7DB    B	L_q_sort29
L_q_sort30:
;p4_serial_comm.c, 162 :: 		while (right_found == 0) {
0x03AA	0x9601    STR	R6, [SP, #4]
; right_cur end address is: 4 (R1)
; pivot_pos end address is: 20 (R5)
; arr_list end address is: 24 (R6)
; left_cur end address is: 32 (R8)
; min_pos end address is: 8 (R2)
0x03AC	0x4646    MOV	R6, R8
0x03AE	0x4680    MOV	R8, R0
0x03B0	0x460F    MOV	R7, R1
0x03B2	0x4629    MOV	R1, R5
0x03B4	0x9801    LDR	R0, [SP, #4]
L_q_sort37:
; right_found end address is: 0 (R0)
; arr_list start address is: 0 (R0)
; pivot_pos start address is: 4 (R1)
; min_pos start address is: 8 (R2)
; left_cur start address is: 24 (R6)
; right_cur start address is: 28 (R7)
; right_found start address is: 32 (R8)
0x03B6	0xF1B80F00  CMP	R8, #0
0x03BA	0xD12B    BNE	L_q_sort38
;p4_serial_comm.c, 164 :: 		if ( (right_cur == *min_pos) && (arr_list[right_cur]) <= (arr_list[*pivot_pos]) ) {
0x03BC	0x6813    LDR	R3, [R2, #0]
0x03BE	0x429F    CMP	R7, R3
0x03C0	0xD118    BNE	L__q_sort80
0x03C2	0x00BB    LSLS	R3, R7, #2
0x03C4	0x18C5    ADDS	R5, R0, R3
0x03C6	0x680B    LDR	R3, [R1, #0]
0x03C8	0x009B    LSLS	R3, R3, #2
0x03CA	0x18C3    ADDS	R3, R0, R3
0x03CC	0x681C    LDR	R4, [R3, #0]
0x03CE	0x682B    LDR	R3, [R5, #0]
0x03D0	0x42A3    CMP	R3, R4
0x03D2	0xD80F    BHI	L__q_sort79
; right_cur end address is: 28 (R7)
; right_found end address is: 32 (R8)
L__q_sort78:
;p4_serial_comm.c, 169 :: 		temp_val = arr_list[left_cur];
0x03D4	0x00B3    LSLS	R3, R6, #2
0x03D6	0x18C4    ADDS	R4, R0, R3
0x03D8	0x6825    LDR	R5, [R4, #0]
; temp_val start address is: 20 (R5)
;p4_serial_comm.c, 170 :: 		arr_list[left_cur] = arr_list[*pivot_pos];
0x03DA	0x680B    LDR	R3, [R1, #0]
0x03DC	0x009B    LSLS	R3, R3, #2
0x03DE	0x18C3    ADDS	R3, R0, R3
0x03E0	0x681B    LDR	R3, [R3, #0]
0x03E2	0x6023    STR	R3, [R4, #0]
;p4_serial_comm.c, 171 :: 		arr_list[*pivot_pos] = temp_val;
0x03E4	0x680B    LDR	R3, [R1, #0]
0x03E6	0x009B    LSLS	R3, R3, #2
0x03E8	0x18C3    ADDS	R3, R0, R3
0x03EA	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;p4_serial_comm.c, 174 :: 		*min_pos = left_cur;
0x03EC	0x6016    STR	R6, [R2, #0]
; left_cur end address is: 24 (R6)
;p4_serial_comm.c, 176 :: 		return q_sort( arr_list, pivot_pos, min_pos );
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
0x03EE	0xF7FFFFA9  BL	_q_sort+0
0x03F2	0xE032    B	L_end_q_sort
;p4_serial_comm.c, 164 :: 		if ( (right_cur == *min_pos) && (arr_list[right_cur]) <= (arr_list[*pivot_pos]) ) {
L__q_sort80:
; right_found start address is: 32 (R8)
; right_cur start address is: 28 (R7)
; left_cur start address is: 24 (R6)
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
L__q_sort79:
;p4_serial_comm.c, 178 :: 		else if ( (arr_list[right_cur]) >= (arr_list[*pivot_pos]) ) {
0x03F4	0x00BB    LSLS	R3, R7, #2
0x03F6	0x18C3    ADDS	R3, R0, R3
0x03F8	0x681C    LDR	R4, [R3, #0]
0x03FA	0x680B    LDR	R3, [R1, #0]
0x03FC	0x009B    LSLS	R3, R3, #2
0x03FE	0x18C3    ADDS	R3, R0, R3
0x0400	0x681B    LDR	R3, [R3, #0]
0x0402	0x429C    CMP	R4, R3
0x0404	0xD302    BCC	L_q_sort43
; right_found end address is: 32 (R8)
;p4_serial_comm.c, 179 :: 		right_found =1;
; right_found start address is: 12 (R3)
0x0406	0x2301    MOVS	R3, #1
;p4_serial_comm.c, 180 :: 		}
0x0408	0x4698    MOV	R8, R3
; right_found end address is: 12 (R3)
0x040A	0xE002    B	L_q_sort44
L_q_sort43:
;p4_serial_comm.c, 182 :: 		--right_cur;
; right_found start address is: 32 (R8)
0x040C	0x1E7B    SUBS	R3, R7, #1
; right_cur end address is: 28 (R7)
; right_cur start address is: 16 (R4)
0x040E	0x461C    MOV	R4, R3
; right_cur end address is: 16 (R4)
; right_found end address is: 32 (R8)
0x0410	0x4627    MOV	R7, R4
;p4_serial_comm.c, 183 :: 		}
L_q_sort44:
;p4_serial_comm.c, 184 :: 		}
; right_cur start address is: 28 (R7)
; right_found start address is: 32 (R8)
; right_found end address is: 32 (R8)
0x0412	0xE7D0    B	L_q_sort37
L_q_sort38:
;p4_serial_comm.c, 188 :: 		if (right_cur > left_cur) {
0x0414	0x42B7    CMP	R7, R6
0x0416	0xD90E    BLS	L_q_sort45
; right_cur end address is: 28 (R7)
;p4_serial_comm.c, 189 :: 		temp_val = arr_list[left_cur];
0x0418	0x00B3    LSLS	R3, R6, #2
; left_cur end address is: 24 (R6)
0x041A	0x18C4    ADDS	R4, R0, R3
0x041C	0x6825    LDR	R5, [R4, #0]
; temp_val start address is: 20 (R5)
;p4_serial_comm.c, 190 :: 		arr_list[left_cur] = arr_list[*pivot_pos];
0x041E	0x680B    LDR	R3, [R1, #0]
0x0420	0x009B    LSLS	R3, R3, #2
0x0422	0x18C3    ADDS	R3, R0, R3
0x0424	0x681B    LDR	R3, [R3, #0]
0x0426	0x6023    STR	R3, [R4, #0]
;p4_serial_comm.c, 191 :: 		arr_list[*pivot_pos] = temp_val;
0x0428	0x680B    LDR	R3, [R1, #0]
0x042A	0x009B    LSLS	R3, R3, #2
0x042C	0x18C3    ADDS	R3, R0, R3
0x042E	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;p4_serial_comm.c, 192 :: 		*min_pos = 0;
0x0430	0x2300    MOVS	R3, #0
0x0432	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 193 :: 		}
0x0434	0xE00A    B	L_q_sort46
L_q_sort45:
;p4_serial_comm.c, 196 :: 		temp_val = arr_list[left_cur];
; right_cur start address is: 28 (R7)
; left_cur start address is: 24 (R6)
0x0436	0x00B3    LSLS	R3, R6, #2
; left_cur end address is: 24 (R6)
0x0438	0x18C4    ADDS	R4, R0, R3
0x043A	0x6823    LDR	R3, [R4, #0]
; temp_val start address is: 20 (R5)
0x043C	0x461D    MOV	R5, R3
;p4_serial_comm.c, 197 :: 		arr_list[left_cur] = arr_list[right_cur];
0x043E	0x00BB    LSLS	R3, R7, #2
0x0440	0x18C3    ADDS	R3, R0, R3
0x0442	0x681B    LDR	R3, [R3, #0]
0x0444	0x6023    STR	R3, [R4, #0]
;p4_serial_comm.c, 198 :: 		arr_list[right_cur] = temp_val;
0x0446	0x00BB    LSLS	R3, R7, #2
; right_cur end address is: 28 (R7)
0x0448	0x18C3    ADDS	R3, R0, R3
0x044A	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;p4_serial_comm.c, 199 :: 		}
L_q_sort46:
;p4_serial_comm.c, 201 :: 		if (*pivot_pos == 0) {
0x044C	0x680B    LDR	R3, [R1, #0]
0x044E	0xB913    CBNZ	R3, L_q_sort47
; arr_list end address is: 0 (R0)
; pivot_pos end address is: 4 (R1)
; min_pos end address is: 8 (R2)
;p4_serial_comm.c, 202 :: 		return 0;
0x0450	0x2000    MOVS	R0, #0
0x0452	0xB200    SXTH	R0, R0
0x0454	0xE001    B	L_end_q_sort
;p4_serial_comm.c, 203 :: 		}
L_q_sort47:
;p4_serial_comm.c, 205 :: 		return q_sort(arr_list, pivot_pos, min_pos);
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
0x0456	0xF7FFFF75  BL	_q_sort+0
;p4_serial_comm.c, 207 :: 		}
L_end_q_sort:
0x045A	0xF8DDE000  LDR	LR, [SP, #0]
0x045E	0xB002    ADD	SP, SP, #8
0x0460	0x4770    BX	LR
; end of _q_sort
_convert_to_ascii:
;p4_serial_comm.c, 232 :: 		void convert_to_ascii(int32_t *input_dec, uint32_t *ascii_msb, uint32_t *ascii_lsb) {
; ascii_lsb start address is: 8 (R2)
; ascii_msb start address is: 4 (R1)
; input_dec start address is: 0 (R0)
0x02F8	0xB081    SUB	SP, SP, #4
0x02FA	0x9100    STR	R1, [SP, #0]
0x02FC	0x4601    MOV	R1, R0
0x02FE	0x9800    LDR	R0, [SP, #0]
; ascii_lsb end address is: 8 (R2)
; ascii_msb end address is: 4 (R1)
; input_dec end address is: 0 (R0)
; input_dec start address is: 4 (R1)
; ascii_msb start address is: 0 (R0)
; ascii_lsb start address is: 8 (R2)
;p4_serial_comm.c, 234 :: 		uint32_t temp_val = 0;
;p4_serial_comm.c, 235 :: 		*ascii_msb = 0;
0x0300	0x2300    MOVS	R3, #0
0x0302	0x6003    STR	R3, [R0, #0]
;p4_serial_comm.c, 236 :: 		*ascii_lsb = 0;
0x0304	0x2300    MOVS	R3, #0
0x0306	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 239 :: 		if (*input_dec > MAX_BUFFER_SIZE ) {
0x0308	0x680B    LDR	R3, [R1, #0]
0x030A	0x2B32    CMP	R3, #50
0x030C	0xD900    BLS	L_convert_to_ascii56
; ascii_msb end address is: 0 (R0)
; ascii_lsb end address is: 8 (R2)
; input_dec end address is: 4 (R1)
;p4_serial_comm.c, 240 :: 		return;
0x030E	0xE017    B	L_end_convert_to_ascii
;p4_serial_comm.c, 241 :: 		}
L_convert_to_ascii56:
;p4_serial_comm.c, 244 :: 		temp_val = *input_dec;
; input_dec start address is: 4 (R1)
; ascii_lsb start address is: 8 (R2)
; ascii_msb start address is: 0 (R0)
0x0310	0x680C    LDR	R4, [R1, #0]
; temp_val start address is: 16 (R4)
; ascii_msb end address is: 0 (R0)
; ascii_lsb end address is: 8 (R2)
; input_dec end address is: 4 (R1)
; temp_val end address is: 16 (R4)
0x0312	0x9200    STR	R2, [SP, #0]
0x0314	0x4602    MOV	R2, R0
0x0316	0x9800    LDR	R0, [SP, #0]
;p4_serial_comm.c, 245 :: 		while (temp_val >=10) {
L_convert_to_ascii57:
; temp_val start address is: 16 (R4)
; ascii_msb start address is: 8 (R2)
; ascii_lsb start address is: 0 (R0)
; ascii_msb start address is: 8 (R2)
; ascii_msb end address is: 8 (R2)
; input_dec start address is: 4 (R1)
0x0318	0x2C0A    CMP	R4, #10
0x031A	0xD306    BCC	L_convert_to_ascii58
; ascii_msb end address is: 8 (R2)
;p4_serial_comm.c, 246 :: 		temp_val /= 10;
; ascii_msb start address is: 8 (R2)
0x031C	0x230A    MOVS	R3, #10
0x031E	0xFBB4F3F3  UDIV	R3, R4, R3
0x0322	0x461C    MOV	R4, R3
;p4_serial_comm.c, 247 :: 		*ascii_msb = temp_val + ASCII_HEX_0;
0x0324	0x3330    ADDS	R3, #48
0x0326	0x6013    STR	R3, [R2, #0]
;p4_serial_comm.c, 248 :: 		}
; ascii_msb end address is: 8 (R2)
; temp_val end address is: 16 (R4)
0x0328	0xE7F6    B	L_convert_to_ascii57
L_convert_to_ascii58:
;p4_serial_comm.c, 251 :: 		if (*input_dec > 0 ) {
0x032A	0x680B    LDR	R3, [R1, #0]
0x032C	0x2B00    CMP	R3, #0
0x032E	0xDD07    BLE	L_convert_to_ascii59
;p4_serial_comm.c, 252 :: 		temp_val = (*input_dec % 10);
0x0330	0x680D    LDR	R5, [R1, #0]
; input_dec end address is: 4 (R1)
0x0332	0x240A    MOVS	R4, #10
0x0334	0xFB95F3F4  SDIV	R3, R5, R4
0x0338	0xFB045313  MLS	R3, R4, R3, R5
;p4_serial_comm.c, 253 :: 		*ascii_lsb = temp_val + ASCII_HEX_0;
0x033C	0x3330    ADDS	R3, #48
0x033E	0x6003    STR	R3, [R0, #0]
; ascii_lsb end address is: 0 (R0)
;p4_serial_comm.c, 254 :: 		}
L_convert_to_ascii59:
;p4_serial_comm.c, 255 :: 		}
L_end_convert_to_ascii:
0x0340	0xB001    ADD	SP, SP, #4
0x0342	0x4770    BX	LR
; end of _convert_to_ascii
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 391 :: 		
0x058C	0xB081    SUB	SP, SP, #4
0x058E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 395 :: 		
; ulRCC_CR start address is: 8 (R2)
0x0592	0x4A4A    LDR	R2, [PC, #296]
;__Lib_System_105_107.c, 396 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x0594	0x4B4A    LDR	R3, [PC, #296]
;__Lib_System_105_107.c, 397 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x0596	0x4C4B    LDR	R4, [PC, #300]
;__Lib_System_105_107.c, 398 :: 		
; Fosc_kHz start address is: 20 (R5)
0x0598	0x4D4B    LDR	R5, [PC, #300]
;__Lib_System_105_107.c, 407 :: 		
0x059A	0xF00300F0  AND	R0, R3, #240
;__Lib_System_105_107.c, 408 :: 		
0x059E	0x0901    LSRS	R1, R0, #4
;__Lib_System_105_107.c, 409 :: 		
0x05A0	0x484A    LDR	R0, [PC, #296]
0x05A2	0x1840    ADDS	R0, R0, R1
0x05A4	0x7800    LDRB	R0, [R0, #0]
; presc start address is: 0 (R0)
;__Lib_System_105_107.c, 411 :: 		
0x05A6	0xFA05F100  LSL	R1, R5, R0
; Fosc_kHz end address is: 20 (R5)
; presc end address is: 0 (R0)
; SYS_clk start address is: 20 (R5)
0x05AA	0x460D    MOV	R5, R1
;__Lib_System_105_107.c, 413 :: 		
0x05AC	0xF64B3080  MOVW	R0, #48000
0x05B0	0x4281    CMP	R1, R0
0x05B2	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC234
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 414 :: 		
0x05B4	0x4846    LDR	R0, [PC, #280]
0x05B6	0x6800    LDR	R0, [R0, #0]
0x05B8	0xF0400102  ORR	R1, R0, #2
0x05BC	0x4844    LDR	R0, [PC, #272]
0x05BE	0x6001    STR	R1, [R0, #0]
0x05C0	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
L___Lib_System_105_107_InitialSetUpRCCRCC234:
;__Lib_System_105_107.c, 415 :: 		
; SYS_clk start address is: 20 (R5)
0x05C2	0xF64550C0  MOVW	R0, #24000
0x05C6	0x4285    CMP	R5, R0
0x05C8	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC236
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 416 :: 		
0x05CA	0x4841    LDR	R0, [PC, #260]
0x05CC	0x6800    LDR	R0, [R0, #0]
0x05CE	0xF0400101  ORR	R1, R0, #1
0x05D2	0x483F    LDR	R0, [PC, #252]
0x05D4	0x6001    STR	R1, [R0, #0]
0x05D6	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC237
L___Lib_System_105_107_InitialSetUpRCCRCC236:
;__Lib_System_105_107.c, 418 :: 		
0x05D8	0x483D    LDR	R0, [PC, #244]
0x05DA	0x6801    LDR	R1, [R0, #0]
0x05DC	0xF06F0007  MVN	R0, #7
0x05E0	0x4001    ANDS	R1, R0
0x05E2	0x483B    LDR	R0, [PC, #236]
0x05E4	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC237:
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 420 :: 		
0x05E6	0xF7FFFE51  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 422 :: 		
0x05EA	0x483A    LDR	R0, [PC, #232]
0x05EC	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 423 :: 		
0x05EE	0x483A    LDR	R0, [PC, #232]
0x05F0	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 424 :: 		
0x05F2	0x483A    LDR	R0, [PC, #232]
0x05F4	0xEA020100  AND	R1, R2, R0, LSL #0
0x05F8	0x4839    LDR	R0, [PC, #228]
0x05FA	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 426 :: 		
0x05FC	0xF0020001  AND	R0, R2, #1
0x0600	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x0602	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 427 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x0604	0x4836    LDR	R0, [PC, #216]
0x0606	0x6800    LDR	R0, [R0, #0]
0x0608	0xF0000002  AND	R0, R0, #2
0x060C	0x2800    CMP	R0, #0
0x060E	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 428 :: 		
0x0610	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 429 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x0612	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 426 :: 		
0x0614	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 429 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 431 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x0616	0xF4023080  AND	R0, R2, #65536
0x061A	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x061C	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 432 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x061E	0x4830    LDR	R0, [PC, #192]
0x0620	0x6800    LDR	R0, [R0, #0]
0x0622	0xF4003000  AND	R0, R0, #131072
0x0626	0x2800    CMP	R0, #0
0x0628	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 433 :: 		
0x062A	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 434 :: 		
; ulRCC_CR end address is: 8 (R2)
0x062C	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 431 :: 		
0x062E	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 434 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 436 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x0630	0xF0025080  AND	R0, R2, #268435456
0x0634	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC257
;__Lib_System_105_107.c, 437 :: 		
0x0636	0x482A    LDR	R0, [PC, #168]
0x0638	0x6800    LDR	R0, [R0, #0]
0x063A	0xF0405180  ORR	R1, R0, #268435456
0x063E	0x4828    LDR	R0, [PC, #160]
0x0640	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 438 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x0642	0x4827    LDR	R0, [PC, #156]
0x0644	0x6800    LDR	R0, [R0, #0]
0x0646	0xF0005000  AND	R0, R0, #536870912
0x064A	0x2800    CMP	R0, #0
0x064C	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 439 :: 		
0x064E	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 440 :: 		
; ulRCC_CR end address is: 8 (R2)
0x0650	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC257:
;__Lib_System_105_107.c, 436 :: 		
;__Lib_System_105_107.c, 440 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 442 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x0652	0xF0026080  AND	R0, R2, #67108864
0x0656	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC258
;__Lib_System_105_107.c, 443 :: 		
0x0658	0x4821    LDR	R0, [PC, #132]
0x065A	0x6800    LDR	R0, [R0, #0]
0x065C	0xF0406180  ORR	R1, R0, #67108864
0x0660	0x481F    LDR	R0, [PC, #124]
0x0662	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x0664	0x4611    MOV	R1, R2
0x0666	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 444 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x0668	0x481D    LDR	R0, [PC, #116]
0x066A	0x6800    LDR	R0, [R0, #0]
0x066C	0xF0006000  AND	R0, R0, #134217728
0x0670	0x2800    CMP	R0, #0
0x0672	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 445 :: 		
0x0674	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 446 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x0676	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC258:
;__Lib_System_105_107.c, 442 :: 		
0x0678	0x4611    MOV	R1, R2
0x067A	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 446 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 448 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x067C	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x0680	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC259
;__Lib_System_105_107.c, 449 :: 		
0x0682	0x4817    LDR	R0, [PC, #92]
0x0684	0x6800    LDR	R0, [R0, #0]
0x0686	0xF0407180  ORR	R1, R0, #16777216
0x068A	0x4815    LDR	R0, [PC, #84]
0x068C	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x068E	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 450 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC251:
; ulRCC_CFGR start address is: 4 (R1)
0x0690	0x4813    LDR	R0, [PC, #76]
0x0692	0x6800    LDR	R0, [R0, #0]
0x0694	0xF0007000  AND	R0, R0, #33554432
0x0698	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
;__Lib_System_105_107.c, 451 :: 		
0x069A	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC251
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 452 :: 		
0x069C	0x460A    MOV	R2, R1
0x069E	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC259:
;__Lib_System_105_107.c, 448 :: 		
;__Lib_System_105_107.c, 452 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC250:
;__Lib_System_105_107.c, 456 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
; ulRCC_CFGR start address is: 8 (R2)
0x06A0	0x480C    LDR	R0, [PC, #48]
0x06A2	0x6800    LDR	R0, [R0, #0]
0x06A4	0xF000010C  AND	R1, R0, #12
0x06A8	0x0090    LSLS	R0, R2, #2
0x06AA	0xF000000C  AND	R0, R0, #12
0x06AE	0x4281    CMP	R1, R0
0x06B0	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 457 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x06B2	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC253
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 458 :: 		
L_end_InitialSetUpRCCRCC2:
0x06B4	0xF8DDE000  LDR	LR, [SP, #0]
0x06B8	0xB001    ADD	SP, SP, #4
0x06BA	0x4770    BX	LR
0x06BC	0x00811501  	#352387201
0x06C0	0x8402091D  	#152929282
0x06C4	0xF6440001  	#128580
0x06C8	0x19400001  	#72000
0x06CC	0x09BB0000  	__Lib_System_105_107_APBAHBPrescTable+0
0x06D0	0x20004002  	FLASH_ACR+0
0x06D4	0x10044002  	RCC_CFGR+0
0x06D8	0x102C4002  	RCC_CFGR2+0
0x06DC	0xFFFF000F  	#1048575
0x06E0	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 360 :: 		
0x028C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 363 :: 		
0x028E	0x4815    LDR	R0, [PC, #84]
0x0290	0x6800    LDR	R0, [R0, #0]
0x0292	0xF0400101  ORR	R1, R0, #1
0x0296	0x4813    LDR	R0, [PC, #76]
0x0298	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 366 :: 		
0x029A	0x4913    LDR	R1, [PC, #76]
0x029C	0x4813    LDR	R0, [PC, #76]
0x029E	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 369 :: 		
0x02A0	0x4810    LDR	R0, [PC, #64]
0x02A2	0x6801    LDR	R1, [R0, #0]
0x02A4	0x4812    LDR	R0, [PC, #72]
0x02A6	0x4001    ANDS	R1, R0
0x02A8	0x480E    LDR	R0, [PC, #56]
0x02AA	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
0x02AC	0x480D    LDR	R0, [PC, #52]
0x02AE	0x6801    LDR	R1, [R0, #0]
0x02B0	0xF46F2080  MVN	R0, #262144
0x02B4	0x4001    ANDS	R1, R0
0x02B6	0x480B    LDR	R0, [PC, #44]
0x02B8	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 375 :: 		
0x02BA	0x480C    LDR	R0, [PC, #48]
0x02BC	0x6801    LDR	R1, [R0, #0]
0x02BE	0xF46F00FE  MVN	R0, #8323072
0x02C2	0x4001    ANDS	R1, R0
0x02C4	0x4809    LDR	R0, [PC, #36]
0x02C6	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 378 :: 		
0x02C8	0x4806    LDR	R0, [PC, #24]
0x02CA	0x6801    LDR	R1, [R0, #0]
0x02CC	0xF06F50A0  MVN	R0, #335544320
0x02D0	0x4001    ANDS	R1, R0
0x02D2	0x4804    LDR	R0, [PC, #16]
0x02D4	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 381 :: 		
0x02D6	0xF04F0100  MOV	R1, #0
0x02DA	0x4806    LDR	R0, [PC, #24]
0x02DC	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 385 :: 		
L_end_SystemClockSetDefault:
0x02DE	0xB001    ADD	SP, SP, #4
0x02E0	0x4770    BX	LR
0x02E2	0xBF00    NOP
0x02E4	0x10004002  	RCC_CR+0
0x02E8	0x0000F0FF  	#-251723776
0x02EC	0x10044002  	RCC_CFGR+0
0x02F0	0xFFFFFEF6  	#-17367041
0x02F4	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 460 :: 		
0x0570	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 461 :: 		
0x0572	0x4902    LDR	R1, [PC, #8]
0x0574	0x4802    LDR	R0, [PC, #8]
0x0576	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 462 :: 		
L_end_InitialSetUpFosc:
0x0578	0xB001    ADD	SP, SP, #4
0x057A	0x4770    BX	LR
0x057C	0x19400001  	#72000
0x0580	0x00042000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 311 :: 		
0x0584	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 312 :: 		
L___GenExcept30:
0x0586	0xE7FE    B	L___GenExcept30
;__Lib_System_105_107.c, 313 :: 		
L_end___GenExcept:
0x0588	0xB001    ADD	SP, SP, #4
0x058A	0x4770    BX	LR
; end of ___GenExcept
0x09CC	0xB500    PUSH	(R14)
0x09CE	0xF8DFB014  LDR	R11, [PC, #20]
0x09D2	0xF8DFA014  LDR	R10, [PC, #20]
0x09D6	0xF8DFC014  LDR	R12, [PC, #20]
0x09DA	0xF7FFFD61  BL	1184
0x09DE	0xBD00    POP	(R15)
0x09E0	0x4770    BX	LR
0x09E2	0xBF00    NOP
0x09E4	0x00002000  	#536870912
0x09E8	0x00042000  	#536870916
0x09EC	0x04B40000  	#1204
0x0A4C	0xB500    PUSH	(R14)
0x0A4E	0xF8DFB010  LDR	R11, [PC, #16]
0x0A52	0xF8DFA010  LDR	R10, [PC, #16]
0x0A56	0xF7FFFD05  BL	1124
0x0A5A	0xBD00    POP	(R15)
0x0A5C	0x4770    BX	LR
0x0A5E	0xBF00    NOP
0x0A60	0x00002000  	#536870912
0x0A64	0x00082000  	#536870920
;p4_serial_comm.c,0 :: ?ICS_list_len [4]
0x04B4	0x00000000 ;?ICS_list_len+0
; end of ?ICS_list_len
;p4_serial_comm.c,0 :: ?ICSmain_loop_on_L0 [1]
0x0904	0x01 ;?ICSmain_loop_on_L0+0
; end of ?ICSmain_loop_on_L0
;p4_serial_comm.c,0 :: ?ICSmain_min_pos_L0 [4]
0x0908	0x00000000 ;?ICSmain_min_pos_L0+0
; end of ?ICSmain_min_pos_L0
;p4_serial_comm.c,0 :: ?ICSmain_pivot_pos_L0 [4]
0x090C	0x00000000 ;?ICSmain_pivot_pos_L0+0
; end of ?ICSmain_pivot_pos_L0
;p4_serial_comm.c,0 :: ?ICSmain_char_counter_L0 [4]
0x0910	0x00000000 ;?ICSmain_char_counter_L0+0
; end of ?ICSmain_char_counter_L0
;p4_serial_comm.c,0 :: ?ICSmain_title_divider_L0 [62]
0x0914	0x3D3D3D3D ;?ICSmain_title_divider_L0+0
0x0918	0x3D3D3D3D ;?ICSmain_title_divider_L0+4
0x091C	0x3D3D3D3D ;?ICSmain_title_divider_L0+8
0x0920	0x3D3D3D3D ;?ICSmain_title_divider_L0+12
0x0924	0x3D3D3D3D ;?ICSmain_title_divider_L0+16
0x0928	0x3D3D3D3D ;?ICSmain_title_divider_L0+20
0x092C	0x3D3D3D3D ;?ICSmain_title_divider_L0+24
0x0930	0x3D3D3D3D ;?ICSmain_title_divider_L0+28
0x0934	0x3D3D3D3D ;?ICSmain_title_divider_L0+32
0x0938	0x3D3D3D3D ;?ICSmain_title_divider_L0+36
0x093C	0x3D3D3D3D ;?ICSmain_title_divider_L0+40
0x0940	0x3D3D3D3D ;?ICSmain_title_divider_L0+44
0x0944	0x3D3D3D3D ;?ICSmain_title_divider_L0+48
0x0948	0x3D3D3D3D ;?ICSmain_title_divider_L0+52
0x094C	0x3D3D3D3D ;?ICSmain_title_divider_L0+56
0x0950	0x003D ;?ICSmain_title_divider_L0+60
; end of ?ICSmain_title_divider_L0
;,0 :: _initBlock_6 [28]
; Containing: ?ICSmain_title_cr_lf_L0 [3]
;             ?ICSmain_title_counter_L0 [14]
;             ?ICSmain_title_orig_L0 [11]
0x0952	0x4E000A0D ;_initBlock_6+0 : ?ICSmain_title_cr_lf_L0 at 0x0952 : ?ICSmain_title_counter_L0 at 0x0955
0x0956	0x202E6D75 ;_initBlock_6+4
0x095A	0x74726F53 ;_initBlock_6+8
0x095E	0x203A6465 ;_initBlock_6+12
0x0962	0x69724F00 ;_initBlock_6+16 : ?ICSmain_title_orig_L0 at 0x0963
0x0966	0x616E6967 ;_initBlock_6+20
0x096A	0x00203A6C ;_initBlock_6+24
; end of _initBlock_6
;,0 :: _initBlock_7 [93]
; Containing: ?ICSmain_title_sorted_L0 [9]
;             ?ICSmain_title_start_L0 [68]
;             APBAHBPrescTable [16]
0x096E	0x74726F53 ;_initBlock_7+0 : ?ICSmain_title_sorted_L0 at 0x096E
0x0972	0x203A6465 ;_initBlock_7+4
0x0976	0x34505B00 ;_initBlock_7+8 : ?ICSmain_title_start_L0 at 0x0977
0x097A	0x6F725020 ;_initBlock_7+12
0x097E	0x7463656A ;_initBlock_7+16
0x0982	0x202D205D ;_initBlock_7+20
0x0986	0x61656C50 ;_initBlock_7+24
0x098A	0x65206573 ;_initBlock_7+28
0x098E	0x7265746E ;_initBlock_7+32
0x0992	0x20707520 ;_initBlock_7+36
0x0996	0x35206F74 ;_initBlock_7+40
0x099A	0x68632030 ;_initBlock_7+44
0x099E	0x20737261 ;_initBlock_7+48
0x09A2	0x2720726F ;_initBlock_7+52
0x09A6	0x74202740 ;_initBlock_7+56
0x09AA	0x6E65206F ;_initBlock_7+60
0x09AE	0x65732064 ;_initBlock_7+64
0x09B2	0x6E657571 ;_initBlock_7+68
0x09B6	0x203A6563 ;_initBlock_7+72
0x09BA	0x00000000 ;_initBlock_7+76 : APBAHBPrescTable at 0x09BB
0x09BE	0x03020100 ;_initBlock_7+80
0x09C2	0x03020104 ;_initBlock_7+84
0x09C6	0x08070604 ;_initBlock_7+88
0x09CA	0x09 ;_initBlock_7+92
; end of _initBlock_7
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150     [128]    _write_data_char
0x01D0     [120]    _write_data
0x0248      [68]    _read_data
0x028C     [108]    __Lib_System_105_107_SystemClockSetDefault
0x02F8      [76]    _convert_to_ascii
0x0344     [286]    _q_sort
0x0464      [58]    ___FillZeros
0x04A0      [20]    ___CC2DW
0x04B8      [40]    _update_led
0x04E0     [144]    _print_string
0x0570      [20]    __Lib_System_105_107_InitialSetUpFosc
0x0584       [8]    ___GenExcept
0x058C     [344]    __Lib_System_105_107_InitialSetUpRCCRCC2
0x06E8     [540]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [4]    _list_len
0x20000004       [4]    ___System_CLOCK_IN_KHZ
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x04B4       [4]    ?ICS_list_len
0x0904       [1]    ?ICSmain_loop_on_L0
0x0908       [4]    ?ICSmain_min_pos_L0
0x090C       [4]    ?ICSmain_pivot_pos_L0
0x0910       [4]    ?ICSmain_char_counter_L0
0x0914      [62]    ?ICSmain_title_divider_L0
0x0952       [3]    ?ICSmain_title_cr_lf_L0
0x0955      [14]    ?ICSmain_title_counter_L0
0x0963      [11]    ?ICSmain_title_orig_L0
0x096E       [9]    ?ICSmain_title_sorted_L0
0x0977      [68]    ?ICSmain_title_start_L0
0x09BB      [16]    __Lib_System_105_107_APBAHBPrescTable
