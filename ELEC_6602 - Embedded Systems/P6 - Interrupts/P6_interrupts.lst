;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/28/2022 7:58:37 PM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x05A90000  	1449
0x0008	0x08F50000  	2293
0x000C	0x08F50000  	2293
0x0010	0x08F50000  	2293
0x0014	0x08F50000  	2293
0x0018	0x08F50000  	2293
0x001C	0x08F50000  	2293
0x0020	0x08F50000  	2293
0x0024	0x08F50000  	2293
0x0028	0x08F50000  	2293
0x002C	0x08F50000  	2293
0x0030	0x08F50000  	2293
0x0034	0x08F50000  	2293
0x0038	0x08F50000  	2293
0x003C	0x08F50000  	2293
0x0040	0x08F50000  	2293
0x0044	0x08F50000  	2293
0x0048	0x08F50000  	2293
0x004C	0x08F50000  	2293
0x0050	0x08F50000  	2293
0x0054	0x08F50000  	2293
0x0058	0x08F50000  	2293
0x005C	0x08F50000  	2293
0x0060	0x08F50000  	2293
0x0064	0x08F50000  	2293
0x0068	0x03D50000  	981
0x006C	0x08F50000  	2293
0x0070	0x08F50000  	2293
0x0074	0x08F50000  	2293
0x0078	0x08F50000  	2293
0x007C	0x08F50000  	2293
0x0080	0x08F50000  	2293
0x0084	0x08F50000  	2293
0x0088	0x08F50000  	2293
0x008C	0x08F50000  	2293
0x0090	0x08F50000  	2293
0x0094	0x08F50000  	2293
0x0098	0x08F50000  	2293
0x009C	0x03950000  	917
0x00A0	0x08F50000  	2293
0x00A4	0x08F50000  	2293
0x00A8	0x08F50000  	2293
0x00AC	0x08F50000  	2293
0x00B0	0x03310000  	817
0x00B4	0x08F50000  	2293
0x00B8	0x08F50000  	2293
0x00BC	0x08F50000  	2293
0x00C0	0x08F50000  	2293
0x00C4	0x08F50000  	2293
0x00C8	0x08F50000  	2293
0x00CC	0x08F50000  	2293
0x00D0	0x08F50000  	2293
0x00D4	0x08710000  	2161
0x00D8	0x08F50000  	2293
0x00DC	0x08F50000  	2293
0x00E0	0x04010000  	1025
0x00E4	0x08F50000  	2293
0x00E8	0x08F50000  	2293
0x00EC	0x08F50000  	2293
0x00F0	0x08F50000  	2293
0x00F4	0x08F50000  	2293
0x00F8	0x08F50000  	2293
0x00FC	0x08F50000  	2293
0x0100	0x08F50000  	2293
0x0104	0x08F50000  	2293
0x0108	0x08F50000  	2293
0x010C	0x08F50000  	2293
0x0110	0x08F50000  	2293
0x0114	0x08F50000  	2293
0x0118	0x08F50000  	2293
0x011C	0x08F50000  	2293
0x0120	0x08F50000  	2293
0x0124	0x08F50000  	2293
0x0128	0x08F50000  	2293
0x012C	0x08F50000  	2293
0x0130	0x08F50000  	2293
0x0134	0x08F50000  	2293
0x0138	0x08F50000  	2293
0x013C	0x08F50000  	2293
0x0140	0x08F50000  	2293
0x0144	0x08F50000  	2293
0x0148	0x08F50000  	2293
0x014C	0x08F50000  	2293
; end of ____SysVT
_main:
;P6_interrupts.c, 203 :: 		void main() {
0x05A8	0xB081    SUB	SP, SP, #4
0x05AA	0xF7FFFF4F  BL	1100
0x05AE	0xF000F9F9  BL	2468
0x05B2	0xF000F953  BL	2140
0x05B6	0xF000F9B5  BL	2340
;P6_interrupts.c, 206 :: 		initClock72MHz();
0x05BA	0xF7FFFEA1  BL	_initClock72MHz+0
;P6_interrupts.c, 209 :: 		USART1_CR1 &= ~(1 << 13);                  // Diasable USART for configuration
0x05BE	0x4881    LDR	R0, [PC, #516]
0x05C0	0x6801    LDR	R1, [R0, #0]
0x05C2	0xF46F5000  MVN	R0, #8192
0x05C6	0x4001    ANDS	R1, R0
0x05C8	0x487E    LDR	R0, [PC, #504]
0x05CA	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 211 :: 		AFIO_MAPR    = 0x00000000;                 // Bit[2] USART1 Remap 0: No remap remap timer2 stuff
0x05CC	0x2100    MOVS	R1, #0
0x05CE	0x487E    LDR	R0, [PC, #504]
0x05D0	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 212 :: 		RCC_APB2ENR |= 0x00000001;                 // Alt. function bit to enable USART1
0x05D2	0x487E    LDR	R0, [PC, #504]
0x05D4	0x6800    LDR	R0, [R0, #0]
0x05D6	0xF0400101  ORR	R1, R0, #1
0x05DA	0x487C    LDR	R0, [PC, #496]
0x05DC	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 215 :: 		RCC_APB2ENR |= 1 << 2;                     // Enable GPIO Clock PORT A  Interrupt test
0x05DE	0x487B    LDR	R0, [PC, #492]
0x05E0	0x6800    LDR	R0, [R0, #0]
0x05E2	0xF0400104  ORR	R1, R0, #4
0x05E6	0x4879    LDR	R0, [PC, #484]
0x05E8	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 216 :: 		RCC_APB2ENR |= 1 << 3;                     // Enable GPIO Clock PORT B
0x05EA	0x4878    LDR	R0, [PC, #480]
0x05EC	0x6800    LDR	R0, [R0, #0]
0x05EE	0xF0400108  ORR	R1, R0, #8
0x05F2	0x4876    LDR	R0, [PC, #472]
0x05F4	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 217 :: 		RCC_APB2ENR |= 1 << 5;                     // Enable GPIO Clock PORT D
0x05F6	0x4875    LDR	R0, [PC, #468]
0x05F8	0x6800    LDR	R0, [R0, #0]
0x05FA	0xF0400120  ORR	R1, R0, #32
0x05FE	0x4873    LDR	R0, [PC, #460]
0x0600	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 218 :: 		RCC_APB2ENR |= 1 << 6;                     // Enable GPIO Clock PORT E
0x0602	0x4872    LDR	R0, [PC, #456]
0x0604	0x6800    LDR	R0, [R0, #0]
0x0606	0xF0400140  ORR	R1, R0, #64
0x060A	0x4870    LDR	R0, [PC, #448]
0x060C	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 219 :: 		RCC_APB2ENR |= 1 << 14;                    // Enable USART1 Clock for USART and
0x060E	0x486F    LDR	R0, [PC, #444]
0x0610	0x6800    LDR	R0, [R0, #0]
0x0612	0xF4404180  ORR	R1, R0, #16384
0x0616	0x486D    LDR	R0, [PC, #436]
0x0618	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 223 :: 		GPIOA_CRH &= ~(0xFF << 4);                 // Shift 4 bits left to clear out bits PA9/PA10 mask with FFFF F00F
0x061A	0x486D    LDR	R0, [PC, #436]
0x061C	0x6801    LDR	R1, [R0, #0]
0x061E	0xF24F000F  MOVW	R0, #61455
0x0622	0x4001    ANDS	R1, R0
0x0624	0x486A    LDR	R0, [PC, #424]
0x0626	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 224 :: 		GPIOA_CRH |=  (0x0B << 4);                 // USART1 Tx/PA9 set CNF=AF output push-pull b10; MODE: 50Hz b11; = b1011 = 0x0b
0x0628	0x4869    LDR	R0, [PC, #420]
0x062A	0x6800    LDR	R0, [R0, #0]
0x062C	0xF04001B0  ORR	R1, R0, #176
0x0630	0x4867    LDR	R0, [PC, #412]
0x0632	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 225 :: 		GPIOA_CRH |=  (0x04 << 8);                 // USART1 Rx/PA10 set CNF=input-floating b01; MODE: input b00; = b0100 = 0x04
0x0634	0x4866    LDR	R0, [PC, #408]
0x0636	0x6800    LDR	R0, [R0, #0]
0x0638	0xF4406180  ORR	R1, R0, #1024
0x063C	0x4864    LDR	R0, [PC, #400]
0x063E	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 227 :: 		GPIOA_CRL |=  0x44444444 << 16;            // PA1 input CNF=input-floating b01; MODE: input b00 = 0x0100;
0x0640	0x4864    LDR	R0, [PC, #400]
0x0642	0x6801    LDR	R1, [R0, #0]
0x0644	0x4864    LDR	R0, [PC, #400]
0x0646	0x4301    ORRS	R1, R0
0x0648	0x4862    LDR	R0, [PC, #392]
0x064A	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 228 :: 		GPIOB_CRL |= (uint32_t) (0x04 << 24);      // PB6 input CNF=input-floating b01; MODE: input b00 = 0x0100;
0x064C	0x4863    LDR	R0, [PC, #396]
0x064E	0x6801    LDR	R1, [R0, #0]
0x0650	0x4862    LDR	R0, [PC, #392]
0x0652	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 230 :: 		GPIOD_CRL = 0x33333333;                    // PD0:7   CNF=GP output push-pull; b00; MODE: 50MHz b11 = 0x0011;
0x0654	0xF04F3133  MOV	R1, #858993459
0x0658	0x4861    LDR	R0, [PC, #388]
0x065A	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 231 :: 		GPIOD_CRH = 0x33333333;                    // PD8:15  CNF=GP output push-pull; b00; MODE: 50MHz b11 = 0x0011;
0x065C	0xF04F3133  MOV	R1, #858993459
0x0660	0x4860    LDR	R0, [PC, #384]
0x0662	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 232 :: 		GPIOE_CRH = 0x33333333;                    // PE8:15  CNF=GP output push-pull; b00; MODE: 50MHz b11 = 0x0011;
0x0664	0xF04F3133  MOV	R1, #858993459
0x0668	0x485F    LDR	R0, [PC, #380]
0x066A	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 236 :: 		USART1_BRR = 0x00000506;                   // Clock=72MHz, oversample=16; 72MHz / (16*56,000) = 80.357
0x066C	0xF2405106  MOVW	R1, #1286
0x0670	0x485E    LDR	R0, [PC, #376]
0x0672	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 240 :: 		USART1_CR1 &= ~(1 << 13);                  // Disable USART for configuration
0x0674	0x4853    LDR	R0, [PC, #332]
0x0676	0x6801    LDR	R1, [R0, #0]
0x0678	0xF46F5000  MVN	R0, #8192
0x067C	0x4001    ANDS	R1, R0
0x067E	0x4851    LDR	R0, [PC, #324]
0x0680	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 241 :: 		USART1_CR1 |= 1 << 5;                      // ENABLE USART1 TXNE interrupt
0x0682	0x4850    LDR	R0, [PC, #320]
0x0684	0x6800    LDR	R0, [R0, #0]
0x0686	0xF0400120  ORR	R1, R0, #32
0x068A	0x484E    LDR	R0, [PC, #312]
0x068C	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 242 :: 		USART1_CR1 &= ~(1 << 12);                  // Force 8 data bits. Mbit set to 0
0x068E	0x484D    LDR	R0, [PC, #308]
0x0690	0x6801    LDR	R1, [R0, #0]
0x0692	0xF46F5080  MVN	R0, #4096
0x0696	0x4001    ANDS	R1, R0
0x0698	0x484A    LDR	R0, [PC, #296]
0x069A	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 243 :: 		USART1_CR1 &= ~(3 << 9);                   // Force no Parity & no parity control
0x069C	0x4849    LDR	R0, [PC, #292]
0x069E	0x6801    LDR	R1, [R0, #0]
0x06A0	0xF46F60C0  MVN	R0, #1536
0x06A4	0x4001    ANDS	R1, R0
0x06A6	0x4847    LDR	R0, [PC, #284]
0x06A8	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 244 :: 		USART1_CR2 &= ~(3 << 12);                  // Force 1 stop bit
0x06AA	0x4851    LDR	R0, [PC, #324]
0x06AC	0x6801    LDR	R1, [R0, #0]
0x06AE	0xF46F5040  MVN	R0, #12288
0x06B2	0x4001    ANDS	R1, R0
0x06B4	0x484E    LDR	R0, [PC, #312]
0x06B6	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 245 :: 		USART1_CR3 &= ~(3 << 8);                   // Force no flow control and no DMA for USART1
0x06B8	0x484E    LDR	R0, [PC, #312]
0x06BA	0x6801    LDR	R1, [R0, #0]
0x06BC	0xF46F7040  MVN	R0, #768
0x06C0	0x4001    ANDS	R1, R0
0x06C2	0x484C    LDR	R0, [PC, #304]
0x06C4	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 246 :: 		USART1_CR1 |=  3 << 2;                     // Rx, Tx Enable
0x06C6	0x483F    LDR	R0, [PC, #252]
0x06C8	0x6800    LDR	R0, [R0, #0]
0x06CA	0xF040010C  ORR	R1, R0, #12
0x06CE	0x483D    LDR	R0, [PC, #244]
0x06D0	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 248 :: 		Delay_ms(100);                             // Allow time for USART1 to complete initialization
0x06D2	0xF644777F  MOVW	R7, #20351
0x06D6	0xF2C00712  MOVT	R7, #18
L_main28:
0x06DA	0x1E7F    SUBS	R7, R7, #1
0x06DC	0xD1FD    BNE	L_main28
0x06DE	0xBF00    NOP
0x06E0	0xBF00    NOP
0x06E2	0xBF00    NOP
0x06E4	0xBF00    NOP
0x06E6	0xBF00    NOP
;P6_interrupts.c, 249 :: 		USART1_CR1 |= 1 << 13;                     // **NOTE: USART1 Enable must be done after configuration is complete.
0x06E8	0x4836    LDR	R0, [PC, #216]
0x06EA	0x6800    LDR	R0, [R0, #0]
0x06EC	0xF4405100  ORR	R1, R0, #8192
0x06F0	0x4834    LDR	R0, [PC, #208]
0x06F2	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 253 :: 		RCC_APB1ENR |= 1 << 0;                     // Enable TIMER2 Clock;
0x06F4	0x4840    LDR	R0, [PC, #256]
0x06F6	0x6800    LDR	R0, [R0, #0]
0x06F8	0xF0400101  ORR	R1, R0, #1
0x06FC	0x483E    LDR	R0, [PC, #248]
0x06FE	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 257 :: 		TIM2_CR1 = 0x0000;                         // Disable the timer for config/setup.s
0x0700	0x2100    MOVS	R1, #0
0x0702	0x483E    LDR	R0, [PC, #248]
0x0704	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 259 :: 		TIM2_PSC = 7999;                           // Counter clock freq is equal to clk_PSC / (PSC[15:0] + 1)
0x0706	0xF641713F  MOVW	R1, #7999
0x070A	0x483D    LDR	R0, [PC, #244]
0x070C	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 262 :: 		TIM2_ARR = 9000;                           // Set the auto-reload register to the value calculated above
0x070E	0xF2423128  MOVW	R1, #9000
0x0712	0x483C    LDR	R0, [PC, #240]
0x0714	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 264 :: 		TIM2_DIER |= 1 << 0;                       // Allow timer Update interrupt enable
0x0716	0x483C    LDR	R0, [PC, #240]
0x0718	0x6800    LDR	R0, [R0, #0]
0x071A	0xF0400101  ORR	R1, R0, #1
0x071E	0x483A    LDR	R0, [PC, #232]
0x0720	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 266 :: 		TIM2_CR1 = 0x0001;                         // After timer setup, enable TIMER2; bit4=0 counting up.
0x0722	0x2101    MOVS	R1, #1
0x0724	0x4835    LDR	R0, [PC, #212]
0x0726	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 271 :: 		AFIO_EXTICR2 |= 0x00000000;                // PA4 as External interrupt; Pin4/EXTI4[3:0] PortA=b0000
0x0728	0x4838    LDR	R0, [PC, #224]
0x072A	0x6801    LDR	R1, [R0, #0]
0x072C	0x4837    LDR	R0, [PC, #220]
0x072E	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 272 :: 		AFIO_EXTICR2 |= 0x00000100;                // PB6 as Enternal interrupt; Pin6/EXTI6[3:0] PortB=b0001
0x0730	0x4836    LDR	R0, [PC, #216]
0x0732	0x6800    LDR	R0, [R0, #0]
0x0734	0xF4407180  ORR	R1, R0, #256
0x0738	0x4834    LDR	R0, [PC, #208]
0x073A	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 274 :: 		EXTI_RTSR    |= 1 << 4;                    // Set Edge trigger register for interrupt on rising edge for PA4 and PB6
0x073C	0x4834    LDR	R0, [PC, #208]
0x073E	0x6800    LDR	R0, [R0, #0]
0x0740	0xF0400110  ORR	R1, R0, #16
0x0744	0x4832    LDR	R0, [PC, #200]
0x0746	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 275 :: 		EXTI_RTSR    |= 1 << 6;                    // Mask to enable TR6 and TR4 (EXTI6 and EXTI4) b1=rising trigger enabled
0x0748	0x4831    LDR	R0, [PC, #196]
0x074A	0x6800    LDR	R0, [R0, #0]
0x074C	0xF0400140  ORR	R1, R0, #64
0x0750	0x482F    LDR	R0, [PC, #188]
0x0752	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 276 :: 		EXTI_IMR     |= 0x00000050;                // Set interrupt request from TR6 and TR4 to not masked (cpu CANNOT ignore it)
0x0754	0x482F    LDR	R0, [PC, #188]
0x0756	0x6800    LDR	R0, [R0, #0]
0x0758	0xF0400150  ORR	R1, R0, #80
0x075C	0x482D    LDR	R0, [PC, #180]
0x075E	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 291 :: 		NVIC_ISER0 |= 1 << 10;                    // Enable NVIC interrupt set enable registers for EXTI1 line zero (PA1)
0x0760	0x482D    LDR	R0, [PC, #180]
0x0762	0x6800    LDR	R0, [R0, #0]
0x0764	0xF4406180  ORR	R1, R0, #1024
0x0768	0x482B    LDR	R0, [PC, #172]
0x076A	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 292 :: 		NVIC_ISER0 |= (long int) 1 << 23;         // Enable NVIC interrupt set enable registers for EXTI6 PB6
0x076C	0x482A    LDR	R0, [PC, #168]
0x076E	0x6800    LDR	R0, [R0, #0]
0x0770	0xF4400100  ORR	R1, R0, #8388608
0x0774	0x4828    LDR	R0, [PC, #160]
0x0776	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 293 :: 		NVIC_ISER0 |= (uint32_t) 1 << 28;         // Enable NVIC interrupt enable for TIM2 global interrupt vector mapping 28
0x0778	0x4827    LDR	R0, [PC, #156]
0x077A	0x6800    LDR	R0, [R0, #0]
0x077C	0xF0405180  ORR	R1, R0, #268435456
0x0780	0x4825    LDR	R0, [PC, #148]
0x0782	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 294 :: 		NVIC_ISER1   |= 1 << 5;                    // USART1: ISER1 interrupts vector: vector IRQ37 = ISER1; #63-32; 32+5 =37
0x0784	0x4825    LDR	R0, [PC, #148]
0x0786	0x6800    LDR	R0, [R0, #0]
0x0788	0xF0400120  ORR	R1, R0, #32
0x078C	0x4823    LDR	R0, [PC, #140]
0x078E	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 297 :: 		EXTI_IMR |= 1 << 10;                       // Interrupt mask register - not masked; cpu cannot ignore this IRQ
0x0790	0x4820    LDR	R0, [PC, #128]
0x0792	0x6800    LDR	R0, [R0, #0]
0x0794	0xF4406180  ORR	R1, R0, #1024
0x0798	0x481E    LDR	R0, [PC, #120]
0x079A	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 298 :: 		NVIC_ISER1.B8 = 1;                         // EXTI-15_10 is position 40 on NVIC table ISER1 63:32 bit[0] is
0x079C	0x2201    MOVS	R2, #1
0x079E	0xB252    SXTB	R2, R2
0x07A0	0x491E    LDR	R1, [PC, #120]
0x07A2	0x6808    LDR	R0, [R1, #0]
0x07A4	0xF3622008  BFI	R0, R2, #8, #1
0x07A8	0x6008    STR	R0, [R1, #0]
;P6_interrupts.c, 316 :: 		NVIC_IPR10 |= 0xFF << 0;
0x07AA	0x481D    LDR	R0, [PC, #116]
0x07AC	0x6800    LDR	R0, [R0, #0]
0x07AE	0xF04001FF  ORR	R1, R0, #255
0x07B2	0x481B    LDR	R0, [PC, #108]
0x07B4	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 320 :: 		rx_buffer = USART1_DR;
0x07B6	0x481B    LDR	R0, [PC, #108]
0x07B8	0x6801    LDR	R1, [R0, #0]
0x07BA	0x481B    LDR	R0, [PC, #108]
0x07BC	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 323 :: 		for (;;) {
L_main30:
;P6_interrupts.c, 326 :: 		if  (EXTI_SWIER.B10 != 1) {
0x07BE	0x481B    LDR	R0, [PC, #108]
0x07C0	0x6800    LDR	R0, [R0, #0]
0x07C2	0xE035    B	#106
0x07C4	0x380C4001  	USART1_CR1+0
0x07C8	0x00044001  	AFIO_MAPR+0
0x07CC	0x10184002  	RCC_APB2ENR+0
0x07D0	0x08044001  	GPIOA_CRH+0
0x07D4	0x08004001  	GPIOA_CRL+0
0x07D8	0x00004444  	#1145307136
0x07DC	0x0C004001  	GPIOB_CRL+0
0x07E0	0x14004001  	GPIOD_CRL+0
0x07E4	0x14044001  	GPIOD_CRH+0
0x07E8	0x18044001  	GPIOE_CRH+0
0x07EC	0x38084001  	USART1_BRR+0
0x07F0	0x38104001  	USART1_CR2+0
0x07F4	0x38144001  	USART1_CR3+0
0x07F8	0x101C4002  	RCC_APB1ENR+0
0x07FC	0x00004000  	TIM2_CR1+0
0x0800	0x00284000  	TIM2_PSC+0
0x0804	0x002C4000  	TIM2_ARR+0
0x0808	0x000C4000  	TIM2_DIER+0
0x080C	0x000C4001  	AFIO_EXTICR2+0
0x0810	0x04084001  	EXTI_RTSR+0
0x0814	0x04004001  	EXTI_IMR+0
0x0818	0xE100E000  	NVIC_ISER0+0
0x081C	0xE104E000  	NVIC_ISER1+0
0x0820	0xE428E000  	NVIC_IPR10+0
0x0824	0x38044001  	USART1_DR+0
0x0828	0x000C2000  	_rx_buffer+0
0x082C	0x82284220  	EXTI_SWIER+0
0x0830	0xB928    CBNZ	R0, L_main33
;P6_interrupts.c, 327 :: 		EXTI_SWIER |= 1 << 10;              // ENable SWIER_EXTI line 10 trigger to blink PORTD/L LEDs on differnt interval
0x0832	0x4809    LDR	R0, [PC, #36]
0x0834	0x6800    LDR	R0, [R0, #0]
0x0836	0xF4406180  ORR	R1, R0, #1024
0x083A	0x4807    LDR	R0, [PC, #28]
0x083C	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 328 :: 		}
L_main33:
;P6_interrupts.c, 329 :: 		Delay_ms(1);
0x083E	0xF64267DF  MOVW	R7, #11999
0x0842	0xF2C00700  MOVT	R7, #0
0x0846	0xBF00    NOP
0x0848	0xBF00    NOP
L_main34:
0x084A	0x1E7F    SUBS	R7, R7, #1
0x084C	0xD1FD    BNE	L_main34
0x084E	0xBF00    NOP
0x0850	0xBF00    NOP
0x0852	0xBF00    NOP
;P6_interrupts.c, 330 :: 		}
0x0854	0xE7B3    B	L_main30
;P6_interrupts.c, 331 :: 		}
L_end_main:
L__main_end_loop:
0x0856	0xE7FE    B	L__main_end_loop
0x0858	0x04104001  	EXTI_SWIER+0
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 28 :: 		
0x01D0	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 30 :: 		
L_loopDW:
;__Lib_System_105_107.c, 31 :: 		
0x01D2	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 32 :: 		
0x01D6	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 33 :: 		
0x01DA	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 34 :: 		
0x01DE	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 36 :: 		
L_end___CC2DW:
0x01E0	0xB001    ADD	SP, SP, #4
0x01E2	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 70 :: 		
0x02C4	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 72 :: 		
0x02C6	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 73 :: 		
0x02CA	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 74 :: 		
0x02CE	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 75 :: 		
0x02D2	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 76 :: 		
0x02D4	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 77 :: 		
0x02D8	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 78 :: 		
0x02DA	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 79 :: 		
0x02DC	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 80 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 81 :: 		
0x02DE	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 82 :: 		
0x02E2	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 83 :: 		
0x02E6	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 84 :: 		
0x02E8	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 85 :: 		
0x02EC	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 86 :: 		
0x02EE	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 87 :: 		
0x02F0	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 88 :: 		
0x02F4	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 89 :: 		
0x02F8	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 90 :: 		
L_norep:
;__Lib_System_105_107.c, 92 :: 		
L_end___FillZeros:
0x02FA	0xB001    ADD	SP, SP, #4
0x02FC	0x4770    BX	LR
; end of ___FillZeros
_initClock72MHz:
;P6_interrupts.c, 132 :: 		void initClock72MHz() {
0x0300	0xB081    SUB	SP, SP, #4
;P6_interrupts.c, 136 :: 		RCC_CR = 0x05010081;
0x0302	0x4905    LDR	R1, [PC, #20]
0x0304	0x4805    LDR	R0, [PC, #20]
0x0306	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 143 :: 		RCC_CFGR = 0x091D8402; // IDE Scheme
0x0308	0x4905    LDR	R1, [PC, #20]
0x030A	0x4806    LDR	R0, [PC, #24]
0x030C	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 150 :: 		RCC_CFGR2 = 0x00010644;
0x030E	0x4906    LDR	R1, [PC, #24]
0x0310	0x4806    LDR	R0, [PC, #24]
0x0312	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 151 :: 		}
L_end_initClock72MHz:
0x0314	0xB001    ADD	SP, SP, #4
0x0316	0x4770    BX	LR
0x0318	0x00810501  	#83951745
0x031C	0x10004002  	RCC_CR+0
0x0320	0x8402091D  	#152929282
0x0324	0x10044002  	RCC_CFGR+0
0x0328	0x06440001  	#67140
0x032C	0x102C4002  	RCC_CFGR2+0
; end of _initClock72MHz
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 391 :: 		
0x044C	0xB081    SUB	SP, SP, #4
0x044E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 395 :: 		
; ulRCC_CR start address is: 8 (R2)
0x0452	0x4A4A    LDR	R2, [PC, #296]
;__Lib_System_105_107.c, 396 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x0454	0x4B4A    LDR	R3, [PC, #296]
;__Lib_System_105_107.c, 397 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x0456	0x4C4B    LDR	R4, [PC, #300]
;__Lib_System_105_107.c, 398 :: 		
; Fosc_kHz start address is: 20 (R5)
0x0458	0x4D4B    LDR	R5, [PC, #300]
;__Lib_System_105_107.c, 407 :: 		
0x045A	0xF00300F0  AND	R0, R3, #240
;__Lib_System_105_107.c, 408 :: 		
0x045E	0x0901    LSRS	R1, R0, #4
;__Lib_System_105_107.c, 409 :: 		
0x0460	0x484A    LDR	R0, [PC, #296]
0x0462	0x1840    ADDS	R0, R0, R1
0x0464	0x7800    LDRB	R0, [R0, #0]
; presc start address is: 0 (R0)
;__Lib_System_105_107.c, 411 :: 		
0x0466	0xFA05F100  LSL	R1, R5, R0
; Fosc_kHz end address is: 20 (R5)
; presc end address is: 0 (R0)
; SYS_clk start address is: 20 (R5)
0x046A	0x460D    MOV	R5, R1
;__Lib_System_105_107.c, 413 :: 		
0x046C	0xF64B3080  MOVW	R0, #48000
0x0470	0x4281    CMP	R1, R0
0x0472	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC234
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 414 :: 		
0x0474	0x4846    LDR	R0, [PC, #280]
0x0476	0x6800    LDR	R0, [R0, #0]
0x0478	0xF0400102  ORR	R1, R0, #2
0x047C	0x4844    LDR	R0, [PC, #272]
0x047E	0x6001    STR	R1, [R0, #0]
0x0480	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
L___Lib_System_105_107_InitialSetUpRCCRCC234:
;__Lib_System_105_107.c, 415 :: 		
; SYS_clk start address is: 20 (R5)
0x0482	0xF64550C0  MOVW	R0, #24000
0x0486	0x4285    CMP	R5, R0
0x0488	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC236
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 416 :: 		
0x048A	0x4841    LDR	R0, [PC, #260]
0x048C	0x6800    LDR	R0, [R0, #0]
0x048E	0xF0400101  ORR	R1, R0, #1
0x0492	0x483F    LDR	R0, [PC, #252]
0x0494	0x6001    STR	R1, [R0, #0]
0x0496	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC237
L___Lib_System_105_107_InitialSetUpRCCRCC236:
;__Lib_System_105_107.c, 418 :: 		
0x0498	0x483D    LDR	R0, [PC, #244]
0x049A	0x6801    LDR	R1, [R0, #0]
0x049C	0xF06F0007  MVN	R0, #7
0x04A0	0x4001    ANDS	R1, R0
0x04A2	0x483B    LDR	R0, [PC, #236]
0x04A4	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC237:
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 420 :: 		
0x04A6	0xF7FFFE9D  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 422 :: 		
0x04AA	0x483A    LDR	R0, [PC, #232]
0x04AC	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 423 :: 		
0x04AE	0x483A    LDR	R0, [PC, #232]
0x04B0	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 424 :: 		
0x04B2	0x483A    LDR	R0, [PC, #232]
0x04B4	0xEA020100  AND	R1, R2, R0, LSL #0
0x04B8	0x4839    LDR	R0, [PC, #228]
0x04BA	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 426 :: 		
0x04BC	0xF0020001  AND	R0, R2, #1
0x04C0	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x04C2	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 427 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x04C4	0x4836    LDR	R0, [PC, #216]
0x04C6	0x6800    LDR	R0, [R0, #0]
0x04C8	0xF0000002  AND	R0, R0, #2
0x04CC	0x2800    CMP	R0, #0
0x04CE	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 428 :: 		
0x04D0	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 429 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x04D2	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 426 :: 		
0x04D4	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 429 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 431 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x04D6	0xF4023080  AND	R0, R2, #65536
0x04DA	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x04DC	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 432 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x04DE	0x4830    LDR	R0, [PC, #192]
0x04E0	0x6800    LDR	R0, [R0, #0]
0x04E2	0xF4003000  AND	R0, R0, #131072
0x04E6	0x2800    CMP	R0, #0
0x04E8	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 433 :: 		
0x04EA	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 434 :: 		
; ulRCC_CR end address is: 8 (R2)
0x04EC	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 431 :: 		
0x04EE	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 434 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 436 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x04F0	0xF0025080  AND	R0, R2, #268435456
0x04F4	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC257
;__Lib_System_105_107.c, 437 :: 		
0x04F6	0x482A    LDR	R0, [PC, #168]
0x04F8	0x6800    LDR	R0, [R0, #0]
0x04FA	0xF0405180  ORR	R1, R0, #268435456
0x04FE	0x4828    LDR	R0, [PC, #160]
0x0500	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 438 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x0502	0x4827    LDR	R0, [PC, #156]
0x0504	0x6800    LDR	R0, [R0, #0]
0x0506	0xF0005000  AND	R0, R0, #536870912
0x050A	0x2800    CMP	R0, #0
0x050C	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 439 :: 		
0x050E	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 440 :: 		
; ulRCC_CR end address is: 8 (R2)
0x0510	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC257:
;__Lib_System_105_107.c, 436 :: 		
;__Lib_System_105_107.c, 440 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 442 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x0512	0xF0026080  AND	R0, R2, #67108864
0x0516	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC258
;__Lib_System_105_107.c, 443 :: 		
0x0518	0x4821    LDR	R0, [PC, #132]
0x051A	0x6800    LDR	R0, [R0, #0]
0x051C	0xF0406180  ORR	R1, R0, #67108864
0x0520	0x481F    LDR	R0, [PC, #124]
0x0522	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x0524	0x4611    MOV	R1, R2
0x0526	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 444 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x0528	0x481D    LDR	R0, [PC, #116]
0x052A	0x6800    LDR	R0, [R0, #0]
0x052C	0xF0006000  AND	R0, R0, #134217728
0x0530	0x2800    CMP	R0, #0
0x0532	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 445 :: 		
0x0534	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 446 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x0536	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC258:
;__Lib_System_105_107.c, 442 :: 		
0x0538	0x4611    MOV	R1, R2
0x053A	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 446 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 448 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x053C	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x0540	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC259
;__Lib_System_105_107.c, 449 :: 		
0x0542	0x4817    LDR	R0, [PC, #92]
0x0544	0x6800    LDR	R0, [R0, #0]
0x0546	0xF0407180  ORR	R1, R0, #16777216
0x054A	0x4815    LDR	R0, [PC, #84]
0x054C	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x054E	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 450 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC251:
; ulRCC_CFGR start address is: 4 (R1)
0x0550	0x4813    LDR	R0, [PC, #76]
0x0552	0x6800    LDR	R0, [R0, #0]
0x0554	0xF0007000  AND	R0, R0, #33554432
0x0558	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
;__Lib_System_105_107.c, 451 :: 		
0x055A	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC251
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 452 :: 		
0x055C	0x460A    MOV	R2, R1
0x055E	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC259:
;__Lib_System_105_107.c, 448 :: 		
;__Lib_System_105_107.c, 452 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC250:
;__Lib_System_105_107.c, 456 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
; ulRCC_CFGR start address is: 8 (R2)
0x0560	0x480C    LDR	R0, [PC, #48]
0x0562	0x6800    LDR	R0, [R0, #0]
0x0564	0xF000010C  AND	R1, R0, #12
0x0568	0x0090    LSLS	R0, R2, #2
0x056A	0xF000000C  AND	R0, R0, #12
0x056E	0x4281    CMP	R1, R0
0x0570	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 457 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x0572	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC253
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 458 :: 		
L_end_InitialSetUpRCCRCC2:
0x0574	0xF8DDE000  LDR	LR, [SP, #0]
0x0578	0xB001    ADD	SP, SP, #4
0x057A	0x4770    BX	LR
0x057C	0x00811501  	#352387201
0x0580	0x8402091D  	#152929282
0x0584	0xF6440001  	#128580
0x0588	0x19400001  	#72000
0x058C	0x08FC0000  	__Lib_System_105_107_APBAHBPrescTable+0
0x0590	0x20004002  	FLASH_ACR+0
0x0594	0x10044002  	RCC_CFGR+0
0x0598	0x102C4002  	RCC_CFGR2+0
0x059C	0xFFFF000F  	#1048575
0x05A0	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 360 :: 		
0x01E4	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 363 :: 		
0x01E6	0x4815    LDR	R0, [PC, #84]
0x01E8	0x6800    LDR	R0, [R0, #0]
0x01EA	0xF0400101  ORR	R1, R0, #1
0x01EE	0x4813    LDR	R0, [PC, #76]
0x01F0	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 366 :: 		
0x01F2	0x4913    LDR	R1, [PC, #76]
0x01F4	0x4813    LDR	R0, [PC, #76]
0x01F6	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 369 :: 		
0x01F8	0x4810    LDR	R0, [PC, #64]
0x01FA	0x6801    LDR	R1, [R0, #0]
0x01FC	0x4812    LDR	R0, [PC, #72]
0x01FE	0x4001    ANDS	R1, R0
0x0200	0x480E    LDR	R0, [PC, #56]
0x0202	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
0x0204	0x480D    LDR	R0, [PC, #52]
0x0206	0x6801    LDR	R1, [R0, #0]
0x0208	0xF46F2080  MVN	R0, #262144
0x020C	0x4001    ANDS	R1, R0
0x020E	0x480B    LDR	R0, [PC, #44]
0x0210	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 375 :: 		
0x0212	0x480C    LDR	R0, [PC, #48]
0x0214	0x6801    LDR	R1, [R0, #0]
0x0216	0xF46F00FE  MVN	R0, #8323072
0x021A	0x4001    ANDS	R1, R0
0x021C	0x4809    LDR	R0, [PC, #36]
0x021E	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 378 :: 		
0x0220	0x4806    LDR	R0, [PC, #24]
0x0222	0x6801    LDR	R1, [R0, #0]
0x0224	0xF06F50A0  MVN	R0, #335544320
0x0228	0x4001    ANDS	R1, R0
0x022A	0x4804    LDR	R0, [PC, #16]
0x022C	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 381 :: 		
0x022E	0xF04F0100  MOV	R1, #0
0x0232	0x4806    LDR	R0, [PC, #24]
0x0234	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 385 :: 		
L_end_SystemClockSetDefault:
0x0236	0xB001    ADD	SP, SP, #4
0x0238	0x4770    BX	LR
0x023A	0xBF00    NOP
0x023C	0x10004002  	RCC_CR+0
0x0240	0x0000F0FF  	#-251723776
0x0244	0x10044002  	RCC_CFGR+0
0x0248	0xFFFFFEF6  	#-17367041
0x024C	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 460 :: 		
0x085C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 461 :: 		
0x085E	0x4902    LDR	R1, [PC, #8]
0x0860	0x4802    LDR	R0, [PC, #8]
0x0862	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 462 :: 		
L_end_InitialSetUpFosc:
0x0864	0xB001    ADD	SP, SP, #4
0x0866	0x4770    BX	LR
0x0868	0x19400001  	#72000
0x086C	0x00102000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 311 :: 		
0x08F4	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 312 :: 		
L___GenExcept30:
0x08F6	0xE7FE    B	L___GenExcept30
;__Lib_System_105_107.c, 313 :: 		
L_end___GenExcept:
0x08F8	0xB001    ADD	SP, SP, #4
0x08FA	0x4770    BX	LR
; end of ___GenExcept
0x0924	0xB500    PUSH	(R14)
0x0926	0xF8DFB014  LDR	R11, [PC, #20]
0x092A	0xF8DFA014  LDR	R10, [PC, #20]
0x092E	0xF8DFC014  LDR	R12, [PC, #20]
0x0932	0xF7FFFC4D  BL	464
0x0936	0xBD00    POP	(R15)
0x0938	0x4770    BX	LR
0x093A	0xBF00    NOP
0x093C	0x00002000  	#536870912
0x0940	0x000C2000  	#536870924
0x0944	0x09180000  	#2328
0x09A4	0xB500    PUSH	(R14)
0x09A6	0xF8DFB010  LDR	R11, [PC, #16]
0x09AA	0xF8DFA010  LDR	R10, [PC, #16]
0x09AE	0xF7FFFC89  BL	708
0x09B2	0xBD00    POP	(R15)
0x09B4	0x4770    BX	LR
0x09B6	0xBF00    NOP
0x09B8	0x00002000  	#536870912
0x09BC	0x00142000  	#536870932
_USART1_ISR:
;P6_interrupts.c, 103 :: 		void USART1_ISR() iv IVT_INT_USART1 {
;P6_interrupts.c, 105 :: 		rx_buffer = USART1_DR;                          // RXNE bit interrupt is reset by reading data register
0x0870	0xF84D7D04  PUSH	(R7)
0x0874	0x481A    LDR	R0, [PC, #104]
0x0876	0x6801    LDR	R1, [R0, #0]
0x0878	0x481A    LDR	R0, [PC, #104]
0x087A	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 108 :: 		while ( (USART1_SR & (1 << 7 )) == 0) {}
L_USART1_ISR6:
0x087C	0x481A    LDR	R0, [PC, #104]
0x087E	0x6800    LDR	R0, [R0, #0]
0x0880	0xF0000080  AND	R0, R0, #128
0x0884	0xB900    CBNZ	R0, L_USART1_ISR7
0x0886	0xE7F9    B	L_USART1_ISR6
L_USART1_ISR7:
;P6_interrupts.c, 109 :: 		Delay_ms(10);
0x0888	0xF24D47BF  MOVW	R7, #54463
0x088C	0xF2C00701  MOVT	R7, #1
L_USART1_ISR8:
0x0890	0x1E7F    SUBS	R7, R7, #1
0x0892	0xD1FD    BNE	L_USART1_ISR8
0x0894	0xBF00    NOP
0x0896	0xBF00    NOP
0x0898	0xBF00    NOP
0x089A	0xBF00    NOP
0x089C	0xBF00    NOP
;P6_interrupts.c, 110 :: 		USART1_DR = rx_buffer;
0x089E	0x4811    LDR	R0, [PC, #68]
0x08A0	0x6801    LDR	R1, [R0, #0]
0x08A2	0x480F    LDR	R0, [PC, #60]
0x08A4	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 111 :: 		Delay_ms(10);
0x08A6	0xF24D47BF  MOVW	R7, #54463
0x08AA	0xF2C00701  MOVT	R7, #1
0x08AE	0xBF00    NOP
0x08B0	0xBF00    NOP
L_USART1_ISR10:
0x08B2	0x1E7F    SUBS	R7, R7, #1
0x08B4	0xD1FD    BNE	L_USART1_ISR10
0x08B6	0xBF00    NOP
0x08B8	0xBF00    NOP
0x08BA	0xBF00    NOP
;P6_interrupts.c, 114 :: 		if (rx_buffer >= ASCII_READABLE_CHAR_START) {     // ASCII characters that are not special/invisible
0x08BC	0x4809    LDR	R0, [PC, #36]
0x08BE	0x6800    LDR	R0, [R0, #0]
0x08C0	0x2820    CMP	R0, #32
0x08C2	0xD309    BCC	L_USART1_ISR12
;P6_interrupts.c, 115 :: 		GPIOE_ODR = (++usart_count) << 8;
0x08C4	0x4809    LDR	R0, [PC, #36]
0x08C6	0x6800    LDR	R0, [R0, #0]
0x08C8	0x1C41    ADDS	R1, R0, #1
0x08CA	0x4808    LDR	R0, [PC, #32]
0x08CC	0x6001    STR	R1, [R0, #0]
0x08CE	0x4807    LDR	R0, [PC, #28]
0x08D0	0x6800    LDR	R0, [R0, #0]
0x08D2	0x0201    LSLS	R1, R0, #8
0x08D4	0x4806    LDR	R0, [PC, #24]
0x08D6	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 116 :: 		}
L_USART1_ISR12:
;P6_interrupts.c, 117 :: 		}
L_end_USART1_ISR:
0x08D8	0xF85D7B04  POP	(R7)
0x08DC	0x4770    BX	LR
0x08DE	0xBF00    NOP
0x08E0	0x38044001  	USART1_DR+0
0x08E4	0x000C2000  	_rx_buffer+0
0x08E8	0x38004001  	USART1_SR+0
0x08EC	0x00002000  	P6_interrupts_usart_count+0
0x08F0	0x180C4001  	GPIOE_ODR+0
; end of _USART1_ISR
_MY_SWIER_ISR:
;P6_interrupts.c, 120 :: 		void MY_SWIER_ISR() iv IVT_INT_EXTI15_10 {
;P6_interrupts.c, 121 :: 		Delay_ms(SW_INT_DELAY_MS);
0x0400	0xF84D7D04  PUSH	(R7)
0x0404	0xF24C67BF  MOVW	R7, #50879
0x0408	0xF2C0072D  MOVT	R7, #45
0x040C	0xBF00    NOP
0x040E	0xBF00    NOP
L_MY_SWIER_ISR13:
0x0410	0x1E7F    SUBS	R7, R7, #1
0x0412	0xD1FD    BNE	L_MY_SWIER_ISR13
0x0414	0xBF00    NOP
0x0416	0xBF00    NOP
0x0418	0xBF00    NOP
;P6_interrupts.c, 122 :: 		EXTI_PR |= 1 << 15;                             // Clear the interrupt pending register.
0x041A	0x480A    LDR	R0, [PC, #40]
0x041C	0x6800    LDR	R0, [R0, #0]
0x041E	0xF4404100  ORR	R1, R0, #32768
0x0422	0x4808    LDR	R0, [PC, #32]
0x0424	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 123 :: 		GPIOD_ODR = (GPIOD_ODR & 0xFF00)  + ( (~GPIOD_ODR) & 0x00FF);
0x0426	0x4808    LDR	R0, [PC, #32]
0x0428	0x6800    LDR	R0, [R0, #0]
0x042A	0xF400417F  AND	R1, R0, #65280
0x042E	0x4806    LDR	R0, [PC, #24]
0x0430	0x6800    LDR	R0, [R0, #0]
0x0432	0x43C0    MVN	R0, R0
0x0434	0xF00000FF  AND	R0, R0, #255
0x0438	0x1809    ADDS	R1, R1, R0
0x043A	0x4803    LDR	R0, [PC, #12]
0x043C	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 124 :: 		}
L_end_MY_SWIER_ISR:
0x043E	0xF85D7B04  POP	(R7)
0x0442	0x4770    BX	LR
0x0444	0x04144001  	EXTI_PR+0
0x0448	0x140C4001  	GPIOD_ODR+0
; end of _MY_SWIER_ISR
_TIMER2_ISR:
;P6_interrupts.c, 88 :: 		void TIMER2_ISR() iv IVT_INT_TIM2 {
;P6_interrupts.c, 90 :: 		TIM2_SR &=  ~(1 << 0);                              // Bit[0] = UIF update intrpt flag. 1 to reset
0x0330	0x4814    LDR	R0, [PC, #80]
0x0332	0x6801    LDR	R1, [R0, #0]
0x0334	0xF06F0001  MVN	R0, #1
0x0338	0x4001    ANDS	R1, R0
0x033A	0x4812    LDR	R0, [PC, #72]
0x033C	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 92 :: 		if (timer_run_flag == 1) {
0x033E	0x4812    LDR	R0, [PC, #72]
0x0340	0x6800    LDR	R0, [R0, #0]
0x0342	0x2801    CMP	R0, #1
0x0344	0xD11C    BNE	L_TIMER2_ISR4
;P6_interrupts.c, 93 :: 		GPIOD_ODR &= 0x00FF;                            // Wipe previous value
0x0346	0x4811    LDR	R0, [PC, #68]
0x0348	0x6800    LDR	R0, [R0, #0]
0x034A	0xF00001FF  AND	R1, R0, #255
0x034E	0x480F    LDR	R0, [PC, #60]
0x0350	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 94 :: 		GPIOD_ODR |= ((time_count++) << 8) & 0xFF00;    // Pass the current timer value (shift 8 for High bank) then increment
0x0352	0x480F    LDR	R0, [PC, #60]
0x0354	0x6800    LDR	R0, [R0, #0]
0x0356	0x0200    LSLS	R0, R0, #8
0x0358	0xF400417F  AND	R1, R0, #65280
0x035C	0x480B    LDR	R0, [PC, #44]
0x035E	0x6800    LDR	R0, [R0, #0]
0x0360	0xEA400101  ORR	R1, R0, R1, LSL #0
0x0364	0x4809    LDR	R0, [PC, #36]
0x0366	0x6001    STR	R1, [R0, #0]
0x0368	0x4809    LDR	R0, [PC, #36]
0x036A	0x6800    LDR	R0, [R0, #0]
0x036C	0x1C41    ADDS	R1, R0, #1
0x036E	0x4808    LDR	R0, [PC, #32]
0x0370	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 96 :: 		if (time_count > TIMER_COUNTER_MAX ) {
0x0372	0x4807    LDR	R0, [PC, #28]
0x0374	0x6800    LDR	R0, [R0, #0]
0x0376	0x2863    CMP	R0, #99
0x0378	0xD902    BLS	L_TIMER2_ISR5
;P6_interrupts.c, 97 :: 		time_count = 0;
0x037A	0x2100    MOVS	R1, #0
0x037C	0x4804    LDR	R0, [PC, #16]
0x037E	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 98 :: 		}
L_TIMER2_ISR5:
;P6_interrupts.c, 99 :: 		}
L_TIMER2_ISR4:
;P6_interrupts.c, 100 :: 		}
L_end_TIMER2_ISR:
0x0380	0x4770    BX	LR
0x0382	0xBF00    NOP
0x0384	0x00104000  	TIM2_SR+0
0x0388	0x00042000  	P6_interrupts_timer_run_flag+0
0x038C	0x140C4001  	GPIOD_ODR+0
0x0390	0x00082000  	P6_interrupts_time_count+0
; end of _TIMER2_ISR
_EXTIPB6:
;P6_interrupts.c, 59 :: 		void EXTIPB6() iv IVT_INT_EXTI9_5 ics ICS_AUTO {
0x0394	0xE92D0E80  PUSH	(R7, R9, R10, R11)
0x0398	0xB082    SUB	SP, SP, #8
0x039A	0xF8CDE000  STR	LR, [SP, #0]
;P6_interrupts.c, 63 :: 		EXTI_PR.B6 = 1;                                 // Clear pending regsiter interrupt flag for PB6
0x039E	0x2101    MOVS	R1, #1
0x03A0	0xB249    SXTB	R1, R1
0x03A2	0x4809    LDR	R0, [PC, #36]
0x03A4	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 66 :: 		while (GPIOB_IDR.B6 == 1) {}                    // Wait here until button release
L_EXTIPB60:
0x03A6	0x4809    LDR	R0, [PC, #36]
0x03A8	0x6800    LDR	R0, [R0, #0]
0x03AA	0xB100    CBZ	R0, L_EXTIPB61
0x03AC	0xE7FB    B	L_EXTIPB60
L_EXTIPB61:
;P6_interrupts.c, 74 :: 		temp_val = time_count-1;                         // Subtract 1 because the value timecount will be incremented in TIMER function before next use
0x03AE	0x4808    LDR	R0, [PC, #32]
0x03B0	0x6800    LDR	R0, [R0, #0]
0x03B2	0x1E40    SUBS	R0, R0, #1
0x03B4	0x9001    STR	R0, [SP, #4]
;P6_interrupts.c, 75 :: 		convert_int(&temp_val);
0x03B6	0xA801    ADD	R0, SP, #4
0x03B8	0xF7FFFF4A  BL	_convert_int+0
;P6_interrupts.c, 76 :: 		}
L_end_EXTIPB6:
0x03BC	0xF8DDE000  LDR	LR, [SP, #0]
0x03C0	0xB002    ADD	SP, SP, #8
0x03C2	0xE8BD0E80  POP	(R7, R9, R10, R11)
0x03C6	0x4770    BX	LR
0x03C8	0x82984220  	EXTI_PR+0
0x03CC	0x81184221  	GPIOB_IDR+0
0x03D0	0x00082000  	P6_interrupts_time_count+0
; end of _EXTIPB6
_convert_int:
;P6_interrupts.c, 154 :: 		void convert_int(uint32_t *int_num) {
; int_num start address is: 0 (R0)
0x0250	0xB084    SUB	SP, SP, #16
0x0252	0xF8CDE000  STR	LR, [SP, #0]
; int_num end address is: 0 (R0)
; int_num start address is: 0 (R0)
;P6_interrupts.c, 156 :: 		uint32_t temp_val  = 0;
;P6_interrupts.c, 157 :: 		uint32_t ascii_msb = 0;
0x0256	0xF10D0B04  ADD	R11, SP, #4
0x025A	0xF10B0A0C  ADD	R10, R11, #12
0x025E	0xF8DFC060  LDR	R12, [PC, #96]
0x0262	0xF7FFFFB5  BL	___CC2DW+0
;P6_interrupts.c, 158 :: 		uint32_t ascii_lsb = 0;
;P6_interrupts.c, 159 :: 		uint32_t new_line_LF = 0xA;
;P6_interrupts.c, 162 :: 		if (*int_num > TIMER_COUNTER_MAX ) {
0x0266	0x6801    LDR	R1, [R0, #0]
0x0268	0x2963    CMP	R1, #99
0x026A	0xD900    BLS	L_convert_int15
; int_num end address is: 0 (R0)
;P6_interrupts.c, 163 :: 		return;
0x026C	0xE023    B	L_end_convert_int
;P6_interrupts.c, 164 :: 		}
L_convert_int15:
;P6_interrupts.c, 166 :: 		temp_val = *int_num;                        // Extract the MSB, convert to ASCII
; int_num start address is: 0 (R0)
0x026E	0x6802    LDR	R2, [R0, #0]
; temp_val start address is: 8 (R2)
; int_num end address is: 0 (R0)
; temp_val end address is: 8 (R2)
;P6_interrupts.c, 167 :: 		while (temp_val >= 10) {
L_convert_int16:
; temp_val start address is: 8 (R2)
; int_num start address is: 0 (R0)
0x0270	0x2A0A    CMP	R2, #10
0x0272	0xD306    BCC	L_convert_int17
;P6_interrupts.c, 168 :: 		temp_val /= 10;
0x0274	0x210A    MOVS	R1, #10
0x0276	0xFBB2F1F1  UDIV	R1, R2, R1
0x027A	0x460A    MOV	R2, R1
;P6_interrupts.c, 169 :: 		ascii_msb = temp_val + ASCII_HEX_0;;
0x027C	0x3130    ADDS	R1, #48
0x027E	0x9101    STR	R1, [SP, #4]
;P6_interrupts.c, 170 :: 		}
; temp_val end address is: 8 (R2)
0x0280	0xE7F6    B	L_convert_int16
L_convert_int17:
;P6_interrupts.c, 173 :: 		if ( *int_num > 0 ) {                       // Extract the LSB, convert and set the LSB
0x0282	0x6801    LDR	R1, [R0, #0]
0x0284	0x2900    CMP	R1, #0
0x0286	0xD907    BLS	L_convert_int18
;P6_interrupts.c, 174 :: 		temp_val = (*int_num %10);
0x0288	0x6803    LDR	R3, [R0, #0]
; int_num end address is: 0 (R0)
0x028A	0x220A    MOVS	R2, #10
0x028C	0xFBB3F1F2  UDIV	R1, R3, R2
0x0290	0xFB023111  MLS	R1, R2, R1, R3
;P6_interrupts.c, 175 :: 		ascii_lsb = temp_val + ASCII_HEX_0;
0x0294	0x3130    ADDS	R1, #48
0x0296	0x9102    STR	R1, [SP, #8]
;P6_interrupts.c, 176 :: 		}
L_convert_int18:
;P6_interrupts.c, 178 :: 		Write_data_char (&new_line_LF, NO_NEW_LINE);
0x0298	0xA903    ADD	R1, SP, #12
0x029A	0x4608    MOV	R0, R1
0x029C	0x2100    MOVS	R1, #0
0x029E	0xF7FFFF57  BL	_write_data_char+0
;P6_interrupts.c, 179 :: 		write_data_char (&ascii_msb, NO_NEW_LINE);
0x02A2	0xA901    ADD	R1, SP, #4
0x02A4	0x4608    MOV	R0, R1
0x02A6	0x2100    MOVS	R1, #0
0x02A8	0xF7FFFF52  BL	_write_data_char+0
;P6_interrupts.c, 180 :: 		write_data_char (&ascii_lsb, NEW_LINE_EN);
0x02AC	0xA902    ADD	R1, SP, #8
0x02AE	0x4608    MOV	R0, R1
0x02B0	0x2101    MOVS	R1, #1
0x02B2	0xF7FFFF4D  BL	_write_data_char+0
;P6_interrupts.c, 181 :: 		}
L_end_convert_int:
0x02B6	0xF8DDE000  LDR	LR, [SP, #0]
0x02BA	0xB004    ADD	SP, SP, #16
0x02BC	0x4770    BX	LR
0x02BE	0xBF00    NOP
0x02C0	0x090C0000  	?ICSconvert_int_ascii_msb_L0+0
; end of _convert_int
_write_data_char:
;P6_interrupts.c, 185 :: 		void write_data_char(uint32_t *tx_char, uint8_t new_line) {
; new_line start address is: 4 (R1)
; tx_char start address is: 0 (R0)
0x0150	0xB081    SUB	SP, SP, #4
; new_line end address is: 4 (R1)
; tx_char end address is: 0 (R0)
; tx_char start address is: 0 (R0)
; new_line start address is: 4 (R1)
0x0152	0xF88D1000  STRB	R1, [SP, #0]
; tx_char end address is: 0 (R0)
; new_line end address is: 4 (R1)
0x0156	0x4601    MOV	R1, R0
0x0158	0xF89D0000  LDRB	R0, [SP, #0]
;P6_interrupts.c, 189 :: 		while( (USART1_SR & (1 << 7)) == 0) {}      // Extract the MSB, conver the MSB
L_write_data_char19:
; new_line start address is: 0 (R0)
; tx_char start address is: 4 (R1)
0x015C	0x4A1A    LDR	R2, [PC, #104]
0x015E	0x6812    LDR	R2, [R2, #0]
0x0160	0xF0020280  AND	R2, R2, #128
0x0164	0xB902    CBNZ	R2, L_write_data_char20
0x0166	0xE7F9    B	L_write_data_char19
L_write_data_char20:
;P6_interrupts.c, 191 :: 		Delay_ms(10);
0x0168	0xF24D47BF  MOVW	R7, #54463
0x016C	0xF2C00701  MOVT	R7, #1
L_write_data_char21:
0x0170	0x1E7F    SUBS	R7, R7, #1
0x0172	0xD1FD    BNE	L_write_data_char21
0x0174	0xBF00    NOP
0x0176	0xBF00    NOP
0x0178	0xBF00    NOP
0x017A	0xBF00    NOP
0x017C	0xBF00    NOP
;P6_interrupts.c, 192 :: 		USART1_DR = *tx_char;
0x017E	0x680B    LDR	R3, [R1, #0]
; tx_char end address is: 4 (R1)
0x0180	0x4A12    LDR	R2, [PC, #72]
0x0182	0x6013    STR	R3, [R2, #0]
;P6_interrupts.c, 194 :: 		if (new_line == NEW_LINE_EN) {
0x0184	0x2801    CMP	R0, #1
0x0186	0xD11D    BNE	L_write_data_char23
; new_line end address is: 0 (R0)
;P6_interrupts.c, 195 :: 		Delay_ms(10);
0x0188	0xF24D47BF  MOVW	R7, #54463
0x018C	0xF2C00701  MOVT	R7, #1
L_write_data_char24:
0x0190	0x1E7F    SUBS	R7, R7, #1
0x0192	0xD1FD    BNE	L_write_data_char24
0x0194	0xBF00    NOP
0x0196	0xBF00    NOP
0x0198	0xBF00    NOP
0x019A	0xBF00    NOP
0x019C	0xBF00    NOP
;P6_interrupts.c, 196 :: 		USART1_DR = CHAR_CR;
0x019E	0xF04F030D  MOV	R3, #13
0x01A2	0x4A0A    LDR	R2, [PC, #40]
0x01A4	0x6013    STR	R3, [R2, #0]
;P6_interrupts.c, 197 :: 		Delay_ms(10);
0x01A6	0xF24D47BF  MOVW	R7, #54463
0x01AA	0xF2C00701  MOVT	R7, #1
0x01AE	0xBF00    NOP
0x01B0	0xBF00    NOP
L_write_data_char26:
0x01B2	0x1E7F    SUBS	R7, R7, #1
0x01B4	0xD1FD    BNE	L_write_data_char26
0x01B6	0xBF00    NOP
0x01B8	0xBF00    NOP
0x01BA	0xBF00    NOP
;P6_interrupts.c, 198 :: 		USART1_DR = CHAR_LF;
0x01BC	0xF04F030A  MOV	R3, #10
0x01C0	0x4A02    LDR	R2, [PC, #8]
0x01C2	0x6013    STR	R3, [R2, #0]
;P6_interrupts.c, 199 :: 		}
L_write_data_char23:
;P6_interrupts.c, 200 :: 		}
L_end_write_data_char:
0x01C4	0xB001    ADD	SP, SP, #4
0x01C6	0x4770    BX	LR
0x01C8	0x38004001  	USART1_SR+0
0x01CC	0x38044001  	USART1_DR+0
; end of _write_data_char
_EXTIPA4:
;P6_interrupts.c, 79 :: 		void EXTIPA4() iv IVT_INT_EXTI4 ics ICS_AUTO {
;P6_interrupts.c, 80 :: 		EXTI_PR.PA4 = 1;                                // Clear interrupt pending regsiter
0x03D4	0x2101    MOVS	R1, #1
0x03D6	0xB249    SXTB	R1, R1
0x03D8	0x4805    LDR	R0, [PC, #20]
0x03DA	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 82 :: 		while (GPIOA_IDR.B4 == 1) {}                    // Hold here until button is released
L_EXTIPA42:
0x03DC	0x4805    LDR	R0, [PC, #20]
0x03DE	0x6800    LDR	R0, [R0, #0]
0x03E0	0xB100    CBZ	R0, L_EXTIPA43
0x03E2	0xE7FB    B	L_EXTIPA42
L_EXTIPA43:
;P6_interrupts.c, 83 :: 		timer_run_flag = ~timer_run_flag;               // Flip the flag switch to toggle the timer counter on PORTD
0x03E4	0x4804    LDR	R0, [PC, #16]
0x03E6	0x6800    LDR	R0, [R0, #0]
0x03E8	0x43C1    MVN	R1, R0
0x03EA	0x4803    LDR	R0, [PC, #12]
0x03EC	0x6001    STR	R1, [R0, #0]
;P6_interrupts.c, 85 :: 		}
L_end_EXTIPA4:
0x03EE	0x4770    BX	LR
0x03F0	0x82904220  	EXTI_PR+0
0x03F4	0x01104221  	GPIOA_IDR+0
0x03F8	0x00042000  	P6_interrupts_timer_run_flag+0
; end of _EXTIPA4
;__Lib_System_105_107.c,388 :: __Lib_System_105_107_APBAHBPrescTable [16]
0x08FC	0x00000000 ;__Lib_System_105_107_APBAHBPrescTable+0
0x0900	0x04030201 ;__Lib_System_105_107_APBAHBPrescTable+4
0x0904	0x04030201 ;__Lib_System_105_107_APBAHBPrescTable+8
0x0908	0x09080706 ;__Lib_System_105_107_APBAHBPrescTable+12
; end of __Lib_System_105_107_APBAHBPrescTable
;P6_interrupts.c,0 :: ?ICSconvert_int_ascii_msb_L0 [4]
0x090C	0x00000000 ;?ICSconvert_int_ascii_msb_L0+0
; end of ?ICSconvert_int_ascii_msb_L0
;P6_interrupts.c,0 :: ?ICSconvert_int_ascii_lsb_L0 [4]
0x0910	0x00000000 ;?ICSconvert_int_ascii_lsb_L0+0
; end of ?ICSconvert_int_ascii_lsb_L0
;P6_interrupts.c,0 :: ?ICSconvert_int_new_line_LF_L0 [4]
0x0914	0x0000000A ;?ICSconvert_int_new_line_LF_L0+0
; end of ?ICSconvert_int_new_line_LF_L0
;P6_interrupts.c,0 :: ?ICSP6_interrupts_usart_count [4]
0x0918	0x00000000 ;?ICSP6_interrupts_usart_count+0
; end of ?ICSP6_interrupts_usart_count
;P6_interrupts.c,0 :: ?ICSP6_interrupts_timer_run_flag [4]
0x091C	0x00000001 ;?ICSP6_interrupts_timer_run_flag+0
; end of ?ICSP6_interrupts_timer_run_flag
;P6_interrupts.c,0 :: ?ICSP6_interrupts_time_count [4]
0x0920	0x00000000 ;?ICSP6_interrupts_time_count+0
; end of ?ICSP6_interrupts_time_count
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150     [128]    _write_data_char
0x01D0      [20]    ___CC2DW
0x01E4     [108]    __Lib_System_105_107_SystemClockSetDefault
0x0250     [116]    _convert_int
0x02C4      [58]    ___FillZeros
0x0300      [48]    _initClock72MHz
0x0330     [100]    _TIMER2_ISR
0x0394      [64]    _EXTIPB6
0x03D4      [40]    _EXTIPA4
0x0400      [76]    _MY_SWIER_ISR
0x044C     [344]    __Lib_System_105_107_InitialSetUpRCCRCC2
0x05A8     [692]    _main
0x085C      [20]    __Lib_System_105_107_InitialSetUpFosc
0x0870     [132]    _USART1_ISR
0x08F4       [8]    ___GenExcept
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [4]    P6_interrupts_usart_count
0x20000004       [4]    P6_interrupts_timer_run_flag
0x20000008       [4]    P6_interrupts_time_count
0x2000000C       [4]    _rx_buffer
0x20000010       [4]    ___System_CLOCK_IN_KHZ
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x08FC      [16]    __Lib_System_105_107_APBAHBPrescTable
0x090C       [4]    ?ICSconvert_int_ascii_msb_L0
0x0910       [4]    ?ICSconvert_int_ascii_lsb_L0
0x0914       [4]    ?ICSconvert_int_new_line_LF_L0
0x0918       [4]    ?ICSP6_interrupts_usart_count
0x091C       [4]    ?ICSP6_interrupts_timer_run_flag
0x0920       [4]    ?ICSP6_interrupts_time_count
