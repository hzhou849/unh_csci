;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/6/2022 9:35:26 PM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x08010000  	2049
0x0008	0x069D0000  	1693
0x000C	0x069D0000  	1693
0x0010	0x069D0000  	1693
0x0014	0x069D0000  	1693
0x0018	0x069D0000  	1693
0x001C	0x069D0000  	1693
0x0020	0x069D0000  	1693
0x0024	0x069D0000  	1693
0x0028	0x069D0000  	1693
0x002C	0x069D0000  	1693
0x0030	0x069D0000  	1693
0x0034	0x069D0000  	1693
0x0038	0x069D0000  	1693
0x003C	0x069D0000  	1693
0x0040	0x069D0000  	1693
0x0044	0x069D0000  	1693
0x0048	0x069D0000  	1693
0x004C	0x069D0000  	1693
0x0050	0x069D0000  	1693
0x0054	0x069D0000  	1693
0x0058	0x069D0000  	1693
0x005C	0x069D0000  	1693
0x0060	0x069D0000  	1693
0x0064	0x069D0000  	1693
0x0068	0x069D0000  	1693
0x006C	0x069D0000  	1693
0x0070	0x069D0000  	1693
0x0074	0x069D0000  	1693
0x0078	0x069D0000  	1693
0x007C	0x069D0000  	1693
0x0080	0x069D0000  	1693
0x0084	0x069D0000  	1693
0x0088	0x069D0000  	1693
0x008C	0x069D0000  	1693
0x0090	0x069D0000  	1693
0x0094	0x069D0000  	1693
0x0098	0x069D0000  	1693
0x009C	0x069D0000  	1693
0x00A0	0x069D0000  	1693
0x00A4	0x069D0000  	1693
0x00A8	0x069D0000  	1693
0x00AC	0x069D0000  	1693
0x00B0	0x069D0000  	1693
0x00B4	0x069D0000  	1693
0x00B8	0x069D0000  	1693
0x00BC	0x069D0000  	1693
0x00C0	0x069D0000  	1693
0x00C4	0x069D0000  	1693
0x00C8	0x069D0000  	1693
0x00CC	0x069D0000  	1693
0x00D0	0x069D0000  	1693
0x00D4	0x069D0000  	1693
0x00D8	0x069D0000  	1693
0x00DC	0x069D0000  	1693
0x00E0	0x069D0000  	1693
0x00E4	0x069D0000  	1693
0x00E8	0x069D0000  	1693
0x00EC	0x069D0000  	1693
0x00F0	0x069D0000  	1693
0x00F4	0x069D0000  	1693
0x00F8	0x069D0000  	1693
0x00FC	0x069D0000  	1693
0x0100	0x069D0000  	1693
0x0104	0x069D0000  	1693
0x0108	0x069D0000  	1693
0x010C	0x069D0000  	1693
0x0110	0x069D0000  	1693
0x0114	0x069D0000  	1693
0x0118	0x069D0000  	1693
0x011C	0x069D0000  	1693
0x0120	0x069D0000  	1693
0x0124	0x069D0000  	1693
0x0128	0x069D0000  	1693
0x012C	0x069D0000  	1693
0x0130	0x069D0000  	1693
0x0134	0x069D0000  	1693
0x0138	0x069D0000  	1693
0x013C	0x069D0000  	1693
0x0140	0x069D0000  	1693
0x0144	0x069D0000  	1693
0x0148	0x069D0000  	1693
0x014C	0x069D0000  	1693
; end of ____SysVT
_main:
;P4_bonus_obj.c, 309 :: 		void main() {
0x0800	0xB0F7    SUB	SP, SP, #476
0x0802	0xF7FFFF4F  BL	1700
0x0806	0xF000FA3D  BL	3204
0x080A	0xF7FFFF3D  BL	1672
;P4_bonus_obj.c, 312 :: 		uint8_t  loop_on          = TRUE;
; loop_on start address is: 8 (R2)
0x080E	0x2201    MOVS	R2, #1
;P4_bonus_obj.c, 313 :: 		uint32_t char_counter     = 0;
; char_counter start address is: 12 (R3)
0x0810	0xF04F0300  MOV	R3, #0
;P4_bonus_obj.c, 314 :: 		uint32_t lower_case_count = 0;
;P4_bonus_obj.c, 315 :: 		uint32_t upper_case_count = 0;
;P4_bonus_obj.c, 316 :: 		uint32_t pivot_pos        = 0;
0x0814	0xF50D7B8E  ADD	R11, SP, #284
0x0818	0xF10B0ABF  ADD	R10, R11, #191
0x081C	0xF8DFC318  LDR	R12, [PC, #792]
0x0820	0xF7FFFEBA  BL	___CC2DW+0
;P4_bonus_obj.c, 317 :: 		uint32_t min_pos          = 0;
;P4_bonus_obj.c, 323 :: 		uint32_t list_size = 0;
;P4_bonus_obj.c, 327 :: 		uint8_t title_divider[]   = "=============================================================";
;P4_bonus_obj.c, 328 :: 		uint8_t title_cr_lf[]     = "\x0D\x0A";
;P4_bonus_obj.c, 329 :: 		uint8_t title_prompt[]    = "[P4 BONUS] - Please enter up to 23 alphabets to complete sequence:  ";
;P4_bonus_obj.c, 330 :: 		uint8_t title_upper[]     = "Upper case: ";
;P4_bonus_obj.c, 331 :: 		uint8_t title_lower[]     = "Lower case: ";
;P4_bonus_obj.c, 332 :: 		uint8_t title_non_alpha[] = "Non-alphabet: ";
;P4_bonus_obj.c, 333 :: 		uint8_t str_tally[]       = "Tally: ";
;P4_bonus_obj.c, 341 :: 		RCC_CR = 0x05010081;
0x0824	0x49C5    LDR	R1, [PC, #788]
0x0826	0x48C6    LDR	R0, [PC, #792]
0x0828	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 346 :: 		RCC_CFGR = 0x001D8402;
0x082A	0x49C6    LDR	R1, [PC, #792]
0x082C	0x48C6    LDR	R0, [PC, #792]
0x082E	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 352 :: 		RCC_CFGR2 = 0x00010644;
0x0830	0x49C6    LDR	R1, [PC, #792]
0x0832	0x48C7    LDR	R0, [PC, #796]
0x0834	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 355 :: 		RCC_APB2ENR |= 0x00000001; 	// Alternate function bit AFIOEN bit[0]. USART1 uses AF for PA9/PA10
0x0836	0x48C7    LDR	R0, [PC, #796]
0x0838	0x6800    LDR	R0, [R0, #0]
0x083A	0xF0400101  ORR	R1, R0, #1
0x083E	0x48C5    LDR	R0, [PC, #788]
0x0840	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 356 :: 		AFIO_MAPR    = 0x00000000; 	// Bit[2] USART1 REMAP 0: No Remap (Tx=PA9; Rx=PA10)
0x0842	0x2100    MOVS	R1, #0
0x0844	0x48C4    LDR	R0, [PC, #784]
0x0846	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 358 :: 		RCC_APB2ENR |= 1 << 2;		// Enable GPIO Clock - Port A for USART Pins
0x0848	0x48C2    LDR	R0, [PC, #776]
0x084A	0x6800    LDR	R0, [R0, #0]
0x084C	0xF0400104  ORR	R1, R0, #4
0x0850	0x48C0    LDR	R0, [PC, #768]
0x0852	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 359 :: 		RCC_APB2ENR |= 1 << 5;		// Enable GPIO Clock - Port D for LEDs
0x0854	0x48BF    LDR	R0, [PC, #764]
0x0856	0x6800    LDR	R0, [R0, #0]
0x0858	0xF0400120  ORR	R1, R0, #32
0x085C	0x48BD    LDR	R0, [PC, #756]
0x085E	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 360 :: 		RCC_APB2ENR |= 1 << 14; 	// Enable USART1 Clock
0x0860	0x48BC    LDR	R0, [PC, #752]
0x0862	0x6800    LDR	R0, [R0, #0]
0x0864	0xF4404180  ORR	R1, R0, #16384
0x0868	0x48BA    LDR	R0, [PC, #744]
0x086A	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 362 :: 		GPIOA_CRH &= ~(0xFF << 4);  // Shift 4 bits left to clear bits[9:4] for PA9/PA10 0000 0FF0 -> mask with  FFFF F00F
0x086C	0x48BB    LDR	R0, [PC, #748]
0x086E	0x6801    LDR	R1, [R0, #0]
0x0870	0xF24F000F  MOVW	R0, #61455
0x0874	0x4001    ANDS	R1, R0
0x0876	0x48B9    LDR	R0, [PC, #740]
0x0878	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 363 :: 		GPIOA_CRH |= (0x0B << 4) ;  // USART1 Tx/PA9 set to CNF=AFoutput push-pull b10; MODE= output-50Hz b11;
0x087A	0x48B8    LDR	R0, [PC, #736]
0x087C	0x6800    LDR	R0, [R0, #0]
0x087E	0xF04001B0  ORR	R1, R0, #176
0x0882	0x48B6    LDR	R0, [PC, #728]
0x0884	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 364 :: 		GPIOA_CRH |= (0x04 << 8);   // USART1 Rx/PA10 set CNF=Input-floating b01; MODE=Input mode b00;
0x0886	0x48B5    LDR	R0, [PC, #724]
0x0888	0x6800    LDR	R0, [R0, #0]
0x088A	0xF4406180  ORR	R1, R0, #1024
0x088E	0x48B3    LDR	R0, [PC, #716]
0x0890	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 365 :: 		GPIOA_CRL |= (0x00000004);  // Set PA0 to input
0x0892	0x48B3    LDR	R0, [PC, #716]
0x0894	0x6800    LDR	R0, [R0, #0]
0x0896	0xF0400104  ORR	R1, R0, #4
0x089A	0x48B1    LDR	R0, [PC, #708]
0x089C	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 366 :: 		GPIOD_CRH = GPIO_OUTPUT;    // Set Port D High bank to GPIO output
0x089E	0xF04F3133  MOV	R1, #858993459
0x08A2	0x48B0    LDR	R0, [PC, #704]
0x08A4	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 367 :: 		GPIOD_CRL = GPIO_OUTPUT;    // Set Port D Low bank to GPIO output
0x08A6	0xF04F3133  MOV	R1, #858993459
0x08AA	0x48AF    LDR	R0, [PC, #700]
0x08AC	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 372 :: 		USART1_BRR = 0x00000506;
0x08AE	0xF2405106  MOVW	R1, #1286
0x08B2	0x48AE    LDR	R0, [PC, #696]
0x08B4	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 382 :: 		USART1_CR1 &= ~(1<<12);          // Force 8 data bits. M bit is set to 0.
0x08B6	0x48AE    LDR	R0, [PC, #696]
0x08B8	0x6801    LDR	R1, [R0, #0]
0x08BA	0xF46F5080  MVN	R0, #4096
0x08BE	0x4001    ANDS	R1, R0
0x08C0	0x48AB    LDR	R0, [PC, #684]
0x08C2	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 383 :: 		USART1_CR2 &= ~(3<<12);          // Force 1 stop bit
0x08C4	0x48AB    LDR	R0, [PC, #684]
0x08C6	0x6801    LDR	R1, [R0, #0]
0x08C8	0xF46F5040  MVN	R0, #12288
0x08CC	0x4001    ANDS	R1, R0
0x08CE	0x48A9    LDR	R0, [PC, #676]
0x08D0	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 384 :: 		USART1_CR3 &= ~(3<<8);           // Force no flow control and no DMA for USART1
0x08D2	0x48A9    LDR	R0, [PC, #676]
0x08D4	0x6801    LDR	R1, [R0, #0]
0x08D6	0xF46F7040  MVN	R0, #768
0x08DA	0x4001    ANDS	R1, R0
0x08DC	0x48A6    LDR	R0, [PC, #664]
0x08DE	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 385 :: 		USART1_CR1 &= ~(3<<9);           // Force no parity and no parity control
0x08E0	0x48A3    LDR	R0, [PC, #652]
0x08E2	0x6801    LDR	R1, [R0, #0]
0x08E4	0xF46F60C0  MVN	R0, #1536
0x08E8	0x4001    ANDS	R1, R0
0x08EA	0x48A1    LDR	R0, [PC, #644]
0x08EC	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 386 :: 		USART1_CR1 |= 3<<2;              // RX, TX enable
0x08EE	0x48A0    LDR	R0, [PC, #640]
0x08F0	0x6800    LDR	R0, [R0, #0]
0x08F2	0xF040010C  ORR	R1, R0, #12
0x08F6	0x489E    LDR	R0, [PC, #632]
0x08F8	0x6001    STR	R1, [R0, #0]
;P4_bonus_obj.c, 387 :: 		Delay_ms(100);					// Allow some time for USART to complete initialization.
0x08FA	0xF644777F  MOVW	R7, #20351
0x08FE	0xF2C00712  MOVT	R7, #18
L_main63:
0x0902	0x1E7F    SUBS	R7, R7, #1
0x0904	0xD1FD    BNE	L_main63
0x0906	0xBF00    NOP
0x0908	0xBF00    NOP
0x090A	0xBF00    NOP
0x090C	0xBF00    NOP
0x090E	0xBF00    NOP
;P4_bonus_obj.c, 388 :: 		USART1_CR1 |= 1 << 13;			//** NOTE USART1 Enable must be done after configuration is complete
0x0910	0x4897    LDR	R0, [PC, #604]
0x0912	0x6800    LDR	R0, [R0, #0]
0x0914	0xF4405100  ORR	R1, R0, #8192
0x0918	0x4895    LDR	R0, [PC, #596]
0x091A	0x6001    STR	R1, [R0, #0]
; loop_on end address is: 8 (R2)
; char_counter end address is: 12 (R3)
0x091C	0xFA5FFB82  UXTB	R11, R2
0x0920	0x469A    MOV	R10, R3
;P4_bonus_obj.c, 391 :: 		for (;;) {
L_main65:
;P4_bonus_obj.c, 394 :: 		arr_tally[tally_upper] = 0;
; char_counter start address is: 40 (R10)
; loop_on start address is: 44 (R11)
0x0922	0xAA41    ADD	R2, SP, #260
0x0924	0x2000    MOVS	R0, #0
0x0926	0x6010    STR	R0, [R2, #0]
;P4_bonus_obj.c, 395 :: 		arr_tally[tally_lower] = 0;
0x0928	0x1D11    ADDS	R1, R2, #4
0x092A	0x2000    MOVS	R0, #0
0x092C	0x6008    STR	R0, [R1, #0]
;P4_bonus_obj.c, 396 :: 		arr_tally[tally_non_alpha] = 0;
0x092E	0xF2020108  ADDW	R1, R2, #8
0x0932	0x2000    MOVS	R0, #0
0x0934	0x6008    STR	R0, [R1, #0]
;P4_bonus_obj.c, 397 :: 		arr_tally[tally_alpha] = 0;
0x0936	0xF202010C  ADDW	R1, R2, #12
0x093A	0x2000    MOVS	R0, #0
0x093C	0x6008    STR	R0, [R1, #0]
;P4_bonus_obj.c, 400 :: 		print_string(&title_cr_lf, NEW_LINE_EN);
0x093E	0xF50D70B1  ADD	R0, SP, #354
0x0942	0x2101    MOVS	R1, #1
0x0944	0xF7FFFE58  BL	_print_string+0
;P4_bonus_obj.c, 401 :: 		print_string(&title_divider, NEW_LINE_EN);
0x0948	0xA849    ADD	R0, SP, #292
0x094A	0x2101    MOVS	R1, #1
0x094C	0xF7FFFE54  BL	_print_string+0
;P4_bonus_obj.c, 402 :: 		print_string(&title_prompt, NEW_LINE_EN);
0x0950	0xF20D1065  ADDW	R0, SP, #357
0x0954	0x2101    MOVS	R1, #1
0x0956	0xF7FFFE4F  BL	_print_string+0
; loop_on end address is: 44 (R11)
; char_counter end address is: 40 (R10)
0x095A	0x4654    MOV	R4, R10
0x095C	0xFA5FF38B  UXTB	R3, R11
;P4_bonus_obj.c, 406 :: 		while ( (char_counter < MAX_BUFFER_SIZE) && (loop_on == TRUE) ) {
L_main68:
; loop_on start address is: 12 (R3)
; char_counter start address is: 16 (R4)
0x0960	0x2C40    CMP	R4, #64
0x0962	0xF080808A  BCS	L__main111
0x0966	0x2B01    CMP	R3, #1
0x0968	0xF0408087  BNE	L__main110
L__main97:
;P4_bonus_obj.c, 407 :: 		read_data( &rx_buffer[char_counter] );
0x096C	0xA901    ADD	R1, SP, #4
0x096E	0x00A0    LSLS	R0, R4, #2
0x0970	0x1808    ADDS	R0, R1, R0
0x0972	0xF7FFFE1D  BL	_read_data+0
;P4_bonus_obj.c, 409 :: 		if ( (rx_buffer[char_counter] > 0x1F) && (rx_buffer[char_counter != NULL_BYTE]) ) {
0x0976	0xA901    ADD	R1, SP, #4
0x0978	0x00A0    LSLS	R0, R4, #2
0x097A	0x1808    ADDS	R0, R1, R0
0x097C	0x6800    LDR	R0, [R0, #0]
0x097E	0x281F    CMP	R0, #31
0x0980	0xF2408075  BLS	L__main113
0x0984	0x2C00    CMP	R4, #0
0x0986	0xF2400000  MOVW	R0, #0
0x098A	0xD000    BEQ	L__main124
0x098C	0x2001    MOVS	R0, #1
L__main124:
0x098E	0xA901    ADD	R1, SP, #4
0x0990	0x0080    LSLS	R0, R0, #2
0x0992	0x1808    ADDS	R0, R1, R0
0x0994	0x6800    LDR	R0, [R0, #0]
0x0996	0x2800    CMP	R0, #0
0x0998	0xF000806E  BEQ	L__main114
L__main96:
;P4_bonus_obj.c, 415 :: 		if ( (rx_buffer[char_counter] >= 0x41) && (rx_buffer[char_counter] <= 0x5A) ) {
0x099C	0xA901    ADD	R1, SP, #4
0x099E	0x00A0    LSLS	R0, R4, #2
0x09A0	0x1808    ADDS	R0, R1, R0
0x09A2	0x6800    LDR	R0, [R0, #0]
0x09A4	0x2841    CMP	R0, #65
0x09A6	0xD30E    BCC	L__main99
0x09A8	0xA901    ADD	R1, SP, #4
0x09AA	0x00A0    LSLS	R0, R4, #2
0x09AC	0x1808    ADDS	R0, R1, R0
0x09AE	0x6800    LDR	R0, [R0, #0]
0x09B0	0x285A    CMP	R0, #90
0x09B2	0xD808    BHI	L__main98
L__main95:
;P4_bonus_obj.c, 416 :: 		arr_tally[tally_upper]++;
0x09B4	0xA941    ADD	R1, SP, #260
0x09B6	0x6808    LDR	R0, [R1, #0]
0x09B8	0x1C40    ADDS	R0, R0, #1
0x09BA	0x6008    STR	R0, [R1, #0]
;P4_bonus_obj.c, 417 :: 		arr_tally[tally_alpha]++;
0x09BC	0x310C    ADDS	R1, #12
0x09BE	0x6808    LDR	R0, [R1, #0]
0x09C0	0x1C40    ADDS	R0, R0, #1
0x09C2	0x6008    STR	R0, [R1, #0]
;P4_bonus_obj.c, 418 :: 		}  // If Lowercase
0x09C4	0xE041    B	L_main78
;P4_bonus_obj.c, 415 :: 		if ( (rx_buffer[char_counter] >= 0x41) && (rx_buffer[char_counter] <= 0x5A) ) {
L__main99:
L__main98:
;P4_bonus_obj.c, 419 :: 		else if ( (rx_buffer[char_counter] >= 0x61) && (rx_buffer[char_counter] <= 0x7A) ) {
0x09C6	0xA901    ADD	R1, SP, #4
0x09C8	0x00A0    LSLS	R0, R4, #2
0x09CA	0x1808    ADDS	R0, R1, R0
0x09CC	0x6800    LDR	R0, [R0, #0]
0x09CE	0x2861    CMP	R0, #97
0x09D0	0xD310    BCC	L__main101
0x09D2	0xA901    ADD	R1, SP, #4
0x09D4	0x00A0    LSLS	R0, R4, #2
0x09D6	0x1808    ADDS	R0, R1, R0
0x09D8	0x6800    LDR	R0, [R0, #0]
0x09DA	0x287A    CMP	R0, #122
0x09DC	0xD80A    BHI	L__main100
L__main94:
;P4_bonus_obj.c, 420 :: 		arr_tally[tally_lower]++;
0x09DE	0xAA41    ADD	R2, SP, #260
0x09E0	0x1D11    ADDS	R1, R2, #4
0x09E2	0x6808    LDR	R0, [R1, #0]
0x09E4	0x1C40    ADDS	R0, R0, #1
0x09E6	0x6008    STR	R0, [R1, #0]
;P4_bonus_obj.c, 421 :: 		arr_tally[tally_alpha]++;
0x09E8	0xF202010C  ADDW	R1, R2, #12
0x09EC	0x6808    LDR	R0, [R1, #0]
0x09EE	0x1C40    ADDS	R0, R0, #1
0x09F0	0x6008    STR	R0, [R1, #0]
;P4_bonus_obj.c, 422 :: 		}  // else non-alpha, range is specifed to avoid unseen special characters
0x09F2	0xE02A    B	L_main82
;P4_bonus_obj.c, 419 :: 		else if ( (rx_buffer[char_counter] >= 0x61) && (rx_buffer[char_counter] <= 0x7A) ) {
L__main101:
L__main100:
;P4_bonus_obj.c, 423 :: 		else if ( (rx_buffer[char_counter] >=0x20) || (rx_buffer[char_counter] <=0x40)
0x09F4	0xA901    ADD	R1, SP, #4
0x09F6	0x00A0    LSLS	R0, R4, #2
0x09F8	0x1808    ADDS	R0, R1, R0
0x09FA	0x6800    LDR	R0, [R0, #0]
0x09FC	0x2820    CMP	R0, #32
0x09FE	0xD21E    BCS	L__main107
0x0A00	0xA901    ADD	R1, SP, #4
0x0A02	0x00A0    LSLS	R0, R4, #2
0x0A04	0x1808    ADDS	R0, R1, R0
0x0A06	0x6800    LDR	R0, [R0, #0]
0x0A08	0x2840    CMP	R0, #64
0x0A0A	0xD918    BLS	L__main106
;P4_bonus_obj.c, 424 :: 		|| (rx_buffer[char_counter] >=0x5B) || (rx_buffer[char_counter] <= 0x60)
0x0A0C	0xA901    ADD	R1, SP, #4
0x0A0E	0x00A0    LSLS	R0, R4, #2
0x0A10	0x1808    ADDS	R0, R1, R0
0x0A12	0x6800    LDR	R0, [R0, #0]
0x0A14	0x285B    CMP	R0, #91
0x0A16	0xD212    BCS	L__main105
0x0A18	0xA901    ADD	R1, SP, #4
0x0A1A	0x00A0    LSLS	R0, R4, #2
0x0A1C	0x1808    ADDS	R0, R1, R0
0x0A1E	0x6800    LDR	R0, [R0, #0]
0x0A20	0x2860    CMP	R0, #96
0x0A22	0xD90C    BLS	L__main104
;P4_bonus_obj.c, 425 :: 		|| (rx_buffer[char_counter] >=0x7B) || (rx_buffer[char_counter] <= 0x7F)) {
0x0A24	0xA901    ADD	R1, SP, #4
0x0A26	0x00A0    LSLS	R0, R4, #2
0x0A28	0x1808    ADDS	R0, R1, R0
0x0A2A	0x6800    LDR	R0, [R0, #0]
0x0A2C	0x287B    CMP	R0, #123
0x0A2E	0xD206    BCS	L__main103
0x0A30	0xA901    ADD	R1, SP, #4
0x0A32	0x00A0    LSLS	R0, R4, #2
0x0A34	0x1808    ADDS	R0, R1, R0
0x0A36	0x6800    LDR	R0, [R0, #0]
0x0A38	0x287F    CMP	R0, #127
0x0A3A	0xD900    BLS	L__main102
0x0A3C	0xE005    B	L_main85
;P4_bonus_obj.c, 423 :: 		else if ( (rx_buffer[char_counter] >=0x20) || (rx_buffer[char_counter] <=0x40)
L__main107:
L__main106:
;P4_bonus_obj.c, 424 :: 		|| (rx_buffer[char_counter] >=0x5B) || (rx_buffer[char_counter] <= 0x60)
L__main105:
L__main104:
;P4_bonus_obj.c, 425 :: 		|| (rx_buffer[char_counter] >=0x7B) || (rx_buffer[char_counter] <= 0x7F)) {
L__main103:
L__main102:
;P4_bonus_obj.c, 427 :: 		arr_tally[tally_non_alpha]++;
0x0A3E	0xA841    ADD	R0, SP, #260
0x0A40	0xF2000108  ADDW	R1, R0, #8
0x0A44	0x6808    LDR	R0, [R1, #0]
0x0A46	0x1C40    ADDS	R0, R0, #1
0x0A48	0x6008    STR	R0, [R1, #0]
;P4_bonus_obj.c, 428 :: 		}
L_main85:
L_main82:
L_main78:
;P4_bonus_obj.c, 431 :: 		char_counter++;
0x0A4A	0x1C60    ADDS	R0, R4, #1
; char_counter end address is: 16 (R4)
; char_counter start address is: 8 (R2)
0x0A4C	0x4602    MOV	R2, R0
;P4_bonus_obj.c, 434 :: 		if ( arr_tally[tally_alpha] >= MAX_ALPHABET_COUNT) {
0x0A4E	0xA841    ADD	R0, SP, #260
0x0A50	0x300C    ADDS	R0, #12
0x0A52	0x6800    LDR	R0, [R0, #0]
0x0A54	0x2817    CMP	R0, #23
0x0A56	0xD307    BCC	L__main112
;P4_bonus_obj.c, 435 :: 		loop_on = FALSE;
0x0A58	0x2300    MOVS	R3, #0
;P4_bonus_obj.c, 436 :: 		rx_buffer[char_counter] = '\0';
0x0A5A	0xA901    ADD	R1, SP, #4
0x0A5C	0x0090    LSLS	R0, R2, #2
0x0A5E	0x1809    ADDS	R1, R1, R0
0x0A60	0x2000    MOVS	R0, #0
0x0A62	0x6008    STR	R0, [R1, #0]
; loop_on end address is: 12 (R3)
0x0A64	0xB2D8    UXTB	R0, R3
;P4_bonus_obj.c, 437 :: 		}
0x0A66	0xE000    B	L_main86
L__main112:
;P4_bonus_obj.c, 434 :: 		if ( arr_tally[tally_alpha] >= MAX_ALPHABET_COUNT) {
0x0A68	0xB2D8    UXTB	R0, R3
;P4_bonus_obj.c, 437 :: 		}
L_main86:
;P4_bonus_obj.c, 409 :: 		if ( (rx_buffer[char_counter] > 0x1F) && (rx_buffer[char_counter != NULL_BYTE]) ) {
; loop_on start address is: 0 (R0)
0x0A6A	0x4611    MOV	R1, R2
; char_counter end address is: 8 (R2)
; loop_on end address is: 0 (R0)
0x0A6C	0xE001    B	L__main109
L__main113:
0x0A6E	0xB2D8    UXTB	R0, R3
0x0A70	0x4621    MOV	R1, R4
L__main109:
; loop_on start address is: 0 (R0)
; char_counter start address is: 4 (R1)
0x0A72	0xB2C3    UXTB	R3, R0
; loop_on end address is: 0 (R0)
; char_counter end address is: 4 (R1)
0x0A74	0x460C    MOV	R4, R1
0x0A76	0xE7FF    B	L__main108
L__main114:
L__main108:
;P4_bonus_obj.c, 439 :: 		}
; char_counter start address is: 16 (R4)
; loop_on start address is: 12 (R3)
; loop_on end address is: 12 (R3)
0x0A78	0xE772    B	L_main68
;P4_bonus_obj.c, 406 :: 		while ( (char_counter < MAX_BUFFER_SIZE) && (loop_on == TRUE) ) {
L__main111:
L__main110:
;P4_bonus_obj.c, 444 :: 		write_data(&rx_buffer, NO_NEW_LINE);
0x0A7A	0xA801    ADD	R0, SP, #4
0x0A7C	0x9400    STR	R4, [SP, #0]
0x0A7E	0x2100    MOVS	R1, #0
0x0A80	0xF7FFFBCE  BL	_write_data+0
0x0A84	0x9C00    LDR	R4, [SP, #0]
;P4_bonus_obj.c, 447 :: 		pivot_pos = (char_counter - 1);
0x0A86	0x1E60    SUBS	R0, R4, #1
0x0A88	0x9047    STR	R0, [SP, #284]
;P4_bonus_obj.c, 448 :: 		q_sort (&rx_buffer, &pivot_pos, &min_pos);
0x0A8A	0xAA48    ADD	R2, SP, #288
0x0A8C	0xA947    ADD	R1, SP, #284
0x0A8E	0xA801    ADD	R0, SP, #4
0x0A90	0x9400    STR	R4, [SP, #0]
0x0A92	0xF7FFFC01  BL	_q_sort+0
;P4_bonus_obj.c, 449 :: 		write_data(&rx_buffer, NO_NEW_LINE);
0x0A96	0xA801    ADD	R0, SP, #4
0x0A98	0x2100    MOVS	R1, #0
0x0A9A	0xF7FFFBC1  BL	_write_data+0
;P4_bonus_obj.c, 453 :: 		print_string(title_cr_lf, NO_NEW_LINE);
0x0A9E	0xF50D70B1  ADD	R0, SP, #354
0x0AA2	0x2100    MOVS	R1, #0
0x0AA4	0xF7FFFDA8  BL	_print_string+0
;P4_bonus_obj.c, 454 :: 		print_string(&str_tally, NEW_LINE_EN);
0x0AA8	0xF20D10D3  ADDW	R0, SP, #467
0x0AAC	0x2101    MOVS	R1, #1
0x0AAE	0xF7FFFDA3  BL	_print_string+0
0x0AB2	0x9C00    LDR	R4, [SP, #0]
;P4_bonus_obj.c, 455 :: 		tally(&rx_buffer, char_counter);
0x0AB4	0xA801    ADD	R0, SP, #4
0x0AB6	0x4621    MOV	R1, R4
; char_counter end address is: 16 (R4)
0x0AB8	0xF7FFFCB6  BL	_tally+0
;P4_bonus_obj.c, 458 :: 		print_string(&title_cr_lf, NO_NEW_LINE);
0x0ABC	0xF50D70B1  ADD	R0, SP, #354
0x0AC0	0x2100    MOVS	R1, #0
0x0AC2	0xF7FFFD99  BL	_print_string+0
;P4_bonus_obj.c, 459 :: 		print_string(&title_upper, NO_NEW_LINE);
0x0AC6	0xF50D70D5  ADD	R0, SP, #426
0x0ACA	0x2100    MOVS	R1, #0
0x0ACC	0xF7FFFD94  BL	_print_string+0
;P4_bonus_obj.c, 460 :: 		convert_to_ascii(&arr_tally[tally_upper], &ascii_msb, &ascii_lsb);
0x0AD0	0xAA45    ADD	R2, SP, #276
0x0AD2	0xA946    ADD	R1, SP, #280
0x0AD4	0xA841    ADD	R0, SP, #260
0x0AD6	0xF7FFFB7B  BL	_convert_to_ascii+0
;P4_bonus_obj.c, 461 :: 		write_data_char(&ascii_msb, NO_NEW_LINE);
0x0ADA	0xA846    ADD	R0, SP, #280
0x0ADC	0x2100    MOVS	R1, #0
0x0ADE	0xF7FFFB37  BL	_write_data_char+0
;P4_bonus_obj.c, 462 :: 		write_data_char(&ascii_lsb, NEW_LINE_EN);
0x0AE2	0xA845    ADD	R0, SP, #276
0x0AE4	0x2101    MOVS	R1, #1
0x0AE6	0xF7FFFB33  BL	_write_data_char+0
;P4_bonus_obj.c, 465 :: 		print_string(&title_lower, NO_NEW_LINE);
0x0AEA	0xF20D10B7  ADDW	R0, SP, #439
0x0AEE	0x2100    MOVS	R1, #0
0x0AF0	0xF7FFFD82  BL	_print_string+0
;P4_bonus_obj.c, 466 :: 		convert_to_ascii(&arr_tally[tally_lower], &ascii_msb, &ascii_lsb);
0x0AF4	0xAA45    ADD	R2, SP, #276
0x0AF6	0xA946    ADD	R1, SP, #280
0x0AF8	0xA841    ADD	R0, SP, #260
0x0AFA	0x1D00    ADDS	R0, R0, #4
0x0AFC	0xF7FFFB68  BL	_convert_to_ascii+0
;P4_bonus_obj.c, 467 :: 		write_data_char(&ascii_msb, NO_NEW_LINE);
0x0B00	0xA846    ADD	R0, SP, #280
0x0B02	0x2100    MOVS	R1, #0
0x0B04	0xF7FFFB24  BL	_write_data_char+0
;P4_bonus_obj.c, 468 :: 		write_data_char(&ascii_lsb, NEW_LINE_EN);
0x0B08	0xA845    ADD	R0, SP, #276
0x0B0A	0x2101    MOVS	R1, #1
0x0B0C	0xF7FFFB20  BL	_write_data_char+0
;P4_bonus_obj.c, 471 :: 		print_string(&title_non_alpha, NO_NEW_LINE);
0x0B10	0xA871    ADD	R0, SP, #452
0x0B12	0x2100    MOVS	R1, #0
0x0B14	0xF7FFFD70  BL	_print_string+0
;P4_bonus_obj.c, 472 :: 		convert_to_ascii(&arr_tally[tally_non_alpha], &ascii_msb, &ascii_lsb);
0x0B18	0xAA45    ADD	R2, SP, #276
0x0B1A	0xA946    ADD	R1, SP, #280
0x0B1C	0xA841    ADD	R0, SP, #260
0x0B1E	0x3008    ADDS	R0, #8
0x0B20	0xF7FFFB56  BL	_convert_to_ascii+0
;P4_bonus_obj.c, 473 :: 		write_data_char(&ascii_msb, NO_NEW_LINE);
0x0B24	0xA846    ADD	R0, SP, #280
0x0B26	0x2100    MOVS	R1, #0
0x0B28	0xF7FFFB12  BL	_write_data_char+0
;P4_bonus_obj.c, 474 :: 		write_data_char(&ascii_lsb, NEW_LINE_EN);
0x0B2C	0xA845    ADD	R0, SP, #276
0x0B2E	0x2101    MOVS	R1, #1
0x0B30	0xF7FFFB0E  BL	_write_data_char+0
0x0B34	0xF000B822  B	#68
0x0B38	0x0B900000  	?ICSmain_pivot_pos_L0+0
0x0B3C	0x00810501  	#83951745
0x0B40	0x10004002  	RCC_CR+0
0x0B44	0x8402001D  	#1934338
0x0B48	0x10044002  	RCC_CFGR+0
0x0B4C	0x06440001  	#67140
0x0B50	0x102C4002  	RCC_CFGR2+0
0x0B54	0x10184002  	RCC_APB2ENR+0
0x0B58	0x00044001  	AFIO_MAPR+0
0x0B5C	0x08044001  	GPIOA_CRH+0
0x0B60	0x08004001  	GPIOA_CRL+0
0x0B64	0x14044001  	GPIOD_CRH+0
0x0B68	0x14004001  	GPIOD_CRL+0
0x0B6C	0x38084001  	USART1_BRR+0
0x0B70	0x380C4001  	USART1_CR1+0
0x0B74	0x38104001  	USART1_CR2+0
0x0B78	0x38144001  	USART1_CR3+0
;P4_bonus_obj.c, 477 :: 		loop_on = TRUE;
; loop_on start address is: 44 (R11)
0x0B7C	0xF2400B01  MOVW	R11, #1
;P4_bonus_obj.c, 478 :: 		char_counter = 0;
; char_counter start address is: 40 (R10)
0x0B80	0xF2400A00  MOVW	R10, #0
;P4_bonus_obj.c, 479 :: 		}
; loop_on end address is: 44 (R11)
; char_counter end address is: 40 (R10)
0x0B84	0xE6CD    B	L_main65
;P4_bonus_obj.c, 480 :: 		}
L_end_main:
L__main_end_loop:
0x0B86	0xE7FE    B	L__main_end_loop
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 28 :: 		
0x0598	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 30 :: 		
L_loopDW:
;__Lib_System_105_107.c, 31 :: 		
0x059A	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 32 :: 		
0x059E	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 33 :: 		
0x05A2	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 34 :: 		
0x05A6	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 36 :: 		
L_end___CC2DW:
0x05A8	0xB001    ADD	SP, SP, #4
0x05AA	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 70 :: 		
0x055C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 72 :: 		
0x055E	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 73 :: 		
0x0562	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 74 :: 		
0x0566	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 75 :: 		
0x056A	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 76 :: 		
0x056C	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 77 :: 		
0x0570	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 78 :: 		
0x0572	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 79 :: 		
0x0574	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 80 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 81 :: 		
0x0576	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 82 :: 		
0x057A	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 83 :: 		
0x057E	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 84 :: 		
0x0580	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 85 :: 		
0x0584	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 86 :: 		
0x0586	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 87 :: 		
0x0588	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 88 :: 		
0x058C	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 89 :: 		
0x0590	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 90 :: 		
L_norep:
;__Lib_System_105_107.c, 92 :: 		
L_end___FillZeros:
0x0592	0xB001    ADD	SP, SP, #4
0x0594	0x4770    BX	LR
; end of ___FillZeros
_print_string:
;P4_bonus_obj.c, 121 :: 		void print_string(uint8_t *arr_string, uint8_t new_line_opt) {
; new_line_opt start address is: 4 (R1)
; arr_string start address is: 0 (R0)
0x05F8	0xB0C1    SUB	SP, SP, #260
0x05FA	0xF8CDE000  STR	LR, [SP, #0]
; new_line_opt end address is: 4 (R1)
; arr_string end address is: 0 (R0)
; arr_string start address is: 0 (R0)
; new_line_opt start address is: 4 (R1)
;P4_bonus_obj.c, 122 :: 		uint32_t i = 0;
; i start address is: 36 (R9)
0x05FE	0xF04F0900  MOV	R9, #0
; arr_string end address is: 0 (R0)
; new_line_opt end address is: 4 (R1)
; i end address is: 36 (R9)
0x0602	0x4680    MOV	R8, R0
0x0604	0xB2CE    UXTB	R6, R1
;P4_bonus_obj.c, 125 :: 		while (arr_string[i] != '\0'){
L_print_string25:
; i start address is: 36 (R9)
; new_line_opt start address is: 24 (R6)
; arr_string start address is: 32 (R8)
0x0606	0xEB080209  ADD	R2, R8, R9, LSL #0
0x060A	0x7812    LDRB	R2, [R2, #0]
0x060C	0xB1B2    CBZ	R2, L_print_string26
;P4_bonus_obj.c, 126 :: 		buffer[i] = (buffer[i] & 0x00000000) | arr_string[i];
0x060E	0xAD01    ADD	R5, SP, #4
0x0610	0xEA4F0289  LSL	R2, R9, #2
0x0614	0x18AC    ADDS	R4, R5, R2
0x0616	0x6822    LDR	R2, [R4, #0]
0x0618	0xF0020300  AND	R3, R2, #0
0x061C	0xEB080209  ADD	R2, R8, R9, LSL #0
0x0620	0x7812    LDRB	R2, [R2, #0]
0x0622	0xEA430202  ORR	R2, R3, R2, LSL #0
0x0626	0x6022    STR	R2, [R4, #0]
;P4_bonus_obj.c, 127 :: 		write_data_char(&buffer[i], NO_NEW_LINE);
0x0628	0xEA4F0289  LSL	R2, R9, #2
0x062C	0x18AA    ADDS	R2, R5, R2
0x062E	0x2100    MOVS	R1, #0
0x0630	0x4610    MOV	R0, R2
0x0632	0xF7FFFD8D  BL	_write_data_char+0
;P4_bonus_obj.c, 128 :: 		i++;
0x0636	0xF1090901  ADD	R9, R9, #1
;P4_bonus_obj.c, 129 :: 		}
; arr_string end address is: 32 (R8)
; i end address is: 36 (R9)
0x063A	0xE7E4    B	L_print_string25
L_print_string26:
;P4_bonus_obj.c, 132 :: 		if (new_line_opt == NEW_LINE_EN) {
0x063C	0x2E01    CMP	R6, #1
0x063E	0xD11D    BNE	L_print_string27
; new_line_opt end address is: 24 (R6)
;P4_bonus_obj.c, 133 :: 		Delay_ms(10);
0x0640	0xF24D47BF  MOVW	R7, #54463
0x0644	0xF2C00701  MOVT	R7, #1
L_print_string28:
0x0648	0x1E7F    SUBS	R7, R7, #1
0x064A	0xD1FD    BNE	L_print_string28
0x064C	0xBF00    NOP
0x064E	0xBF00    NOP
0x0650	0xBF00    NOP
0x0652	0xBF00    NOP
0x0654	0xBF00    NOP
;P4_bonus_obj.c, 134 :: 		USART1_DR = CHAR_CR;
0x0656	0xF04F030D  MOV	R3, #13
0x065A	0x4A0A    LDR	R2, [PC, #40]
0x065C	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 135 :: 		Delay_ms(10);
0x065E	0xF24D47BF  MOVW	R7, #54463
0x0662	0xF2C00701  MOVT	R7, #1
0x0666	0xBF00    NOP
0x0668	0xBF00    NOP
L_print_string30:
0x066A	0x1E7F    SUBS	R7, R7, #1
0x066C	0xD1FD    BNE	L_print_string30
0x066E	0xBF00    NOP
0x0670	0xBF00    NOP
0x0672	0xBF00    NOP
;P4_bonus_obj.c, 136 :: 		USART1_DR = CHAR_LF;
0x0674	0xF04F030A  MOV	R3, #10
0x0678	0x4A02    LDR	R2, [PC, #8]
0x067A	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 137 :: 		}
L_print_string27:
;P4_bonus_obj.c, 138 :: 		}
L_end_print_string:
0x067C	0xF8DDE000  LDR	LR, [SP, #0]
0x0680	0xB041    ADD	SP, SP, #260
0x0682	0x4770    BX	LR
0x0684	0x38044001  	USART1_DR+0
; end of _print_string
_write_data_char:
;P4_bonus_obj.c, 77 :: 		void write_data_char(uint32_t *tx_char, uint8_t new_line) {
; new_line start address is: 4 (R1)
; tx_char start address is: 0 (R0)
0x0150	0xB081    SUB	SP, SP, #4
; new_line end address is: 4 (R1)
; tx_char end address is: 0 (R0)
; tx_char start address is: 0 (R0)
; new_line start address is: 4 (R1)
0x0152	0xF88D1000  STRB	R1, [SP, #0]
; tx_char end address is: 0 (R0)
; new_line end address is: 4 (R1)
0x0156	0x4601    MOV	R1, R0
0x0158	0xF89D0000  LDRB	R0, [SP, #0]
;P4_bonus_obj.c, 81 :: 		while ( (USART1_SR & (1 << 7)) == 0) {}
L_write_data_char6:
; new_line start address is: 0 (R0)
; tx_char start address is: 4 (R1)
0x015C	0x4A1A    LDR	R2, [PC, #104]
0x015E	0x6812    LDR	R2, [R2, #0]
0x0160	0xF0020280  AND	R2, R2, #128
0x0164	0xB902    CBNZ	R2, L_write_data_char7
0x0166	0xE7F9    B	L_write_data_char6
L_write_data_char7:
;P4_bonus_obj.c, 84 :: 		Delay_ms(10);
0x0168	0xF24D47BF  MOVW	R7, #54463
0x016C	0xF2C00701  MOVT	R7, #1
L_write_data_char8:
0x0170	0x1E7F    SUBS	R7, R7, #1
0x0172	0xD1FD    BNE	L_write_data_char8
0x0174	0xBF00    NOP
0x0176	0xBF00    NOP
0x0178	0xBF00    NOP
0x017A	0xBF00    NOP
0x017C	0xBF00    NOP
;P4_bonus_obj.c, 85 :: 		USART1_DR = *tx_char;
0x017E	0x680B    LDR	R3, [R1, #0]
; tx_char end address is: 4 (R1)
0x0180	0x4A12    LDR	R2, [PC, #72]
0x0182	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 88 :: 		if (new_line == 1) {
0x0184	0x2801    CMP	R0, #1
0x0186	0xD11D    BNE	L_write_data_char10
; new_line end address is: 0 (R0)
;P4_bonus_obj.c, 89 :: 		Delay_ms(10);
0x0188	0xF24D47BF  MOVW	R7, #54463
0x018C	0xF2C00701  MOVT	R7, #1
L_write_data_char11:
0x0190	0x1E7F    SUBS	R7, R7, #1
0x0192	0xD1FD    BNE	L_write_data_char11
0x0194	0xBF00    NOP
0x0196	0xBF00    NOP
0x0198	0xBF00    NOP
0x019A	0xBF00    NOP
0x019C	0xBF00    NOP
;P4_bonus_obj.c, 90 :: 		USART1_DR = CHAR_CR;
0x019E	0xF04F030D  MOV	R3, #13
0x01A2	0x4A0A    LDR	R2, [PC, #40]
0x01A4	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 91 :: 		Delay_ms(10);
0x01A6	0xF24D47BF  MOVW	R7, #54463
0x01AA	0xF2C00701  MOVT	R7, #1
0x01AE	0xBF00    NOP
0x01B0	0xBF00    NOP
L_write_data_char13:
0x01B2	0x1E7F    SUBS	R7, R7, #1
0x01B4	0xD1FD    BNE	L_write_data_char13
0x01B6	0xBF00    NOP
0x01B8	0xBF00    NOP
0x01BA	0xBF00    NOP
;P4_bonus_obj.c, 92 :: 		USART1_DR = CHAR_LF;
0x01BC	0xF04F030A  MOV	R3, #10
0x01C0	0x4A02    LDR	R2, [PC, #8]
0x01C2	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 93 :: 		}
L_write_data_char10:
;P4_bonus_obj.c, 94 :: 		}
L_end_write_data_char:
0x01C4	0xB001    ADD	SP, SP, #4
0x01C6	0x4770    BX	LR
0x01C8	0x38004001  	USART1_SR+0
0x01CC	0x38044001  	USART1_DR+0
; end of _write_data_char
_read_data:
;P4_bonus_obj.c, 63 :: 		void read_data(uint32_t *rx_buffer) {
; rx_buffer start address is: 0 (R0)
0x05B0	0xB081    SUB	SP, SP, #4
; rx_buffer end address is: 0 (R0)
; rx_buffer start address is: 0 (R0)
; rx_buffer end address is: 0 (R0)
;P4_bonus_obj.c, 66 :: 		while( (USART1_SR & (1 << 5)) == 0 ) {}		// Positive logic
L_read_data0:
; rx_buffer start address is: 0 (R0)
0x05B2	0x490E    LDR	R1, [PC, #56]
0x05B4	0x6809    LDR	R1, [R1, #0]
0x05B6	0xF0010120  AND	R1, R1, #32
0x05BA	0xB901    CBNZ	R1, L_read_data1
0x05BC	0xE7F9    B	L_read_data0
L_read_data1:
;P4_bonus_obj.c, 69 :: 		*rx_buffer = USART1_DR;
0x05BE	0x490C    LDR	R1, [PC, #48]
0x05C0	0x6809    LDR	R1, [R1, #0]
0x05C2	0x6001    STR	R1, [R0, #0]
; rx_buffer end address is: 0 (R0)
;P4_bonus_obj.c, 72 :: 		while ( (USART1_SR & (1 << 7)) == 0) {}
L_read_data2:
0x05C4	0x4909    LDR	R1, [PC, #36]
0x05C6	0x6809    LDR	R1, [R1, #0]
0x05C8	0xF0010180  AND	R1, R1, #128
0x05CC	0xB901    CBNZ	R1, L_read_data3
0x05CE	0xE7F9    B	L_read_data2
L_read_data3:
;P4_bonus_obj.c, 73 :: 		Delay_ms(10);
0x05D0	0xF24D47BF  MOVW	R7, #54463
0x05D4	0xF2C00701  MOVT	R7, #1
L_read_data4:
0x05D8	0x1E7F    SUBS	R7, R7, #1
0x05DA	0xD1FD    BNE	L_read_data4
0x05DC	0xBF00    NOP
0x05DE	0xBF00    NOP
0x05E0	0xBF00    NOP
0x05E2	0xBF00    NOP
0x05E4	0xBF00    NOP
;P4_bonus_obj.c, 74 :: 		}
L_end_read_data:
0x05E6	0xB001    ADD	SP, SP, #4
0x05E8	0x4770    BX	LR
0x05EA	0xBF00    NOP
0x05EC	0x38004001  	USART1_SR+0
0x05F0	0x38044001  	USART1_DR+0
; end of _read_data
_write_data:
;P4_bonus_obj.c, 98 :: 		void write_data(uint32_t *arr_buffer, uint8_t new_line_opt) {
; new_line_opt start address is: 4 (R1)
; arr_buffer start address is: 0 (R0)
0x0220	0xB081    SUB	SP, SP, #4
0x0222	0xF8CDE000  STR	LR, [SP, #0]
0x0226	0xB2CA    UXTB	R2, R1
0x0228	0x4601    MOV	R1, R0
; new_line_opt end address is: 4 (R1)
; arr_buffer end address is: 0 (R0)
; arr_buffer start address is: 4 (R1)
; new_line_opt start address is: 8 (R2)
;P4_bonus_obj.c, 99 :: 		uint32_t i = 0;
; i start address is: 0 (R0)
0x022A	0xF04F0000  MOV	R0, #0
; arr_buffer end address is: 4 (R1)
; new_line_opt end address is: 8 (R2)
; i end address is: 0 (R0)
0x022E	0x460D    MOV	R5, R1
0x0230	0xB2D4    UXTB	R4, R2
0x0232	0x4606    MOV	R6, R0
;P4_bonus_obj.c, 101 :: 		while ( (arr_buffer[i] != '\0') && (i < MAX_BUFFER_SIZE) ) {
L_write_data15:
; i start address is: 24 (R6)
; new_line_opt start address is: 16 (R4)
; new_line_opt start address is: 16 (R4)
; new_line_opt end address is: 16 (R4)
; arr_buffer start address is: 20 (R5)
0x0234	0x00B2    LSLS	R2, R6, #2
0x0236	0x18AA    ADDS	R2, R5, R2
0x0238	0x6812    LDR	R2, [R2, #0]
0x023A	0xB14A    CBZ	R2, L__write_data89
; new_line_opt end address is: 16 (R4)
; new_line_opt start address is: 16 (R4)
0x023C	0x2E40    CMP	R6, #64
0x023E	0xD207    BCS	L__write_data88
L__write_data87:
;P4_bonus_obj.c, 102 :: 		write_data_char(&arr_buffer[i], new_line_opt);
0x0240	0x00B2    LSLS	R2, R6, #2
0x0242	0x18AA    ADDS	R2, R5, R2
0x0244	0xB2E1    UXTB	R1, R4
0x0246	0x4610    MOV	R0, R2
0x0248	0xF7FFFF82  BL	_write_data_char+0
;P4_bonus_obj.c, 103 :: 		++i;
0x024C	0x1C76    ADDS	R6, R6, #1
;P4_bonus_obj.c, 104 :: 		}
; new_line_opt end address is: 16 (R4)
; arr_buffer end address is: 20 (R5)
; i end address is: 24 (R6)
0x024E	0xE7F1    B	L_write_data15
;P4_bonus_obj.c, 101 :: 		while ( (arr_buffer[i] != '\0') && (i < MAX_BUFFER_SIZE) ) {
L__write_data89:
L__write_data88:
;P4_bonus_obj.c, 107 :: 		Delay_ms(10);
0x0250	0xF24D47BF  MOVW	R7, #54463
0x0254	0xF2C00701  MOVT	R7, #1
L_write_data19:
0x0258	0x1E7F    SUBS	R7, R7, #1
0x025A	0xD1FD    BNE	L_write_data19
0x025C	0xBF00    NOP
0x025E	0xBF00    NOP
0x0260	0xBF00    NOP
0x0262	0xBF00    NOP
0x0264	0xBF00    NOP
;P4_bonus_obj.c, 108 :: 		USART1_DR = CHAR_CR;
0x0266	0xF04F030D  MOV	R3, #13
0x026A	0x4A0A    LDR	R2, [PC, #40]
0x026C	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 109 :: 		Delay_ms(10);
0x026E	0xF24D47BF  MOVW	R7, #54463
0x0272	0xF2C00701  MOVT	R7, #1
0x0276	0xBF00    NOP
0x0278	0xBF00    NOP
L_write_data21:
0x027A	0x1E7F    SUBS	R7, R7, #1
0x027C	0xD1FD    BNE	L_write_data21
0x027E	0xBF00    NOP
0x0280	0xBF00    NOP
0x0282	0xBF00    NOP
;P4_bonus_obj.c, 110 :: 		USART1_DR = CHAR_LF;
0x0284	0xF04F030A  MOV	R3, #10
0x0288	0x4A02    LDR	R2, [PC, #8]
0x028A	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 111 :: 		}
L_end_write_data:
0x028C	0xF8DDE000  LDR	LR, [SP, #0]
0x0290	0xB001    ADD	SP, SP, #4
0x0292	0x4770    BX	LR
0x0294	0x38044001  	USART1_DR+0
; end of _write_data
_q_sort:
;P4_bonus_obj.c, 169 :: 		int q_sort(uint32_t *arr_list, int32_t *pivot_pos, uint32_t *min_pos) {
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
0x0298	0xB081    SUB	SP, SP, #4
0x029A	0xF8CDE000  STR	LR, [SP, #0]
0x029E	0x4614    MOV	R4, R2
0x02A0	0x460A    MOV	R2, R1
0x02A2	0x4601    MOV	R1, R0
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
; arr_list start address is: 4 (R1)
; pivot_pos start address is: 8 (R2)
; min_pos start address is: 16 (R4)
;P4_bonus_obj.c, 170 :: 		int32_t right_cur  = (*pivot_pos-1);
0x02A4	0x6813    LDR	R3, [R2, #0]
0x02A6	0x1E5B    SUBS	R3, R3, #1
; right_cur start address is: 12 (R3)
;P4_bonus_obj.c, 171 :: 		int32_t left_found = 0;
; left_found start address is: 32 (R8)
0x02A8	0xF04F0800  MOV	R8, #0
;P4_bonus_obj.c, 173 :: 		uint32_t temp_val  = 0;
;P4_bonus_obj.c, 174 :: 		uint32_t left_cur  = 0;
; left_cur start address is: 28 (R7)
0x02AC	0xF04F0700  MOV	R7, #0
;P4_bonus_obj.c, 175 :: 		uint32_t right_found = 0;
; right_found start address is: 0 (R0)
0x02B0	0xF04F0000  MOV	R0, #0
; arr_list end address is: 4 (R1)
; pivot_pos end address is: 8 (R2)
; min_pos end address is: 16 (R4)
; right_cur end address is: 12 (R3)
; right_found end address is: 0 (R0)
; left_cur end address is: 28 (R7)
; left_found end address is: 32 (R8)
0x02B4	0x460E    MOV	R6, R1
0x02B6	0x4619    MOV	R1, R3
0x02B8	0x4615    MOV	R5, R2
0x02BA	0x4622    MOV	R2, R4
;P4_bonus_obj.c, 178 :: 		while (left_found == 0) {
L_q_sort36:
; right_found start address is: 0 (R0)
; left_cur start address is: 28 (R7)
; left_found start address is: 32 (R8)
; right_cur start address is: 4 (R1)
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 20 (R5)
; arr_list start address is: 24 (R6)
0x02BC	0xF1B80F00  CMP	R8, #0
0x02C0	0xD120    BNE	L_q_sort37
;P4_bonus_obj.c, 180 :: 		if (left_cur == *pivot_pos) {
0x02C2	0x682B    LDR	R3, [R5, #0]
0x02C4	0x429F    CMP	R7, R3
0x02C6	0xD10D    BNE	L_q_sort38
; right_found end address is: 0 (R0)
; right_cur end address is: 4 (R1)
; left_cur end address is: 28 (R7)
; left_found end address is: 32 (R8)
;P4_bonus_obj.c, 184 :: 		--(*pivot_pos);
0x02C8	0x682B    LDR	R3, [R5, #0]
0x02CA	0x1E5B    SUBS	R3, R3, #1
0x02CC	0x602B    STR	R3, [R5, #0]
;P4_bonus_obj.c, 187 :: 		if ( (*pivot_pos) <= 0) {
0x02CE	0x682B    LDR	R3, [R5, #0]
0x02D0	0x2B00    CMP	R3, #0
0x02D2	0xDC02    BGT	L_q_sort39
; pivot_pos end address is: 20 (R5)
; arr_list end address is: 24 (R6)
; min_pos end address is: 8 (R2)
;P4_bonus_obj.c, 188 :: 		return 0;
0x02D4	0x2000    MOVS	R0, #0
0x02D6	0xB200    SXTH	R0, R0
0x02D8	0xE06B    B	L_end_q_sort
;P4_bonus_obj.c, 189 :: 		}
L_q_sort39:
;P4_bonus_obj.c, 192 :: 		return q_sort(arr_list, pivot_pos, min_pos);
; min_pos start address is: 8 (R2)
; arr_list start address is: 24 (R6)
; pivot_pos start address is: 20 (R5)
; min_pos end address is: 8 (R2)
0x02DA	0x4629    MOV	R1, R5
; pivot_pos end address is: 20 (R5)
0x02DC	0x4630    MOV	R0, R6
; arr_list end address is: 24 (R6)
0x02DE	0xF7FFFFDB  BL	_q_sort+0
0x02E2	0xE066    B	L_end_q_sort
;P4_bonus_obj.c, 194 :: 		}
L_q_sort38:
;P4_bonus_obj.c, 196 :: 		else if ( (arr_list[left_cur]) > (arr_list[*pivot_pos]) ) {
; min_pos start address is: 8 (R2)
; left_found start address is: 32 (R8)
; left_cur start address is: 28 (R7)
; arr_list start address is: 24 (R6)
; pivot_pos start address is: 20 (R5)
; right_cur start address is: 4 (R1)
; right_found start address is: 0 (R0)
0x02E4	0x00BB    LSLS	R3, R7, #2
0x02E6	0x18F3    ADDS	R3, R6, R3
0x02E8	0x681C    LDR	R4, [R3, #0]
0x02EA	0x682B    LDR	R3, [R5, #0]
0x02EC	0x009B    LSLS	R3, R3, #2
0x02EE	0x18F3    ADDS	R3, R6, R3
0x02F0	0x681B    LDR	R3, [R3, #0]
0x02F2	0x429C    CMP	R4, R3
0x02F4	0xD902    BLS	L_q_sort42
; left_found end address is: 32 (R8)
;P4_bonus_obj.c, 197 :: 		left_found = 1;
; left_found start address is: 12 (R3)
0x02F6	0x2301    MOVS	R3, #1
;P4_bonus_obj.c, 198 :: 		}
0x02F8	0x4698    MOV	R8, R3
; left_found end address is: 12 (R3)
0x02FA	0xE002    B	L_q_sort43
L_q_sort42:
;P4_bonus_obj.c, 200 :: 		++left_cur;
; left_found start address is: 32 (R8)
0x02FC	0x1C7B    ADDS	R3, R7, #1
; left_cur end address is: 28 (R7)
; left_cur start address is: 16 (R4)
0x02FE	0x461C    MOV	R4, R3
; left_cur end address is: 16 (R4)
; left_found end address is: 32 (R8)
0x0300	0x4627    MOV	R7, R4
;P4_bonus_obj.c, 201 :: 		}
L_q_sort43:
;P4_bonus_obj.c, 202 :: 		}
; left_cur start address is: 28 (R7)
; left_found start address is: 32 (R8)
; left_found end address is: 32 (R8)
0x0302	0xE7DB    B	L_q_sort36
L_q_sort37:
;P4_bonus_obj.c, 205 :: 		while (right_found == 0) {
0x0304	0x4680    MOV	R8, R0
; right_cur end address is: 4 (R1)
; pivot_pos end address is: 20 (R5)
; arr_list end address is: 24 (R6)
; left_cur end address is: 28 (R7)
; min_pos end address is: 8 (R2)
0x0306	0x4630    MOV	R0, R6
0x0308	0x463E    MOV	R6, R7
0x030A	0x460F    MOV	R7, R1
0x030C	0x4629    MOV	R1, R5
L_q_sort44:
; right_found end address is: 0 (R0)
; arr_list start address is: 0 (R0)
; pivot_pos start address is: 4 (R1)
; min_pos start address is: 8 (R2)
; right_cur start address is: 28 (R7)
; left_cur start address is: 24 (R6)
; right_found start address is: 32 (R8)
0x030E	0xF1B80F00  CMP	R8, #0
0x0312	0xD12B    BNE	L_q_sort45
;P4_bonus_obj.c, 207 :: 		if ( (right_cur == *min_pos) && (arr_list[right_cur]) >= (arr_list[*pivot_pos]) ) {
0x0314	0x6813    LDR	R3, [R2, #0]
0x0316	0x429F    CMP	R7, R3
0x0318	0xD118    BNE	L__q_sort92
0x031A	0x00BB    LSLS	R3, R7, #2
0x031C	0x18C5    ADDS	R5, R0, R3
0x031E	0x680B    LDR	R3, [R1, #0]
0x0320	0x009B    LSLS	R3, R3, #2
0x0322	0x18C3    ADDS	R3, R0, R3
0x0324	0x681C    LDR	R4, [R3, #0]
0x0326	0x682B    LDR	R3, [R5, #0]
0x0328	0x42A3    CMP	R3, R4
0x032A	0xD30F    BCC	L__q_sort91
; right_cur end address is: 28 (R7)
; right_found end address is: 32 (R8)
L__q_sort90:
;P4_bonus_obj.c, 211 :: 		temp_val = arr_list[left_cur];
0x032C	0x00B3    LSLS	R3, R6, #2
0x032E	0x18C4    ADDS	R4, R0, R3
0x0330	0x6825    LDR	R5, [R4, #0]
; temp_val start address is: 20 (R5)
;P4_bonus_obj.c, 212 :: 		arr_list[left_cur] = arr_list[*pivot_pos];
0x0332	0x680B    LDR	R3, [R1, #0]
0x0334	0x009B    LSLS	R3, R3, #2
0x0336	0x18C3    ADDS	R3, R0, R3
0x0338	0x681B    LDR	R3, [R3, #0]
0x033A	0x6023    STR	R3, [R4, #0]
;P4_bonus_obj.c, 213 :: 		arr_list[*pivot_pos] = temp_val;
0x033C	0x680B    LDR	R3, [R1, #0]
0x033E	0x009B    LSLS	R3, R3, #2
0x0340	0x18C3    ADDS	R3, R0, R3
0x0342	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;P4_bonus_obj.c, 216 :: 		*min_pos = left_cur;
0x0344	0x6016    STR	R6, [R2, #0]
; left_cur end address is: 24 (R6)
;P4_bonus_obj.c, 218 :: 		return q_sort( arr_list, pivot_pos, min_pos );
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
0x0346	0xF7FFFFA7  BL	_q_sort+0
0x034A	0xE032    B	L_end_q_sort
;P4_bonus_obj.c, 207 :: 		if ( (right_cur == *min_pos) && (arr_list[right_cur]) >= (arr_list[*pivot_pos]) ) {
L__q_sort92:
; right_found start address is: 32 (R8)
; right_cur start address is: 28 (R7)
; left_cur start address is: 24 (R6)
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
L__q_sort91:
;P4_bonus_obj.c, 220 :: 		else if ( (arr_list[right_cur]) <= (arr_list[*pivot_pos]) ) {
0x034C	0x00BB    LSLS	R3, R7, #2
0x034E	0x18C3    ADDS	R3, R0, R3
0x0350	0x681C    LDR	R4, [R3, #0]
0x0352	0x680B    LDR	R3, [R1, #0]
0x0354	0x009B    LSLS	R3, R3, #2
0x0356	0x18C3    ADDS	R3, R0, R3
0x0358	0x681B    LDR	R3, [R3, #0]
0x035A	0x429C    CMP	R4, R3
0x035C	0xD802    BHI	L_q_sort50
; right_found end address is: 32 (R8)
;P4_bonus_obj.c, 221 :: 		right_found =1;
; right_found start address is: 12 (R3)
0x035E	0x2301    MOVS	R3, #1
;P4_bonus_obj.c, 222 :: 		}
0x0360	0x4698    MOV	R8, R3
; right_found end address is: 12 (R3)
0x0362	0xE002    B	L_q_sort51
L_q_sort50:
;P4_bonus_obj.c, 224 :: 		--right_cur;
; right_found start address is: 32 (R8)
0x0364	0x1E7B    SUBS	R3, R7, #1
; right_cur end address is: 28 (R7)
; right_cur start address is: 16 (R4)
0x0366	0x461C    MOV	R4, R3
; right_cur end address is: 16 (R4)
; right_found end address is: 32 (R8)
0x0368	0x4627    MOV	R7, R4
;P4_bonus_obj.c, 225 :: 		}
L_q_sort51:
;P4_bonus_obj.c, 226 :: 		}
; right_cur start address is: 28 (R7)
; right_found start address is: 32 (R8)
; right_found end address is: 32 (R8)
0x036A	0xE7D0    B	L_q_sort44
L_q_sort45:
;P4_bonus_obj.c, 230 :: 		if (right_cur < left_cur) {
0x036C	0x42B7    CMP	R7, R6
0x036E	0xD20E    BCS	L_q_sort52
; right_cur end address is: 28 (R7)
;P4_bonus_obj.c, 231 :: 		temp_val = arr_list[left_cur];
0x0370	0x00B3    LSLS	R3, R6, #2
; left_cur end address is: 24 (R6)
0x0372	0x18C4    ADDS	R4, R0, R3
0x0374	0x6825    LDR	R5, [R4, #0]
; temp_val start address is: 20 (R5)
;P4_bonus_obj.c, 232 :: 		arr_list[left_cur] = arr_list[*pivot_pos];
0x0376	0x680B    LDR	R3, [R1, #0]
0x0378	0x009B    LSLS	R3, R3, #2
0x037A	0x18C3    ADDS	R3, R0, R3
0x037C	0x681B    LDR	R3, [R3, #0]
0x037E	0x6023    STR	R3, [R4, #0]
;P4_bonus_obj.c, 233 :: 		arr_list[*pivot_pos] = temp_val;
0x0380	0x680B    LDR	R3, [R1, #0]
0x0382	0x009B    LSLS	R3, R3, #2
0x0384	0x18C3    ADDS	R3, R0, R3
0x0386	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;P4_bonus_obj.c, 234 :: 		*min_pos = 0;
0x0388	0x2300    MOVS	R3, #0
0x038A	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 235 :: 		}
0x038C	0xE00A    B	L_q_sort53
L_q_sort52:
;P4_bonus_obj.c, 238 :: 		temp_val = arr_list[left_cur];
; right_cur start address is: 28 (R7)
; left_cur start address is: 24 (R6)
0x038E	0x00B3    LSLS	R3, R6, #2
; left_cur end address is: 24 (R6)
0x0390	0x18C4    ADDS	R4, R0, R3
0x0392	0x6823    LDR	R3, [R4, #0]
; temp_val start address is: 20 (R5)
0x0394	0x461D    MOV	R5, R3
;P4_bonus_obj.c, 239 :: 		arr_list[left_cur] = arr_list[right_cur];
0x0396	0x00BB    LSLS	R3, R7, #2
0x0398	0x18C3    ADDS	R3, R0, R3
0x039A	0x681B    LDR	R3, [R3, #0]
0x039C	0x6023    STR	R3, [R4, #0]
;P4_bonus_obj.c, 240 :: 		arr_list[right_cur] = temp_val;
0x039E	0x00BB    LSLS	R3, R7, #2
; right_cur end address is: 28 (R7)
0x03A0	0x18C3    ADDS	R3, R0, R3
0x03A2	0x601D    STR	R5, [R3, #0]
; temp_val end address is: 20 (R5)
;P4_bonus_obj.c, 241 :: 		}
L_q_sort53:
;P4_bonus_obj.c, 243 :: 		if (*pivot_pos == 0) {
0x03A4	0x680B    LDR	R3, [R1, #0]
0x03A6	0xB913    CBNZ	R3, L_q_sort54
; arr_list end address is: 0 (R0)
; pivot_pos end address is: 4 (R1)
; min_pos end address is: 8 (R2)
;P4_bonus_obj.c, 244 :: 		return 0;
0x03A8	0x2000    MOVS	R0, #0
0x03AA	0xB200    SXTH	R0, R0
0x03AC	0xE001    B	L_end_q_sort
;P4_bonus_obj.c, 245 :: 		}
L_q_sort54:
;P4_bonus_obj.c, 247 :: 		return q_sort(arr_list, pivot_pos, min_pos);
; min_pos start address is: 8 (R2)
; pivot_pos start address is: 4 (R1)
; arr_list start address is: 0 (R0)
; min_pos end address is: 8 (R2)
; pivot_pos end address is: 4 (R1)
; arr_list end address is: 0 (R0)
0x03AE	0xF7FFFF73  BL	_q_sort+0
;P4_bonus_obj.c, 249 :: 		}
L_end_q_sort:
0x03B2	0xF8DDE000  LDR	LR, [SP, #0]
0x03B6	0xB001    ADD	SP, SP, #4
0x03B8	0x4770    BX	LR
; end of _q_sort
_tally:
;P4_bonus_obj.c, 254 :: 		tally(uint32_t *arr_tally, uint32_t size) {
; size start address is: 4 (R1)
0x0428	0xB0CA    SUB	SP, SP, #296
0x042A	0xF8CDE000  STR	LR, [SP, #0]
0x042E	0x9048    STR	R0, [SP, #288]
; size end address is: 4 (R1)
; size start address is: 4 (R1)
;P4_bonus_obj.c, 256 :: 		uint8_t str_colon[] = " : ";
0x0430	0x2220    MOVS	R2, #32
0x0432	0xF88D2104  STRB	R2, [SP, #260]
0x0436	0x223A    MOVS	R2, #58
0x0438	0xF88D2105  STRB	R2, [SP, #261]
0x043C	0x2220    MOVS	R2, #32
0x043E	0xF88D2106  STRB	R2, [SP, #262]
0x0442	0x2200    MOVS	R2, #0
0x0444	0xF88D2107  STRB	R2, [SP, #263]
0x0448	0x2201    MOVS	R2, #1
0x044A	0xF88D2108  STRB	R2, [SP, #264]
;P4_bonus_obj.c, 257 :: 		uint8_t first_run = TRUE;
;P4_bonus_obj.c, 259 :: 		uint32_t i = 0;
; i start address is: 0 (R0)
0x044E	0xF04F0000  MOV	R0, #0
;P4_bonus_obj.c, 260 :: 		uint32_t char_pos     = 0;
0x0452	0xF04F0200  MOV	R2, #0
0x0456	0x9243    STR	R2, [SP, #268]
;P4_bonus_obj.c, 261 :: 		uint32_t tally_pos    = 1;
; tally_pos start address is: 24 (R6)
0x0458	0xF04F0601  MOV	R6, #1
;P4_bonus_obj.c, 262 :: 		uint32_t tally_count  = 0;
0x045C	0xF50D7B88  ADD	R11, SP, #272
0x0460	0xF10B0A10  ADD	R10, R11, #16
0x0464	0xF8DFC0F0  LDR	R12, [PC, #240]
0x0468	0xF000F896  BL	___CC2DW+0
;P4_bonus_obj.c, 263 :: 		uint32_t current_char = 0;
;P4_bonus_obj.c, 264 :: 		uint32_t prev_char    = 0;
;P4_bonus_obj.c, 265 :: 		uint32_t ascii_msb    = 0;
;P4_bonus_obj.c, 266 :: 		uint32_t ascii_lsb    = 0;
; size end address is: 4 (R1)
; tally_pos end address is: 24 (R6)
; i end address is: 0 (R0)
0x046C	0x468C    MOV	R12, R1
0x046E	0x4683    MOV	R11, R0
0x0470	0x46B2    MOV	R10, R6
;P4_bonus_obj.c, 269 :: 		while (i <= size) {
L_tally56:
; tally_pos start address is: 40 (R10)
; i start address is: 44 (R11)
; size start address is: 48 (R12)
0x0472	0x45E3    CMP	R11, R12
0x0474	0xD86C    BHI	L_tally57
;P4_bonus_obj.c, 271 :: 		current_char = arr_tally[i];
0x0476	0xEA4F038B  LSL	R3, R11, #2
0x047A	0x9A48    LDR	R2, [SP, #288]
0x047C	0x18D2    ADDS	R2, R2, R3
0x047E	0x6813    LDR	R3, [R2, #0]
0x0480	0x9349    STR	R3, [SP, #292]
;P4_bonus_obj.c, 273 :: 		if (prev_char == current_char) {
0x0482	0x9A45    LDR	R2, [SP, #276]
0x0484	0x429A    CMP	R2, R3
0x0486	0xD10A    BNE	L_tally58
; tally_pos end address is: 40 (R10)
;P4_bonus_obj.c, 274 :: 		tally_pos = char_pos + 1;
0x0488	0x9A43    LDR	R2, [SP, #268]
0x048A	0x1C52    ADDS	R2, R2, #1
; tally_pos start address is: 24 (R6)
0x048C	0x4616    MOV	R6, R2
;P4_bonus_obj.c, 275 :: 		tally_list[tally_pos] = ++tally_count;
0x048E	0xAB01    ADD	R3, SP, #4
0x0490	0x0092    LSLS	R2, R2, #2
0x0492	0x189B    ADDS	R3, R3, R2
0x0494	0x9A44    LDR	R2, [SP, #272]
0x0496	0x1C52    ADDS	R2, R2, #1
0x0498	0x9244    STR	R2, [SP, #272]
0x049A	0x601A    STR	R2, [R3, #0]
;P4_bonus_obj.c, 276 :: 		}
; tally_pos end address is: 24 (R6)
0x049C	0xE050    B	L_tally59
L_tally58:
;P4_bonus_obj.c, 278 :: 		else if ( tally_list[char_pos] != current_char) {
; tally_pos start address is: 40 (R10)
0x049E	0xAB01    ADD	R3, SP, #4
0x04A0	0x9A43    LDR	R2, [SP, #268]
0x04A2	0x0092    LSLS	R2, R2, #2
0x04A4	0x189A    ADDS	R2, R3, R2
0x04A6	0x6813    LDR	R3, [R2, #0]
0x04A8	0x9A49    LDR	R2, [SP, #292]
0x04AA	0x4293    CMP	R3, R2
0x04AC	0xD047    BEQ	L_tally60
;P4_bonus_obj.c, 281 :: 		tally_count = 0;
0x04AE	0x2200    MOVS	R2, #0
0x04B0	0x9244    STR	R2, [SP, #272]
;P4_bonus_obj.c, 283 :: 		if (first_run == TRUE ) {
0x04B2	0xF89D2108  LDRB	R2, [SP, #264]
0x04B6	0x2A01    CMP	R2, #1
0x04B8	0xD110    BNE	L_tally61
;P4_bonus_obj.c, 284 :: 		tally_list[char_pos] = current_char;
0x04BA	0xAC01    ADD	R4, SP, #4
0x04BC	0x9A43    LDR	R2, [SP, #268]
0x04BE	0x0092    LSLS	R2, R2, #2
0x04C0	0x18A3    ADDS	R3, R4, R2
0x04C2	0x9A49    LDR	R2, [SP, #292]
0x04C4	0x601A    STR	R2, [R3, #0]
;P4_bonus_obj.c, 285 :: 		tally_list[tally_pos] = ++tally_count;
0x04C6	0xEA4F028A  LSL	R2, R10, #2
0x04CA	0x18A3    ADDS	R3, R4, R2
0x04CC	0x9A44    LDR	R2, [SP, #272]
0x04CE	0x1C52    ADDS	R2, R2, #1
0x04D0	0x9244    STR	R2, [SP, #272]
0x04D2	0x601A    STR	R2, [R3, #0]
;P4_bonus_obj.c, 286 :: 		first_run = FALSE;
0x04D4	0x2200    MOVS	R2, #0
0x04D6	0xF88D2108  STRB	R2, [SP, #264]
;P4_bonus_obj.c, 287 :: 		}
0x04DA	0xE030    B	L_tally62
L_tally61:
;P4_bonus_obj.c, 290 :: 		write_data_char(&tally_list[char_pos], NO_NEW_LINE);
0x04DC	0xAB01    ADD	R3, SP, #4
0x04DE	0x9A43    LDR	R2, [SP, #268]
0x04E0	0x0092    LSLS	R2, R2, #2
0x04E2	0x189A    ADDS	R2, R3, R2
0x04E4	0x2100    MOVS	R1, #0
0x04E6	0x4610    MOV	R0, R2
0x04E8	0xF7FFFE32  BL	_write_data_char+0
;P4_bonus_obj.c, 291 :: 		print_string(&str_colon, NO_NEW_LINE);
0x04EC	0xAA41    ADD	R2, SP, #260
0x04EE	0x2100    MOVS	R1, #0
0x04F0	0x4610    MOV	R0, R2
0x04F2	0xF000F881  BL	_print_string+0
;P4_bonus_obj.c, 292 :: 		convert_to_ascii(&tally_list[tally_pos], &ascii_msb, &ascii_lsb);
0x04F6	0xAD47    ADD	R5, SP, #284
0x04F8	0xAC46    ADD	R4, SP, #280
0x04FA	0xAB01    ADD	R3, SP, #4
0x04FC	0xEA4F028A  LSL	R2, R10, #2
0x0500	0x189A    ADDS	R2, R3, R2
0x0502	0x4621    MOV	R1, R4
0x0504	0x4610    MOV	R0, R2
0x0506	0x462A    MOV	R2, R5
0x0508	0xF7FFFE62  BL	_convert_to_ascii+0
;P4_bonus_obj.c, 293 :: 		write_data_char(&ascii_msb, NO_NEW_LINE);
0x050C	0xAA46    ADD	R2, SP, #280
0x050E	0x2100    MOVS	R1, #0
0x0510	0x4610    MOV	R0, R2
0x0512	0xF7FFFE1D  BL	_write_data_char+0
;P4_bonus_obj.c, 294 :: 		write_data_char(&ascii_lsb, NEW_LINE_EN);
0x0516	0xAA47    ADD	R2, SP, #284
0x0518	0x2101    MOVS	R1, #1
0x051A	0x4610    MOV	R0, R2
0x051C	0xF7FFFE18  BL	_write_data_char+0
;P4_bonus_obj.c, 296 :: 		char_pos +=2;
0x0520	0x9A43    LDR	R2, [SP, #268]
0x0522	0x1C92    ADDS	R2, R2, #2
0x0524	0x9243    STR	R2, [SP, #268]
;P4_bonus_obj.c, 297 :: 		tally_list[char_pos] = current_char;
0x0526	0xAC01    ADD	R4, SP, #4
0x0528	0x0092    LSLS	R2, R2, #2
0x052A	0x18A3    ADDS	R3, R4, R2
0x052C	0x9A49    LDR	R2, [SP, #292]
0x052E	0x601A    STR	R2, [R3, #0]
;P4_bonus_obj.c, 298 :: 		tally_list[tally_pos] = ++tally_count;
0x0530	0xEA4F028A  LSL	R2, R10, #2
0x0534	0x18A3    ADDS	R3, R4, R2
0x0536	0x9A44    LDR	R2, [SP, #272]
0x0538	0x1C52    ADDS	R2, R2, #1
0x053A	0x9244    STR	R2, [SP, #272]
0x053C	0x601A    STR	R2, [R3, #0]
;P4_bonus_obj.c, 299 :: 		}
L_tally62:
;P4_bonus_obj.c, 300 :: 		}
L_tally60:
0x053E	0x4656    MOV	R6, R10
; tally_pos end address is: 40 (R10)
L_tally59:
;P4_bonus_obj.c, 301 :: 		prev_char = current_char;
; tally_pos start address is: 24 (R6)
0x0540	0x9A49    LDR	R2, [SP, #292]
0x0542	0x9245    STR	R2, [SP, #276]
;P4_bonus_obj.c, 302 :: 		i++;
0x0544	0xF10B0201  ADD	R2, R11, #1
; i end address is: 44 (R11)
; i start address is: 0 (R0)
0x0548	0x4610    MOV	R0, R2
;P4_bonus_obj.c, 303 :: 		}
; size end address is: 48 (R12)
; tally_pos end address is: 24 (R6)
; i end address is: 0 (R0)
0x054A	0x4683    MOV	R11, R0
0x054C	0x46B2    MOV	R10, R6
0x054E	0xE790    B	L_tally56
L_tally57:
;P4_bonus_obj.c, 304 :: 		}
L_end_tally:
0x0550	0xF8DDE000  LDR	LR, [SP, #0]
0x0554	0xB04A    ADD	SP, SP, #296
0x0556	0x4770    BX	LR
0x0558	0x0C630000  	?ICStally_tally_count_L0+0
; end of _tally
_convert_to_ascii:
;P4_bonus_obj.c, 142 :: 		void convert_to_ascii(const int32_t *input_dec, uint32_t *ascii_msb, uint32_t *ascii_lsb) {
; ascii_lsb start address is: 8 (R2)
; ascii_msb start address is: 4 (R1)
; input_dec start address is: 0 (R0)
0x01D0	0xB081    SUB	SP, SP, #4
0x01D2	0x9100    STR	R1, [SP, #0]
0x01D4	0x4601    MOV	R1, R0
0x01D6	0x9800    LDR	R0, [SP, #0]
; ascii_lsb end address is: 8 (R2)
; ascii_msb end address is: 4 (R1)
; input_dec end address is: 0 (R0)
; input_dec start address is: 4 (R1)
; ascii_msb start address is: 0 (R0)
; ascii_lsb start address is: 8 (R2)
;P4_bonus_obj.c, 145 :: 		uint32_t temp_val = 0;
;P4_bonus_obj.c, 146 :: 		*ascii_msb = 0;
0x01D8	0x2300    MOVS	R3, #0
0x01DA	0x6003    STR	R3, [R0, #0]
;P4_bonus_obj.c, 147 :: 		*ascii_lsb = 0;
0x01DC	0x2300    MOVS	R3, #0
0x01DE	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 150 :: 		if (*input_dec > MAX_BUFFER_SIZE) {
0x01E0	0x680B    LDR	R3, [R1, #0]
0x01E2	0x2B40    CMP	R3, #64
0x01E4	0xD900    BLS	L_convert_to_ascii32
; ascii_msb end address is: 0 (R0)
; ascii_lsb end address is: 8 (R2)
; input_dec end address is: 4 (R1)
;P4_bonus_obj.c, 151 :: 		return;
0x01E6	0xE017    B	L_end_convert_to_ascii
;P4_bonus_obj.c, 152 :: 		}
L_convert_to_ascii32:
;P4_bonus_obj.c, 155 :: 		temp_val = *input_dec;
; input_dec start address is: 4 (R1)
; ascii_lsb start address is: 8 (R2)
; ascii_msb start address is: 0 (R0)
0x01E8	0x680C    LDR	R4, [R1, #0]
; temp_val start address is: 16 (R4)
; ascii_msb end address is: 0 (R0)
; ascii_lsb end address is: 8 (R2)
; input_dec end address is: 4 (R1)
; temp_val end address is: 16 (R4)
0x01EA	0x9200    STR	R2, [SP, #0]
0x01EC	0x4602    MOV	R2, R0
0x01EE	0x9800    LDR	R0, [SP, #0]
;P4_bonus_obj.c, 156 :: 		while (temp_val >= 10) {
L_convert_to_ascii33:
; temp_val start address is: 16 (R4)
; ascii_msb start address is: 8 (R2)
; ascii_lsb start address is: 0 (R0)
; ascii_msb start address is: 8 (R2)
; ascii_msb end address is: 8 (R2)
; input_dec start address is: 4 (R1)
0x01F0	0x2C0A    CMP	R4, #10
0x01F2	0xD306    BCC	L_convert_to_ascii34
; ascii_msb end address is: 8 (R2)
;P4_bonus_obj.c, 157 :: 		temp_val /= 10;
; ascii_msb start address is: 8 (R2)
0x01F4	0x230A    MOVS	R3, #10
0x01F6	0xFBB4F3F3  UDIV	R3, R4, R3
0x01FA	0x461C    MOV	R4, R3
;P4_bonus_obj.c, 158 :: 		*ascii_msb = temp_val + ASCII_HEX_0;
0x01FC	0x3330    ADDS	R3, #48
0x01FE	0x6013    STR	R3, [R2, #0]
;P4_bonus_obj.c, 159 :: 		}
; ascii_msb end address is: 8 (R2)
; temp_val end address is: 16 (R4)
0x0200	0xE7F6    B	L_convert_to_ascii33
L_convert_to_ascii34:
;P4_bonus_obj.c, 162 :: 		if (*input_dec > 0) {
0x0202	0x680B    LDR	R3, [R1, #0]
0x0204	0x2B00    CMP	R3, #0
0x0206	0xDD07    BLE	L_convert_to_ascii35
;P4_bonus_obj.c, 163 :: 		temp_val = (*input_dec % 10);
0x0208	0x680D    LDR	R5, [R1, #0]
; input_dec end address is: 4 (R1)
0x020A	0x240A    MOVS	R4, #10
0x020C	0xFB95F3F4  SDIV	R3, R5, R4
0x0210	0xFB045313  MLS	R3, R4, R3, R5
;P4_bonus_obj.c, 164 :: 		*ascii_lsb = temp_val + ASCII_HEX_0;
0x0214	0x3330    ADDS	R3, #48
0x0216	0x6003    STR	R3, [R0, #0]
; ascii_lsb end address is: 0 (R0)
;P4_bonus_obj.c, 165 :: 		}
L_convert_to_ascii35:
;P4_bonus_obj.c, 166 :: 		}
L_end_convert_to_ascii:
0x0218	0xB001    ADD	SP, SP, #4
0x021A	0x4770    BX	LR
; end of _convert_to_ascii
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 391 :: 		
0x06A4	0xB081    SUB	SP, SP, #4
0x06A6	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 395 :: 		
; ulRCC_CR start address is: 8 (R2)
0x06AA	0x4A4A    LDR	R2, [PC, #296]
;__Lib_System_105_107.c, 396 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x06AC	0x4B4A    LDR	R3, [PC, #296]
;__Lib_System_105_107.c, 397 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x06AE	0x4C4B    LDR	R4, [PC, #300]
;__Lib_System_105_107.c, 398 :: 		
; Fosc_kHz start address is: 20 (R5)
0x06B0	0x4D4B    LDR	R5, [PC, #300]
;__Lib_System_105_107.c, 407 :: 		
0x06B2	0xF00300F0  AND	R0, R3, #240
;__Lib_System_105_107.c, 408 :: 		
0x06B6	0x0901    LSRS	R1, R0, #4
;__Lib_System_105_107.c, 409 :: 		
0x06B8	0x484A    LDR	R0, [PC, #296]
0x06BA	0x1840    ADDS	R0, R0, R1
0x06BC	0x7800    LDRB	R0, [R0, #0]
; presc start address is: 0 (R0)
;__Lib_System_105_107.c, 411 :: 		
0x06BE	0xFA05F100  LSL	R1, R5, R0
; Fosc_kHz end address is: 20 (R5)
; presc end address is: 0 (R0)
; SYS_clk start address is: 20 (R5)
0x06C2	0x460D    MOV	R5, R1
;__Lib_System_105_107.c, 413 :: 		
0x06C4	0xF64B3080  MOVW	R0, #48000
0x06C8	0x4281    CMP	R1, R0
0x06CA	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC234
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 414 :: 		
0x06CC	0x4846    LDR	R0, [PC, #280]
0x06CE	0x6800    LDR	R0, [R0, #0]
0x06D0	0xF0400102  ORR	R1, R0, #2
0x06D4	0x4844    LDR	R0, [PC, #272]
0x06D6	0x6001    STR	R1, [R0, #0]
0x06D8	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
L___Lib_System_105_107_InitialSetUpRCCRCC234:
;__Lib_System_105_107.c, 415 :: 		
; SYS_clk start address is: 20 (R5)
0x06DA	0xF64550C0  MOVW	R0, #24000
0x06DE	0x4285    CMP	R5, R0
0x06E0	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC236
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 416 :: 		
0x06E2	0x4841    LDR	R0, [PC, #260]
0x06E4	0x6800    LDR	R0, [R0, #0]
0x06E6	0xF0400101  ORR	R1, R0, #1
0x06EA	0x483F    LDR	R0, [PC, #252]
0x06EC	0x6001    STR	R1, [R0, #0]
0x06EE	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC237
L___Lib_System_105_107_InitialSetUpRCCRCC236:
;__Lib_System_105_107.c, 418 :: 		
0x06F0	0x483D    LDR	R0, [PC, #244]
0x06F2	0x6801    LDR	R1, [R0, #0]
0x06F4	0xF06F0007  MVN	R0, #7
0x06F8	0x4001    ANDS	R1, R0
0x06FA	0x483B    LDR	R0, [PC, #236]
0x06FC	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC237:
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 420 :: 		
0x06FE	0xF7FFFE5D  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 422 :: 		
0x0702	0x483A    LDR	R0, [PC, #232]
0x0704	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 423 :: 		
0x0706	0x483A    LDR	R0, [PC, #232]
0x0708	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 424 :: 		
0x070A	0x483A    LDR	R0, [PC, #232]
0x070C	0xEA020100  AND	R1, R2, R0, LSL #0
0x0710	0x4839    LDR	R0, [PC, #228]
0x0712	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 426 :: 		
0x0714	0xF0020001  AND	R0, R2, #1
0x0718	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x071A	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 427 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x071C	0x4836    LDR	R0, [PC, #216]
0x071E	0x6800    LDR	R0, [R0, #0]
0x0720	0xF0000002  AND	R0, R0, #2
0x0724	0x2800    CMP	R0, #0
0x0726	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 428 :: 		
0x0728	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 429 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x072A	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 426 :: 		
0x072C	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 429 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 431 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x072E	0xF4023080  AND	R0, R2, #65536
0x0732	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x0734	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 432 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x0736	0x4830    LDR	R0, [PC, #192]
0x0738	0x6800    LDR	R0, [R0, #0]
0x073A	0xF4003000  AND	R0, R0, #131072
0x073E	0x2800    CMP	R0, #0
0x0740	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 433 :: 		
0x0742	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 434 :: 		
; ulRCC_CR end address is: 8 (R2)
0x0744	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 431 :: 		
0x0746	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 434 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 436 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x0748	0xF0025080  AND	R0, R2, #268435456
0x074C	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC257
;__Lib_System_105_107.c, 437 :: 		
0x074E	0x482A    LDR	R0, [PC, #168]
0x0750	0x6800    LDR	R0, [R0, #0]
0x0752	0xF0405180  ORR	R1, R0, #268435456
0x0756	0x4828    LDR	R0, [PC, #160]
0x0758	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 438 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x075A	0x4827    LDR	R0, [PC, #156]
0x075C	0x6800    LDR	R0, [R0, #0]
0x075E	0xF0005000  AND	R0, R0, #536870912
0x0762	0x2800    CMP	R0, #0
0x0764	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 439 :: 		
0x0766	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 440 :: 		
; ulRCC_CR end address is: 8 (R2)
0x0768	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC257:
;__Lib_System_105_107.c, 436 :: 		
;__Lib_System_105_107.c, 440 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 442 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x076A	0xF0026080  AND	R0, R2, #67108864
0x076E	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC258
;__Lib_System_105_107.c, 443 :: 		
0x0770	0x4821    LDR	R0, [PC, #132]
0x0772	0x6800    LDR	R0, [R0, #0]
0x0774	0xF0406180  ORR	R1, R0, #67108864
0x0778	0x481F    LDR	R0, [PC, #124]
0x077A	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x077C	0x4611    MOV	R1, R2
0x077E	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 444 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x0780	0x481D    LDR	R0, [PC, #116]
0x0782	0x6800    LDR	R0, [R0, #0]
0x0784	0xF0006000  AND	R0, R0, #134217728
0x0788	0x2800    CMP	R0, #0
0x078A	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 445 :: 		
0x078C	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 446 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x078E	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC258:
;__Lib_System_105_107.c, 442 :: 		
0x0790	0x4611    MOV	R1, R2
0x0792	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 446 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 448 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x0794	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x0798	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC259
;__Lib_System_105_107.c, 449 :: 		
0x079A	0x4817    LDR	R0, [PC, #92]
0x079C	0x6800    LDR	R0, [R0, #0]
0x079E	0xF0407180  ORR	R1, R0, #16777216
0x07A2	0x4815    LDR	R0, [PC, #84]
0x07A4	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x07A6	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 450 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC251:
; ulRCC_CFGR start address is: 4 (R1)
0x07A8	0x4813    LDR	R0, [PC, #76]
0x07AA	0x6800    LDR	R0, [R0, #0]
0x07AC	0xF0007000  AND	R0, R0, #33554432
0x07B0	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
;__Lib_System_105_107.c, 451 :: 		
0x07B2	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC251
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 452 :: 		
0x07B4	0x460A    MOV	R2, R1
0x07B6	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC259:
;__Lib_System_105_107.c, 448 :: 		
;__Lib_System_105_107.c, 452 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC250:
;__Lib_System_105_107.c, 456 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
; ulRCC_CFGR start address is: 8 (R2)
0x07B8	0x480C    LDR	R0, [PC, #48]
0x07BA	0x6800    LDR	R0, [R0, #0]
0x07BC	0xF000010C  AND	R1, R0, #12
0x07C0	0x0090    LSLS	R0, R2, #2
0x07C2	0xF000000C  AND	R0, R0, #12
0x07C6	0x4281    CMP	R1, R0
0x07C8	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 457 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x07CA	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC253
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 458 :: 		
L_end_InitialSetUpRCCRCC2:
0x07CC	0xF8DDE000  LDR	LR, [SP, #0]
0x07D0	0xB001    ADD	SP, SP, #4
0x07D2	0x4770    BX	LR
0x07D4	0x00811501  	#352387201
0x07D8	0x8402091D  	#152929282
0x07DC	0xF6440001  	#128580
0x07E0	0x19400001  	#72000
0x07E4	0x0C730000  	__Lib_System_105_107_APBAHBPrescTable+0
0x07E8	0x20004002  	FLASH_ACR+0
0x07EC	0x10044002  	RCC_CFGR+0
0x07F0	0x102C4002  	RCC_CFGR2+0
0x07F4	0xFFFF000F  	#1048575
0x07F8	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 360 :: 		
0x03BC	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 363 :: 		
0x03BE	0x4815    LDR	R0, [PC, #84]
0x03C0	0x6800    LDR	R0, [R0, #0]
0x03C2	0xF0400101  ORR	R1, R0, #1
0x03C6	0x4813    LDR	R0, [PC, #76]
0x03C8	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 366 :: 		
0x03CA	0x4913    LDR	R1, [PC, #76]
0x03CC	0x4813    LDR	R0, [PC, #76]
0x03CE	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 369 :: 		
0x03D0	0x4810    LDR	R0, [PC, #64]
0x03D2	0x6801    LDR	R1, [R0, #0]
0x03D4	0x4812    LDR	R0, [PC, #72]
0x03D6	0x4001    ANDS	R1, R0
0x03D8	0x480E    LDR	R0, [PC, #56]
0x03DA	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
0x03DC	0x480D    LDR	R0, [PC, #52]
0x03DE	0x6801    LDR	R1, [R0, #0]
0x03E0	0xF46F2080  MVN	R0, #262144
0x03E4	0x4001    ANDS	R1, R0
0x03E6	0x480B    LDR	R0, [PC, #44]
0x03E8	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 375 :: 		
0x03EA	0x480C    LDR	R0, [PC, #48]
0x03EC	0x6801    LDR	R1, [R0, #0]
0x03EE	0xF46F00FE  MVN	R0, #8323072
0x03F2	0x4001    ANDS	R1, R0
0x03F4	0x4809    LDR	R0, [PC, #36]
0x03F6	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 378 :: 		
0x03F8	0x4806    LDR	R0, [PC, #24]
0x03FA	0x6801    LDR	R1, [R0, #0]
0x03FC	0xF06F50A0  MVN	R0, #335544320
0x0400	0x4001    ANDS	R1, R0
0x0402	0x4804    LDR	R0, [PC, #16]
0x0404	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 381 :: 		
0x0406	0xF04F0100  MOV	R1, #0
0x040A	0x4806    LDR	R0, [PC, #24]
0x040C	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 385 :: 		
L_end_SystemClockSetDefault:
0x040E	0xB001    ADD	SP, SP, #4
0x0410	0x4770    BX	LR
0x0412	0xBF00    NOP
0x0414	0x10004002  	RCC_CR+0
0x0418	0x0000F0FF  	#-251723776
0x041C	0x10044002  	RCC_CFGR+0
0x0420	0xFFFFFEF6  	#-17367041
0x0424	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 460 :: 		
0x0688	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 461 :: 		
0x068A	0x4902    LDR	R1, [PC, #8]
0x068C	0x4802    LDR	R0, [PC, #8]
0x068E	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 462 :: 		
L_end_InitialSetUpFosc:
0x0690	0xB001    ADD	SP, SP, #4
0x0692	0x4770    BX	LR
0x0694	0x19400001  	#72000
0x0698	0x00002000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 311 :: 		
0x069C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 312 :: 		
L___GenExcept30:
0x069E	0xE7FE    B	L___GenExcept30
;__Lib_System_105_107.c, 313 :: 		
L_end___GenExcept:
0x06A0	0xB001    ADD	SP, SP, #4
0x06A2	0x4770    BX	LR
; end of ___GenExcept
0x0C84	0xB500    PUSH	(R14)
0x0C86	0xF8DFB010  LDR	R11, [PC, #16]
0x0C8A	0xF8DFA010  LDR	R10, [PC, #16]
0x0C8E	0xF7FFFC65  BL	1372
0x0C92	0xBD00    POP	(R15)
0x0C94	0x4770    BX	LR
0x0C96	0xBF00    NOP
0x0C98	0x00002000  	#536870912
0x0C9C	0x00042000  	#536870916
;P4_bonus_obj.c,0 :: ?ICSmain_loop_on_L0 [1]
0x0B88	0x01 ;?ICSmain_loop_on_L0+0
; end of ?ICSmain_loop_on_L0
;P4_bonus_obj.c,0 :: ?ICSmain_char_counter_L0 [4]
0x0B8C	0x00000000 ;?ICSmain_char_counter_L0+0
; end of ?ICSmain_char_counter_L0
;P4_bonus_obj.c,0 :: ?ICSmain_pivot_pos_L0 [4]
0x0B90	0x00000000 ;?ICSmain_pivot_pos_L0+0
; end of ?ICSmain_pivot_pos_L0
;P4_bonus_obj.c,0 :: ?ICSmain_min_pos_L0 [4]
0x0B94	0x00000000 ;?ICSmain_min_pos_L0+0
; end of ?ICSmain_min_pos_L0
;P4_bonus_obj.c,0 :: ?ICSmain_title_divider_L0 [62]
0x0B98	0x3D3D3D3D ;?ICSmain_title_divider_L0+0
0x0B9C	0x3D3D3D3D ;?ICSmain_title_divider_L0+4
0x0BA0	0x3D3D3D3D ;?ICSmain_title_divider_L0+8
0x0BA4	0x3D3D3D3D ;?ICSmain_title_divider_L0+12
0x0BA8	0x3D3D3D3D ;?ICSmain_title_divider_L0+16
0x0BAC	0x3D3D3D3D ;?ICSmain_title_divider_L0+20
0x0BB0	0x3D3D3D3D ;?ICSmain_title_divider_L0+24
0x0BB4	0x3D3D3D3D ;?ICSmain_title_divider_L0+28
0x0BB8	0x3D3D3D3D ;?ICSmain_title_divider_L0+32
0x0BBC	0x3D3D3D3D ;?ICSmain_title_divider_L0+36
0x0BC0	0x3D3D3D3D ;?ICSmain_title_divider_L0+40
0x0BC4	0x3D3D3D3D ;?ICSmain_title_divider_L0+44
0x0BC8	0x3D3D3D3D ;?ICSmain_title_divider_L0+48
0x0BCC	0x3D3D3D3D ;?ICSmain_title_divider_L0+52
0x0BD0	0x3D3D3D3D ;?ICSmain_title_divider_L0+56
0x0BD4	0x003D ;?ICSmain_title_divider_L0+60
; end of ?ICSmain_title_divider_L0
;,0 :: _initBlock_5 [72]
; Containing: ?ICSmain_title_cr_lf_L0 [3]
;             ?ICSmain_title_prompt_L0 [69]
0x0BD6	0x5B000A0D ;_initBlock_5+0 : ?ICSmain_title_cr_lf_L0 at 0x0BD6 : ?ICSmain_title_prompt_L0 at 0x0BD9
0x0BDA	0x42203450 ;_initBlock_5+4
0x0BDE	0x53554E4F ;_initBlock_5+8
0x0BE2	0x202D205D ;_initBlock_5+12
0x0BE6	0x61656C50 ;_initBlock_5+16
0x0BEA	0x65206573 ;_initBlock_5+20
0x0BEE	0x7265746E ;_initBlock_5+24
0x0BF2	0x20707520 ;_initBlock_5+28
0x0BF6	0x32206F74 ;_initBlock_5+32
0x0BFA	0x6C612033 ;_initBlock_5+36
0x0BFE	0x62616870 ;_initBlock_5+40
0x0C02	0x20737465 ;_initBlock_5+44
0x0C06	0x63206F74 ;_initBlock_5+48
0x0C0A	0x6C706D6F ;_initBlock_5+52
0x0C0E	0x20657465 ;_initBlock_5+56
0x0C12	0x75716573 ;_initBlock_5+60
0x0C16	0x65636E65 ;_initBlock_5+64
0x0C1A	0x0020203A ;_initBlock_5+68
; end of _initBlock_5
;,0 :: _initBlock_6 [26]
; Containing: ?ICSmain_title_upper_L0 [13]
;             ?ICSmain_title_lower_L0 [13]
0x0C1E	0x65707055 ;_initBlock_6+0 : ?ICSmain_title_upper_L0 at 0x0C1E
0x0C22	0x61632072 ;_initBlock_6+4
0x0C26	0x203A6573 ;_initBlock_6+8
0x0C2A	0x776F4C00 ;_initBlock_6+12 : ?ICSmain_title_lower_L0 at 0x0C2B
0x0C2E	0x63207265 ;_initBlock_6+16
0x0C32	0x3A657361 ;_initBlock_6+20
0x0C36	0x0020 ;_initBlock_6+24
; end of _initBlock_6
;,0 :: _initBlock_7 [28]
; Containing: ?ICSmain_title_non_alpha_L0 [15]
;             ?ICSmain_str_tally_L0 [8]
;             ?ICStally_str_colon_L0 [4]
;             ?ICStally_first_run_L0 [1]
0x0C38	0x2D6E6F4E ;_initBlock_7+0 : ?ICSmain_title_non_alpha_L0 at 0x0C38
0x0C3C	0x68706C61 ;_initBlock_7+4
0x0C40	0x74656261 ;_initBlock_7+8
0x0C44	0x5400203A ;_initBlock_7+12 : ?ICSmain_str_tally_L0 at 0x0C47
0x0C48	0x796C6C61 ;_initBlock_7+16
0x0C4C	0x2000203A ;_initBlock_7+20 : ?ICStally_str_colon_L0 at 0x0C4F
0x0C50	0x0100203A ;_initBlock_7+24 : ?ICStally_first_run_L0 at 0x0C53
; end of _initBlock_7
;,0 :: _initBlock_8_Padded [45]
; Containing: ?ICStally_i_L0 [4]
;             ?ICStally_char_pos_L0 [4]
;             ?ICStally_tally_pos_L0 [4]
;             ?ICStally_tally_count_L0 [4]
;             ?ICStally_prev_char_L0 [4]
;             ?ICStally_ascii_msb_L0 [4]
;             ?ICStally_ascii_lsb_L0 [4]
;             APBAHBPrescTable [16]
0x0C56	0x00000000 ;_initBlock_8_Padded+0 : ?ICStally_i_L0 at 0x0C57
0x0C5A	0x00000000 ;_initBlock_8_Padded+4 : ?ICStally_char_pos_L0 at 0x0C5B
0x0C5E	0x00000100 ;_initBlock_8_Padded+8 : ?ICStally_tally_pos_L0 at 0x0C5F
0x0C62	0x00000000 ;_initBlock_8_Padded+12 : ?ICStally_tally_count_L0 at 0x0C63
0x0C66	0x00000000 ;_initBlock_8_Padded+16 : ?ICStally_prev_char_L0 at 0x0C67
0x0C6A	0x00000000 ;_initBlock_8_Padded+20 : ?ICStally_ascii_msb_L0 at 0x0C6B
0x0C6E	0x00000000 ;_initBlock_8_Padded+24 : ?ICStally_ascii_lsb_L0 at 0x0C6F
0x0C72	0x00000000 ;_initBlock_8_Padded+28 : APBAHBPrescTable at 0x0C73
0x0C76	0x03020100 ;_initBlock_8_Padded+32
0x0C7A	0x03020104 ;_initBlock_8_Padded+36
0x0C7E	0x08070604 ;_initBlock_8_Padded+40
0x0C82	0x09 ;_initBlock_8_Padded+44
; end of _initBlock_8_Padded
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150     [128]    _write_data_char
0x01D0      [76]    _convert_to_ascii
0x0220     [120]    _write_data
0x0298     [290]    _q_sort
0x03BC     [108]    __Lib_System_105_107_SystemClockSetDefault
0x0428     [308]    _tally
0x055C      [58]    ___FillZeros
0x0598      [20]    ___CC2DW
0x05B0      [68]    _read_data
0x05F8     [144]    _print_string
0x0688      [20]    __Lib_System_105_107_InitialSetUpFosc
0x069C       [8]    ___GenExcept
0x06A4     [344]    __Lib_System_105_107_InitialSetUpRCCRCC2
0x0800     [904]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [4]    ___System_CLOCK_IN_KHZ
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0B88       [1]    ?ICSmain_loop_on_L0
0x0B8C       [4]    ?ICSmain_char_counter_L0
0x0B90       [4]    ?ICSmain_pivot_pos_L0
0x0B94       [4]    ?ICSmain_min_pos_L0
0x0B98      [62]    ?ICSmain_title_divider_L0
0x0BD6       [3]    ?ICSmain_title_cr_lf_L0
0x0BD9      [69]    ?ICSmain_title_prompt_L0
0x0C1E      [13]    ?ICSmain_title_upper_L0
0x0C2B      [13]    ?ICSmain_title_lower_L0
0x0C38      [15]    ?ICSmain_title_non_alpha_L0
0x0C47       [8]    ?ICSmain_str_tally_L0
0x0C4F       [4]    ?ICStally_str_colon_L0
0x0C53       [1]    ?ICStally_first_run_L0
0x0C57       [4]    ?ICStally_i_L0
0x0C5B       [4]    ?ICStally_char_pos_L0
0x0C5F       [4]    ?ICStally_tally_pos_L0
0x0C63       [4]    ?ICStally_tally_count_L0
0x0C67       [4]    ?ICStally_prev_char_L0
0x0C6B       [4]    ?ICStally_ascii_msb_L0
0x0C6F       [4]    ?ICStally_ascii_lsb_L0
0x0C73      [16]    __Lib_System_105_107_APBAHBPrescTable
